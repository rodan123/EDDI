{
  "name": "EDDI",
  "description": "Une personnalité neutre mais bavarde.",
  "scripts": {
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.item} \r\n{if event.repairedfully:\r\n    Totalement réparé\r\n|else:\r\n    partiellement répoaré\r\n    {Occasionally(2, cat(\r\n        \"à \",\r\n        Humanise(event.health*100), \" \",\r\n        \"pourcent de fonctionalité\"\r\n    ))}\r\n}",
      "default": true,
      "name": "AFMU repairs",
      "description": "Triggered when repairing modules using the Auto Field Maintenance Unit (AFMU)"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n\r\n{_ set blueprintname to \"Lightweight Kill warrant scanner grade 3\"}\r\n\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set Recette to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'Recette')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !Recette:\r\n    {_ Fetch from context }\r\n    {set Recette to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if Recette:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n\r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(Recette.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n            {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        Vous ne pouvez pas faire de {blueprintname}\r\n    |elif canbemade = 1:\r\n        Vous pouvez en faire un {blueprintname}\r\n    |else:\r\n        Vous pouvez faire {canbemade} {blueprintname}\r\n    }\r\n|else:\r\n    Aucune information disponible sur les matériaux requis pour {blueprintname}\r\n}.",
      "default": true,
      "name": "Blueprint make report",
      "description": "Indique le nombre d'un Blueprint que nous pouvons faire"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n\r\n{_ set blueprintname to \"Shielded Kill warrant scanner grade 5\"}\r\n\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{if blueprint:\r\n    {set materials to len(blueprint.materials)}\r\n    {blueprintname} nécessite \r\n    {if materials = 1:\r\n        l'élément {blueprint.materials[0].name}\r\n    |elif materials = 2:\r\n        les éléments {blueprint.materials[0].name} et {blueprint.materials[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(blueprint.materials):\r\n            {if cur = 0:\r\n                les éléments {blueprint.materials[cur].name}\r\n            |elif cur < len(blueprint.materials) - 1:\r\n                , {blueprint.materials[cur].name}\r\n            |else:\r\n                , et {blueprint.materials[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    aucune information pour {blueprintname}\r\n}.\r\n",
      "default": true,
      "name": "Blueprint material report",
      "description": "Donne les matières nécessaires pour une recette"
    },
    "Bodies mapped": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{_ Build a list of scanned bodies _}\r\n\r\n{set mappedList to []}\r\n\r\n{for body in reportSystem.bodies:\r\n   {if body.mapped:\r\n       {cat(mappedList, [body])} \r\n   }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(mappedList) > 0:\r\n\r\n    {if len(mappedList) = 1: Body |else: Bodies}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(mappedList):\r\n        {mappedList[cur].shortname}\r\n        {set cur to cur + 1}\r\n        {if cur = len(mappedList) - 1: and\r\n        |elif cur < len(mappedList) - 1:,\r\n        }\r\n    }\r\n\r\n    {if len(mappedList) = 1: has |else: have }\r\n    {set already to Occasionall(2, \"already\")}\r\n    {OneOf(\"{already} been mapped\", \"been mapped {already}\")}.\r\n\r\n|else:\r\n    You have yet to map any bodies in this system.\r\n}\r\n",
      "default": true,
      "name": "Bodies mapped",
      "description": "Reports all the bodies mapped in this system so far"
    },
    "Bodies to map": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences: _}\r\n\r\n{set reportTerraformables to true}   {_ Reports all terraformable and terraformed bodies _}\r\n{set highValueThreshold to 80000}   {_ The minimum threshold for estimated exploration value worth mapping _}\r\n{set reportPlanetTypes to [\r\n    \"Ammonia world\": true,\r\n    \"Earth-like world\": true,\r\n    \"Gas giant with ammonia based life\": false,\r\n    \"Gas giant with water based life\": false,\r\n    \"Helium gas giant\": false,\r\n    \"Helium-rich gas giant\": false,\r\n    \"High metal content world\": false,\r\n    \"Icy body\": false,\r\n    \"Metal-rich body\": false,\r\n    \"Rocky body\": false,\r\n    \"Rocky ice world\": false,\r\n    \"Class I gas giant\": false,\r\n    \"Class II gas giant\": false,\r\n    \"Class III gas giant\": false,\r\n    \"Class IV gas giant\": false,\r\n    \"Class V gas giant\": false,\r\n    \"Water giant\": false,\r\n    \"Water giant with life\": false,\r\n    \"Water world\": true,\r\n]}\r\n\r\n{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{_ Identify bodies worth mapping _}\r\n\r\n{set toMapList to []}\r\n{set mappedBodies to 0}\r\n{set totalBodies to 0}\r\n\r\n{for body in reportSystem.bodies:\r\n    {set totalBodies to totalBodies + 1}\r\n    {if body.mapped:\r\n        {set mappedBodies to mappedBodies + 1}\r\n    |else:\r\n        {if body.bodyType.invariantName != \"Star\":\r\n            {if body.terraformState.invariantName = \"Candidate for terraforming\" \r\n             || body.terraformState.invariantName = \"Terraformed\":\r\n                {if reportTerraformables:\r\n                    {if !toMapList[body.shortname]: \r\n                        {set toMapList to cat(toMapList, [body.shortname])}\r\n                    } \r\n                }\r\n            |elif reportPlanetTypes[body.planetClass.invariantName]:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                }\r\n            |elif body.estimatedvalue > highValueThreshold:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                } \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(toMapList) > 0:\r\n\r\n    {if len(toMapList) = 1: Body |else: Bodies}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(toMapList):\r\n        {P(toMapList[cur])}\r\n        {set cur to cur + 1}\r\n        {if cur = len(toMapList) - 1: and\r\n        |elif cur < len(toMapList) - 1:,\r\n        }\r\n    }\r\n\r\n    {if len(toMapList) = 1: is |else: are }\r\n    {if event.type = \"Body mapped\": {OneOf(\"also\")} }\r\n    {if len(toMapList) = 1: a }\r\n    {OneOf(\"recommended\", \"good\")}\r\n    {set candidates to:\r\n        {if len(toMapList) > 1: candidates |else: candidate}\r\n    }\r\n    {OneOf('{candidates} for mapping', '{candidates} to map', 'mapping {candidates}')}.\r\n\r\n|elif mappedBodies > 0:\r\n\r\n    {OneOf(\r\n        \"You have mapped all {if mappedBodies < totalBodies: {OneOf(\\\"worthwhile\\\", \\\"interesting\\\")}} bodies.\",\r\n        \"All {OneOf( \\\"{if mappedBodies < totalBodies: worthwhile} bodies\\\", \\\"bodies of interest\\\" )} {OneOf( \\\"have been mapped.\\\", \\\"are now mapped.\\\" )}\"\r\n    )}\r\n}",
      "default": true,
      "name": "Bodies to map",
      "description": "Reports all the unmapped bodies in the system that are worth mapping"
    },
    "Body atmosphere report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAtmoPressure to 0}   {_ Set to 1 if you want to here about the atmospheric pressure. _}\r\n{set reportAtmoTempScale to 0}  {_ Set to 0 if you want to hear about temperatures in Kelvin _}\r\n                                {_ Set to 1 if you want to hear about temperatures in Celsius _}\r\n                                {_ Set to 2 if you want to hear about temperatures in Fahrenheit _}\r\n                                {_ Set to 3 if you don't want to hear about the temperature of the body _}\r\n\r\n{_ Define functions for converting temperature scales _}\r\n{set ToCelsius(kelvin) to: {round(kelvin - 273, 0)}}\r\n{set ToFahrenheit(kelvin) to: {round((kelvin-273)*9/5 + 32 , 0)}}\r\n{set TempCalc(kelvin) to: \r\n    {if reportAtmoTempScale = 0: {kelvin}}\r\n    {if reportAtmoTempScale = 1: {ToCelsius(kelvin)}}\r\n    {if reportAtmoTempScale = 2: {ToFahrenheit(kelvin)}}\r\n}\r\n\r\n{_ Name our temperature scale _}\r\n{if reportAtmoTempScale = 0: {set tempscale to: Kelvin}}\r\n{if reportAtmoTempScale = 1: {set tempscale to: degrees Celsius}}\r\n{if reportAtmoTempScale = 2: {set tempscale to: degrees Fahrenheit}}\r\n\r\n{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n\r\n|else:\r\n\r\n    {if find(reportbody.planettype, \"giant\") >= 0:\r\n        {if find(reportbody.planettype, \"Class\") >= 0: \r\n            {set sudarsky to Occasionally(3, \"Sud-dar-ski\")}\r\n        }\r\n        {set planetdesc to OneOf(\"{sudarsky} Gas giants like this one have\", \"This {sudarsky} gas giant has\")}\r\n        {if find(reportbody.planettype, \"class V\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(1373)}}\r\n                temperatures above {Humanise(tempmin)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"vaporized silicates and iron\", \"silicate and iron vapors\")}.\r\n        |elif find(reportbody.planettype, \"class IV\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(354)}}\r\n                {set tempmax to: {TempCalc(903)}}\r\n                temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"alkali metals vapors\", \"vaporized alkali metals\")}.   \r\n        |elif find(reportbody.planettype, \"class III\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(251)}}\r\n                {set tempmax to: {TempCalc(353)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale},\r\n            }\r\n            a temperature at which {OneOf(\"no gaseous elements will form any clouds\", \"suitable chemicals are not present in the atmosphere to form a sustained cloud layer\", \"the atmosphere cannot sustain a persistent cloud layer\")}.\r\n        |elif find(reportbody.planettype, \"class II\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(154)}}\r\n                {set tempmax to: {TempCalc(250)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of water vapors.  \r\n        |elif find(reportbody.planettype, \"class I\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(153)}}\r\n                {set tempmax to: {TempCalc(83)}}\r\n                surface temperatures of {Humanise(tempmax)} {tempscale} {Occasionally(2, OneOf(\", or less,\", \", at most,\"))} {OneOf(\"and\", \"with\", \"forming\")}\r\n             }\r\n             a dense cloud layer of ammonia vapor.  \r\n        }\r\n\r\n    |elif reportbody.atmosphere = \"No atmosphere\" || !reportbody.atmosphere:\r\n        {Occasionally(4, OneOf(\"There is no atmosphere.\", \"It is devoid of any atmosphere.\", \"The years have scoured it clean of any atmosphere.\"))}\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            The surface temperature averages\r\n            {TempCalc(reportbody.temperature)} {tempscale}.\r\n        }\r\n\r\n    |elif reportbody.pressure: \r\n        {if reportbody.pressure < 0.1:\r\n            {set pressdesc to OneOf(\"trace gas\", \"super thin\")}\r\n        |elif reportbody.pressure < 0.25:\r\n            {set pressdesc to \"very thin\"}\r\n        |elif reportbody.pressure < 0.5:\r\n            {set pressdesc to \"thin\"}\r\n        |elif reportbody.pressure < 2:\r\n            {set pressdesc to \"\"}\r\n        |elif reportbody.pressure < 10:\r\n            {set pressdesc to \"thick\"}\r\n        |elif reportbody.pressure < 50:\r\n            {set pressdesc to OneOf(\"dense\", \"very thick\")}\r\n        |elif reportbody.pressure < 100:\r\n            {set pressdesc to OneOf(\"very dense\", \"super thick\")}\r\n        |elif reportbody.pressure >= 100:\r\n            {set pressdesc to OneOf(\"crushing\", \"super dense\")}\r\n        }\r\n        {if find(reportbody.atmosphere, \"-rich\") >= 0:\r\n            {set element to token(reportbody.atmosphere, \"-rich\", \"\")}\r\n            {set desc to OneOf(\"I detect a \", \"There is a \", \"Sensors detect a\")}\r\n            {OneOf(\"{desc} {pressdesc} {reportbody.atmosphere} atmosphere\", \"The {pressdesc} atmosphere is {reportbody.atmosphere}\", \"The {pressdesc} atmosphere is rich in {element}\")}\r\n        |elif find(atmo, \"vapour\") >= 0:\r\n            {OneOf(\"The {pressdesc} atmosphere is composed of {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere is rich in {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere contains high levels of {atmo}s\")}\r\n        |else:\r\n            {set mostly to OneOf(\"primarily\", \"mainly\", \"mostly\")}\r\n            {OneOf(\"The {pressdesc} atmosphere is composed {mostly} of\", \"Most prevalent in the {pressdesc} atmosphere is\")}\r\n            {reportbody.atmosphere}\r\n        }\r\n        { if reportAtmoPressure > 0:\r\n            with a surface pressure of {Humanise(reportbody.pressure)} Earth atmospheres\r\n        }\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            {set temp to: {TempCalc(reportbody.temperature)}}\r\n            with an average surface temperature of {temp} {tempscale}\r\n        }.\r\n    }\r\n}",
      "default": true,
      "name": "Body atmosphere report",
      "description": "Report on the atmosphere of the contextual body"
    },
    "Body mapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Mapping\", \"{Occasionally(2, \\\"Surface\\\")} Map\")}\r\n{Occasionally(2, \"of body {P(event.name)}\")}\r\n{OneOf(\"is\", \"is now\")}\r\n{OneOf(\"complete\", \"finished\")}.\r\n\r\n{if event.probesused <= event.efficiencytarget:\r\n    Efficiency bonus {OneOf(\"awarded\", \"granted\")}.\r\n}",
      "default": true,
      "name": "Body mapped",
      "description": "Triggered after mapping a body with the Surface Area Analysis scanner"
    },
    "Body materials report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportMats to 2} {_ Set to 0 if you want to hear about materials below your minimum inventory level _}\r\n                      {_ Set to 1 if you want to hear about materials below your desired inventory level _}\r\n                      {_ Set to 2 if you want to hear about all materials on the body _}\r\n\r\n{set reportMatConc to 0} {_ Set to 0 if you want to hear about good or great material percent concentrations _}\r\n                         {_ Set to 1 if you only want to hear about great material percent concentrations _}\r\n\r\n{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{_ Define a function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{if reportbody.landable:\r\n\r\n    {set goodmaterials to []}\r\n    {set greatmaterials to []}\r\n    {for material in reportbody.materials:\r\n        {set inventoryMat to _inventory(material.material)}\r\n        {if (reportMats >= 0 && inventoryMat.amount < inventoryMat.minimum && inventoryMat.minimum > 0)\r\n          || (reportMats >= 1 && inventoryMat.amount < inventoryMat.desired && inventoryMat.desired > 0)\r\n          || (reportMats >= 2):\r\n            {if material.percentage >= material.definition.greatpctbody:\r\n                {set greatmaterials to cat(greatmaterials, [material])}\r\n            |elif material.percentage >= material.definition.goodpctbody && reportMatConc != 1:\r\n                {set goodmaterials to cat(goodmaterials, [material])}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if len(goodmaterials) > 0 || len(greatmaterials) > 0:\r\n        This body contains\r\n    }\r\n\r\n    {if len(greatmaterials) > 0:\r\n        very high levels of\r\n        {if len(greatmaterials) = 1:\r\n            {greatmaterials[0].material}\r\n        |elif len(greatmaterials) = 2:\r\n            {greatmaterials[0].material} and {greatmaterials[1].material}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(greatmaterials):\r\n                {if cur = 0:\r\n                    {greatmaterials[cur].material}\r\n                |elif cur < len(greatmaterials) - 1:\r\n                    , {greatmaterials[cur].material}\r\n                |else:\r\n                    , and {greatmaterials[cur].material}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n    }\r\n    {if len(goodmaterials) > 0 && len(greatmaterials) > 0:\r\n        and\r\n    }\r\n\r\n    {if len(goodmaterials) > 0:\r\n        high levels of\r\n        {if len(goodmaterials) = 1:\r\n            {goodmaterials[0].material}\r\n        |elif len(goodmaterials) = 2:\r\n            {goodmaterials[0].material} and {goodmaterials[1].material}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(goodmaterials):\r\n                {if cur = 0:\r\n                    {goodmaterials[cur].material}\r\n                |elif cur < len(goodmaterials) - 1:\r\n                    , {goodmaterials[cur].material}\r\n                |else:\r\n                    , and {goodmaterials[cur].material}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n         }\r\n     }\r\n    {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n        .\r\n    }\r\n}",
      "default": true,
      "name": "Body materials report",
      "description": "Report on the materials available from the contextual body"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ je n'utilise plus ce script}",
      "default": true,
      "name": "Body report",
      "description": "Function to report on the details of the contextual body"
    },
    "Body report summary": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n\r\n{set reportTerraformables to 1}         {_ Reports terraformable and terraformed bodies _}\r\n{set reportPlanetTypes to 1}            {_ Reports Earth-like and water worlds _}\r\n{set reportMass to 1}                   {_ Reports notable masses (relative to Earth's) _}\r\n{set reportRadius to 1}                 {_ Reports notable radii (in kilometers) _}\r\n{set reportDensity to 0}                {_ Reports notable densities (in kilograms per cubic meter) _}\r\n{set reportGravity to 1}                {_ Reports notable gravity (in G's) for landable bodies _}\r\n{set reportTemperature to 1}            {_ Reports notable temperatures (in Kelvin) _}\r\n{set reportMaterials to 1}              {_ Reports materials per preferences in the `Body materials` script. _}\r\n{set reportLandableVolcanism to 0}      {_ Reports volcanism on landable worlds _}\r\n{set reportRings to 1}                  {_ Reports ring details _}\r\n{set reportInterestingOrbits to 1}      {_ Reports notable orbital characteristics _}\r\n{set reportRapidRotation to 1}          {_ Reports very fast rotating bodies _}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{_ Begin processing _}\r\n\r\n{set notables to []}\r\n\r\n{if reportInterestingOrbits:\r\n\r\n    {set orbitNotables to []}\r\n\r\n    {if reportbody.eccentricityprobability > 99.9:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"incredibly \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n    |elif reportbody.eccentricityprobability > 99:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"extremely \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n    |elif reportbody.eccentricityprobability > 97:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"unusually \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n    }\r\n\r\n    {if reportbody.inclinationprobability > 99.9:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"incredibly inclined\")])}\r\n    |elif reportbody.inclinationprobability > 99:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"extremely inclined\")])}\r\n    |elif reportbody.inclinationprobability > 97:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"unusually inclined\")])}\r\n    }\r\n\r\n    {if reportbody.orbitalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n    {if reportbody.orbitalperiodprobability < 0.1:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"incredibly fast\", retrograde)])}\r\n    |elif reportbody.orbitalperiodprobability < 1:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"extremely fast\", retrograde)])}\r\n    |elif reportbody.orbitalperiodprobability < 3:\r\n        {set orbitNotables to cat(orbitNotables, [cat(\"unusually fast\", retrograde)])}\r\n    }\r\n\r\n    {if len(orbitNotables) > 0:\r\n        {if StartsWithVowel(orbitNotables[0]): {set a to \"an\"} |else: {set a to \"a\"} }\r\n        {set cur to 0}\r\n        {set length to len(orbitNotables) - 1}\r\n        {while cur < len(orbitNotables):\r\n            {set orbitdescription to cat(orbitdescription, orbitNotables[cur])}\n            {set cur to cur + 1}\n            {if cur = length: \r\n                {set orbitdescription to cat(orbitdescription, \" and \")}\n            |elif cur < length:\r\n                {set orbitdescription to cat(orbitdescription, \", \")}\n            }\n        }\r\n        {set notables to cat(notables, [cat(a, \" \", orbitdescription, \" \", \"orbit\")])}\r\n    }\r\n}\r\n\r\n{if reportbody.rotationalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n{if reportRapidRotation:\r\n    {if !retrograde && reportbody.rotationalperiodprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n    |elif !retrograde && reportbody.rotationalperiodprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n    |elif !retrograde && reportbody.rotationalperiodprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n    }\r\n}\r\n\r\n{if reportMass:\r\n    {if reportbody.massprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    |elif reportbody.massprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    |elif reportbody.massprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low mass at \", Humanise(reportbody.earthmass), \" times Earth's \")])}\r\n    |elif reportbody.massprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an incredibly high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    |elif reportbody.massprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an extremely high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    |elif reportbody.massprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n    }\r\n}\r\n\r\n{if reportRadius:\r\n    {if reportbody.radiusprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an extremely high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an incredibly large radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    |elif reportbody.radiusprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n    }\r\n}\r\n\r\n{if reportTemperature:\r\n    {if reportbody.tempprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    |elif reportbody.tempprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n    }\r\n}\r\n\r\n{if reportGravity && reportbody.landable:\r\n    {if reportbody.gravityprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an incredibly high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an extremely high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    |elif reportbody.gravityprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n    }\r\n}\r\n\r\n\r\n{if reportDensity:\r\n    {if reportbody.densityprobability < 0.1:\r\n        {set notables to cat(notables, [cat(\"an incredibly low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability < 1:\r\n        {set notables to cat(notables, [cat(\"an extremely low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability < 3:\r\n        {set notables to cat(notables, [cat(\"an unusually low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an incredibly high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability > 99:\r\n        {set notables to cat(notables, [cat(\"an extremely high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    |elif reportbody.densityprobability > 97:\r\n        {set notables to cat(notables, [cat(\"an unusually high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n    }\r\n}\r\n\r\n{if reportVolcanism:\r\n    {if reportbody.volcanism && reportbody.landable:\r\n        {set notables to cat(notables, [cat(OneOf(\"volcanic\", \"tectonic\"), \" activity\")])}\r\n    }\r\n}\r\n\r\n{if reportRings:\r\n    {if reportbody.rings:\r\n        {set ringcompositions to []}\r\n        {set cur to 0}\r\n        {for ring in reportbody.rings:\r\n            {if find(ring.name, \"Ring\") > -1:\r\n                {if find(ringcompositions, ring.composition) = -1:\r\n                    {set ringcompositions to cat(ringcompositions, [cat(ring.composition)])}\r\n                }\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n        {set cur to 0}\r\n        {set length to len(ringcompositions) - 1}\r\n        {while cur < len(ringcompositions):\r\n            {set ringsdescription to cat(ringsdescription, ringcompositions[cur])}\n            {set cur to cur + 1}\n            {if cur = length: \r\n                {set ringsdescription to cat(ringsdescription, \" and \")}\n            |elif cur < length:\r\n                {set ringsdecription to cat(ringsdescription, \", \")}\n            }\n        }\r\n        {if ringsdescription:\r\n            {if len(ringcompositions) = 1:\r\n                {if StartsWithVowel(reportbody.reserves): \r\n                    {set a to \"an \"} \r\n                |else: \r\n                    {set a to \"a \"}\r\n                }\r\n                {set rings to \"ring\"}\r\n            |else:\r\n                {set rings to \"rings\"} \r\n            }\r\n            {if reportbody.reserveLevel.invariantName != \"None\": \r\n                {set reserves to reportbody.reserves}\r\n            }\r\n            {set notables to cat(notables, [cat(a, \" \", reserves, \" \", ringsdescription, \" \", rings)])}\r\n        }\r\n    }\r\n}\r\n\r\n{if reportTerraformables:\r\n    {if reportbody.terraformState.invariantName = \"Candidate for terraforming\":\r\n        {set notables to cat(notables, [OneOf(\"potential for terraforming\", \"terraformable conditions\")])}\r\n    |elif reportbody.terraformState.invariantName = \"Terraformed\":\r\n        {set notables to cat(notables, [\"terraformed conditions\"])}\r\n    }\r\n}\r\n\r\n{if reportPlanetTypes:\r\n    {if reportbody.planetClass.invariantName = \"Earth-like world\":\r\n        {set notables to cat(notables, [\"Earth-like conditions\"])}\r\n    |elif reportbody.planetClass.invariantName = \"Water world\":\r\n        {set notables to cat(notables, [OneOf(\"abundant liquid water\", \"abundant liquid water at the surface\")])}\r\n    }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n\r\n    I'm not sure which body you are asking about.\r\n\r\n|else:\r\n\r\n    {if len(notables) > 0:\r\n        {if reportbody.shortname != reportbody.bodyname:\r\n            {if reportbody.bodytype:\r\n                {reportbody.bodytype}\r\n            |else:\r\n                Body\r\n            }\r\n            {P(reportbody.shortname)}\r\n        |else:\r\n            {P(reportbody.bodyname)}\r\n        }\r\n        is\r\n\r\n        {if len(notables) = 1:\r\n            {set desc to \"notable\"}\r\n        |elif len(notables) = 2:\r\n            {set desc to OneOf('interesting', 'notable', 'remarkable')}\r\n        |elif len(notables) = 3:\r\n            {set desc to OneOf('exceptional', 'remarkable')}\r\n        |elif len(notables) = 4:\r\n            {set desc to OneOf('extraordinary')}\r\n        |elif len(notables) >= 5:\r\n            {set desc to OneOf('one of a kind', 'unique')}\r\n        }\r\n        {OneOf(\"{desc},\", \"{if StartsWithVowel(desc): an |else: a } {desc} {P(reportbody.planettype)}\")}\r\n\r\n        {if len(notables) = 1:\r\n            with {notables[0]}.\r\n        |elif len(notables) = 2:\r\n            with {notables[0]} and {notables[1]}.\r\n        |elif len(notables) = 3:\r\n            with {notables[0]}, {notables[1]} and {notables[2]}.\r\n        |elif len(notables) = 4:\r\n            with {notables[0]}, {notables[1]}, {notables[2]}, and {notables[3]}.\r\n        |elif len(notables) >= 5:\r\n            with {notables[0]}, {notables[1]}, {notables[2]}, {notables[3]}, and {notables[4]}.\r\n        }\r\n    }\r\n\r\n    {if reportMaterials:\r\n        {F(\"Body materials report\")}\r\n    }\r\n}",
      "default": true,
      "name": "Body report summary",
      "description": "Function to report on summary details of the contextual body"
    },
    "Body scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n\r\n{Pause(1000)}\r\n\r\n{set reportbody  to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !event.name || event.name = \"\": {set reportbody to BodyDetails(state.eddi_context_body_name)} }\r\n\r\n\r\nScan {OneOf(\"Terminé\", \"compilé\", \"fini\", \"interprété\")}.\r\n{set shortBodyName to event.name}\r\n{set systemName to system.name}\r\n{set sysNameLen to len(systemName)}\r\n{if len(shortBodyName) > sysNameLen && eq(systemName, slice(shortBodyName, 0, sysNameLen)):\r\n \r\n  {if find(event.planettype, \"éante\")<=0:\r\n   {set shortBodyName to cat(\"La planète numéro \", slice(shortBodyName, sysNameLen))}\r\n  |else :\r\n   {set shortBodyName to cat(\"La géante numéro \", slice(shortBodyName, sysNameLen))}\r\n  }\r\n }\r\n\r\n \r\n {set QualityRing to event.reserves}\r\n {set NbreRing to len(event.rings)}\r\n {set WithCluster to false}\r\n {set WithRing to false}\r\n {for Rings in event.rings:\r\n  {if find(Rings.name , \"Belt\") >= 0:\r\n   {set WithCluster to true}\r\n  |elif  find(Rings.name , \"Ring\") >= 0:\r\n   {set WithRing to true}\r\n  }\r\n  }\r\n {OneOf(\"{P(event.name)} \", \"ce corps céleste \", \"{shortBodyName} \")},\r\nde type \r\n{if find(event.planettype, \"Classe I g\")>=0: Classe 1 géante gazeuse\r\n|elif find(event.planettype, \"Classe V g\")>=0: Classe 5 géante gazeuse\r\n|else: {event.planettype},\r\n}\r\n{if find(event.planettype, \"éante\")<=0: {event.terraformstate}},\r\n{OneOf(\" a \", \" possède \", \" génère \")}\r\n une gravité de\r\n   {if event.gravity<1 :{round(event.gravity, 2)} \r\n   |else: {round(event.gravity, 1)} \r\n   }Gé,\r\n ce qui est\r\n {if event.gravity < 0.5:\r\n  faible...\r\n |elif event.gravity <2:\r\n  une gravité moyenne...\r\n |elif event.gravity <4:\r\n  plutôt élevé...\r\n |elif event.gravity <7:\r\n  trés élevée...\r\n |elif event.gravity <20:\r\n  extrèmement élevée...\r\n |elif event.gravity <100:\r\n  extrème...\r\n |else:\r\n  digne des records...\r\n }\r\n \r\n\r\n {if event.tidallylocked:\r\n  {shortBodyName} a une rotation synchrone.\r\n }\r\n \r\n\r\n{if NbreRing > 0:\r\n Avec {NbreRing} anneau de type\r\n  {set ringcomposition to []}\r\n        {for Ring in event.rings:\r\n   {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n        }\r\n        {if len(ringcomposition)= 1:\r\n   {ringcomposition[0]}\r\n        |elif len(ringcomposition) = 2:            \r\n   {ringcomposition[0]} pour le premier et de \r\n   {ringcomposition[1]} pour le second.\r\n        |elif len(ringcomposition) > 2:\r\n            {set cur to 0}\r\n            {while cur < len(event.rings):\r\n                {if cur = 0:                    \r\n     {ringcomposition[cur]}\r\n                |elif cur < len(ringcomposition) - 1:\r\n                    , de {ringcomposition[cur]}  \r\n                |else:\r\n                    , et de {ringcomposition[cur]} pour le dernier\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        {if find(QualityRing , \"Pristine\") >= 0:\r\n            {OneOf(\"et étant inexploités jusqu'à présent\", \"étant vierge de toutes exploitation industrielle\", \"avec une concentration majeure de matière dedans\", \"avec une concentration très riche de matière dedans\", \"avec de trés grandes réserves de matière dedans\")} \r\n        |elif find(QualityRing , \"Major\") >= 0:\r\n            {OneOf(\"avec concentrations riche\", \"avec haute concentration\", \"avec un Haut niveau\", \"avec de fortes réserves\", \"avec de grandes réserves\")} de matière dedans\r\n  |elif find(QualityRing , \"Common\") >= 0:\r\n            {OneOf(\"ayant concentrations moyenne de matière dedans\", \"une quantité standard de matière dedans\", \"quelques matières exploitables dedans\")} \r\n  |elif find(QualityRing , \"Low\") >= 0:\r\n            {OneOf(\"peu de matières exploitables dedans\", \"une faible quantité de matière dedans\", \"une faible concentration de matière dedans\")} \r\n  |elif find(QualityRing , \"Depleted\") >= 0:\r\n            {OneOf(\"presque plus de matières exploitables dedans\", \"quelques échantillons de matières dedans\", \"presque plus que de la poussière de matières exploitables dedans\")} \r\n\r\n  }...\r\n    }\r\n\r\n\r\n\r\n\r\n L'atérissage y est\r\n\r\n {if reportbody.landable:\r\n  possible\r\n |else:\r\n  impossible actuellement\r\n }\r\n .\r\n\r\n\r\n\r\n {_ Atmosphere? }\r\n\r\n {_ Volcanism}\r\n  {set volcanisme to event.volcanism.composition}\r\n {if event.volcanism.type = \"Magma\":\r\n  Il y a\r\n  {if event.volcanism.amount = Major:\r\n   {OneOf(\"de nombreuses\", \"quantité de\", \"beaucoup de\")}\r\n  |elif event.volcanism.amount = Minor:\r\n   {OneOf(\"quelques\", \"ici et là, des\", \"peu de\")}\r\n  }\r\n  coulées de lave \r\n{if StartsWithVowel(volcanisme): d'{volcanisme} |else : de {volcanisme}}\r\n  sur la surface.\r\n |elif event.volcanism.type = \"Geysers\":\r\n  Il y a\r\n  {if event.volcanism.amount = \"Major\":\r\n   {OneOf(\"de nombreux\", \"quantités de\", \"beaucoup de\")}\r\n  |elif event.volcanism.amount = \"Minor\":\r\n   {OneOf(\"quelques\", \"des\", \"peu de\")}\r\n  |elif event.volcanism.amount = []:\r\n   des\r\n  }\r\n  gésers \r\n{if StartsWithVowel(volcanisme): d'{volcanisme} |else : de {volcanisme}}\r\n  {OneOf(\"détecté\", \"présent\")} sur la surface.\r\n }\r\n\r\n {if reportbody.landable :\r\n   la rotation\r\n  {if event.rotationalperiod <= 0.5:\r\n   rapide\r\n  |elif event.rotationalperiod > 20.0:\r\n   lente\r\n  }\r\n  s'étale sur une période de {round(event.rotationalperiod,2)} jours.\r\n\r\n  {set goodmaterials to []}\r\n  {set greatmaterials to []}\r\n  {for material in event.materials:\r\n   {if material.percentage >= MaterialDetails(material.material).greatpctbody:\r\n    {set greatmaterials to cat(greatmaterials, [material])}\r\n   |elif material.percentage >= MaterialDetails(material.material).goodpctbody:\r\n    {set goodmaterials to cat(goodmaterials, [material])}\r\n   }\r\n  }\r\n\r\n  {if len(greatmaterials) > 0:\r\n   Cette planète a une forte concentration de minerai:...\r\n   {if len(greatmaterials) = 1:\r\n      {greatmaterials[0].name}\r\n    avec un taux de {round(greatmaterials[0].percentage, 1)} pour cent\r\n   |elif len(greatmaterials) = 2:\r\n    {greatmaterials[0].name}\r\n    avec {round(greatmaterials[0].percentage, 1)} pour cent ainsi que \r\n    {greatmaterials[1].name)}\r\n    avec {round(greatmaterials[1].percentage,1)} pour cent\r\n   |else:\r\n    {set cur to 0}\r\n    {while cur < len(greatmaterials):\r\n     {if cur = 0:\r\n      {round(greatmaterials[cur].percentage, 1)} pour cent en\r\n      {greatmaterials[cur].name}\r\n     |elif cur < len(greatmaterials) - 1:\r\n      , ainsi que {round(greatmaterials[cur].percentage, 1)} pour cent en\r\n      {greatmaterials[cur].name}\r\n     |else:\r\n      , et finalement {round(greatmaterials[cur].percentage, 1)} pour cent en\r\n      {greatmaterials[cur].name}\r\n     }\r\n     {set cur to cur + 1}\r\n    }\r\n   }\r\n  }.\r\n  \r\n  {if len(goodmaterials) > 0:\r\n   {if len(greatmaterials) > 0:\r\n    Ainsi que de bonnes concentrations en :\r\n   |else:\r\n    Cette planète a de bonnes concentrations de\r\n   }\r\n   {if len(goodmaterials) = 1:\r\n   {goodmaterials[0].name}\r\n    avec {round(goodmaterials[0].percentage, 1)} pourcent.\r\n   |elif len(goodmaterials) = 2:\r\n   {goodmaterials[0].name}\r\n    avec {round(goodmaterials[0].percentage, 1)} pourcent et aussi \r\n    {goodmaterials[1].name}\r\n avec {round(goodmaterials[1].percentage, 1)} pourcent.\r\n   |else:\r\n    {set cur to 0}\r\n    {while cur < len(goodmaterials):\r\n     {if cur = 0:\r\n  {goodmaterials[cur].name}\r\n      avec {round(goodmaterials[cur].percentage, 1)} pourcent\r\n     |elif cur < len(goodmaterials) - 1:\r\n      , ainsi que {goodmaterials[cur].name}\r\n   avec {round(goodmaterials[cur].percentage, 1)} pourcent\r\n     |else:\r\n      , et finalement {goodmaterials[cur].name}\r\n   avec {round(goodmaterials[cur].percentage, 1)} pourcent.\r\n     }\r\n     {set cur to cur + 1}\r\n    }\r\n   }\r\n  }\r\n  {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n   .\r\n  |else:\r\n   Quantités des matériaux présents en dessous ou dans la moyenne.\r\n  }\r\n\r\n }\r\n\r\n\r\n{if event.estimatedvalue:\r\n Valeur estimée {OneOf(\"du scann\", \"de l'étude\", \"du sondage\")}: \r\n {set BodyValue to Humanise(event.estimatedvalue)}\r\n {if find(BodyValue, \"route\")>=0:\r\n  {set BodyValue to cat(\"vers les \", slice(BodyValue, 14))}\r\n }\r\n   {BodyValue} crédits.\r\n}",
      "default": true,
      "name": "Body scanned",
      "description": "Triggered when you complete a scan of a planetary body"
    },
    "Body volcanism report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n|else:\r\n    {if (reportbody.volcanism || len(reportbody.volcanism) > 0) && reportVolcanism > 0:\r\n        {OneOf(\"I detect\", \"I am detecting\", \"Sensors detect\", \"This {reportbody.planettype} has\")}\r\n        {if reportbody.volcanism.type = \"Geysers\":\r\n            {if reportbody.volcanism.invariantAmount = 'Major':\r\n                high numbers of\r\n            |elif reportbody.volcanism.invariantAmount = 'Minor':\r\n                low numbers of\r\n            }\r\n            active {reportbody.volcanism.composition} geysers\r\n            {Occasionally(2, \"at the surface\")}\r\n        |else:\r\n            {if reportbody.volcanism.invariantAmount = 'Major':\r\n                high levels of\r\n            |elif reportbody.volcanism.invariantAmount = 'Minor':\r\n                low levels  of\r\n            }\r\n            active {reportbody.volcanism.composition} lava flows\r\n            {Occasionally(2, \"at the surface\")}\r\n        }.\r\n    }\r\n}",
      "default": true,
      "name": "Body volcanism report",
      "description": "Report on the volcanism of the contextual body"
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\n {OneOf(\"Vaisseau\", \"Engin\")} {event.victimfaction} {OneOf(\"détruit\", \"éliminé\", \"Abattu\")},\r\n {OneOf('vous recevez','vous avez reçu','arrivée de ')}\r\n {event.reward} \r\n {OneOf(\"crédits en banque\",\"crédits dans votre compte\",\"crédits pour vos grands efforts\")},\r\n{Occasionally(3, \"de la part de la faction {event.awardingfaction}\")}.",
      "default": true,
      "name": "Bond awarded",
      "description": "Triggered when you are awarded a combat bond"
    },
    "Bond redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bond_amount', event.amount)}\r\n\r\nRécompance de combat de {Humanise(event.amount)} crédits encaissé\r\n{Occasionally(2, \"\r\n {if len(event.rewards) = 1:\r\n  par {P(event.rewards[0].faction)}\r\n |else:\r\n  par\r\n  {set cur to 0}\r\n  {while cur < len(event.rewards):\r\n   {if cur = 0:\r\n   |elif cur < len(event.rewards) - 1:\r\n    ,\r\n   |else:\r\n    et\r\n   }\r\n   {P(event.rewards[cur].faction)}\r\n   {set cur to cur + 1}\r\n  }\r\n }\r\n\")}.",
      "default": true,
      "name": "Bond redeemed",
      "description": "Triggered when you redeem a combat bond"
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n    Récompense de {Humanise(event.reward)} crédits reçu par {P(event.rewards[0].faction)}\r\n|elif len(event.rewards) > 1:\r\n    Reçu un total de {Humanise(event.reward)} crédits sur  {len(event.rewards)}  récompenses\r\n    {Occasionally(2, \" par {set cur to 0} {while cur < len(event.rewards): {if cur = 0:  |elif cur < len(event.rewards) - 1:, |else: , et} {P(event.rewards[cur].faction)} {set cur to cur + 1}}\")}.\r\n    {if event.shared: à partager avec vos compagnons de vol}.\r\n}",
      "default": true,
      "name": "Bounty awarded",
      "description": "Triggered when you are awarded a bounty"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\n{P(event.faction)} vous recherche, votre tête est mise à pris pour {event.bounty} crédits pour le crime commis sur {event.victim} par {event.crime}.\r\n\r\n",
      "default": true,
      "name": "Bounty incurred",
      "description": "Triggered when you incur a bounty"
    },
    "Bounty paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\nPaid bounty of {Humanise(event.amount)} credits.",
      "default": true,
      "name": "Bounty paid",
      "description": "Triggered when you pay a bounty"
    },
    "Bounty redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bounty_amount', event.amount)}\r\n\r\n\r\nLes primes récoltés vous raportent {Humanise(event.amount)} de crédits \r\n\r\n{Occasionally(2, \"\r\n{if len(event.rewards) = 1:\r\n     de la part de{P(event.rewards[0].faction)}\r\n|else:\r\n    par\r\n   {set cur to 0}\r\n   {while cur < len(event.rewards):\r\n      {if cur = 0:\r\n      |elif cur < len(event.rewards) - 1:\r\n         ,\r\n      |else:\r\n         et\r\n      }\r\n   {P(event.rewards[cur].faction)}\r\n   {set cur to cur + 1}\r\n   }\r\n}\r\n\")}.",
      "default": true,
      "name": "Bounty redeemed",
      "description": "Triggered when you redeem a bounty voucher"
    },
    "Cargo depot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo wingupdate }\r\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    Votre équipier a chargé {event.amount} tonne{if event.amount != 1:s}\r\n    {if event.commodity != \"Unknown\": \r\n  {if StartsWithVowel(event.commodity): d'|else: de }{event.commodity}\r\n } \r\n  pour votre mission.\r\n|elif event.updatetype = \"Deliver\":\r\n    Votre équipier a livré {event.amount} tonne{if event.amount != 1:s}  \r\n    {if event.commodity != \"Unknown\": \r\n  {if StartsWithVowel(event.commodity): d'|else: de }{event.commodity}\r\n } \r\n pour votre mission.\r\n}\r\n\r\n{Pause(500)}\r\n{set remaining to event.totaltodeliver - event.delivered}\r\n{if remaining = 0:\r\n        Ce qui complète votre mission.\r\n    |else:\r\n        Ce qui vous ammène à {round(event.delivered / event.totaltodeliver * 100, 0)} pourcent de votre mission.\r\n}",
      "default": true,
      "name": "Cargo depot",
      "description": "Triggered when engaging with a mission depot"
    },
    "Cargo report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Cargo report }\r\n{_ Report current cargo manifest }\r\n\r\n{set cargocarried to 0}\r\n{set haulage to 0}\r\n{set illegal to false}\r\n{set stolen to false}\r\n\r\n{if len(inventory) > 0:\r\n    {for cargo in inventory:\r\n        {set cargocarried to cargocarried + cargo.total}\r\n        {set haulage to haulage + cargo.haulage}\r\n        {if cargo.stolen > 0: {set stolen to true}}\r\n        {if status.docked:\r\n            {for prohibited in station.prohibited:\r\n                {if cargo.name = prohibited: {set illegal to true}}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{if cargocarried > 0:\r\n    {if cargocarried = ship.cargocapacity:\r\n        Your cargo {OneOf(\"bay\", \"hold\")} is full\r\n    |else:\r\n        You are carrying {cargocarried} tonne{if cargocarried != 1:s}\r\n    }\r\n\r\n    {if len(inventory) = 1:\r\n        {if inventory[0].name = \"Limpet\":\r\n            of limpets.\r\n        |else:\r\n            of {inventory[0].name}.\r\n            {if haulage = cargocarried:\r\n                Note: All cargo is mission related haulage.\r\n            }\r\n        }\r\n    |else:\r\n        {if cargocarried < ship.cargocapacity: of cargo}.\r\n        {Occasionally(2, \"Cargo\")} {OneOf(\"Manifest\", \"Inventory\")} is as follows:\r\n\r\n        {set c to []}\r\n        {for cargo in inventory:\r\n            {if cargo.total > 0:\r\n                {set c to cat(c, [cargo])}\r\n            }\r\n        }\r\n\r\n        {set position to 0}\r\n        {for cargo in c:\r\n            {cargo.total} tonne{if cargo.total != 1:s} of \r\n            {if cargo.name = \"Limpet\":\r\n                limpets\r\n            |else:\r\n                {cargo.name}\r\n            }\r\n            {set position to position + 1}\r\n            {if position = len(c) - 1: and |else:,}\r\n        }\r\n        {if haulage > 0:\r\n            Note: {haulage} tonne{if haulage != 1:s} of your manifest is mission related haulage.\r\n        }\r\n    }.\r\n\r\n    {if cargocarried < ship.cargocapacity:\r\n        {set free to ship.cargocapacity - cargocarried}\r\n        You {OneOf(\"have {free} tonne{if free != 1:s} free\",\r\n            \"have {free} tonne{if free != 1:s} of free space\",\r\n            \"can carry an additional {free} tonne{if free != 1:s}\")}.\r\n    }\r\n\r\n    {if stolen || illegal:\r\n        Warning: You are carrying\r\n        {if stolen: stolen goods}\r\n        {if illegal:\r\n            {if stolen:, and }\r\n            goods that are illegal in this jurisdiction\r\n        }.\r\n    }\r\n\r\n|else:\r\n    {OneOf(\"Your cargo bay is empty.\",\"You have no cargo.\",\"You are carrying no cargo.\")}\r\n}",
      "default": true,
      "name": "Cargo report",
      "description": "Report current cargo manifest"
    },
    "Cargo scoop": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Context }\r\n\r\n{if state.cargo_scoop= \"fermée\":\r\n {SetState(\"cargo_scoop\", \"ouverte\")}\r\n|else : {SetState(\"cargo_scoop\", \"fermée\")}\r\n}\r\n\r\nécoutille de soute {state.cargo_scoop}.",
      "default": true,
      "name": "Cargo scoop",
      "description": "Triggered when you deploy or retract your cargo scoop"
    },
    "Cargo wingupdate": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo wingupdate }\r\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\r\n\r\n{_ respectez les espaces, et sans espace pour une bonne lecture de \"d'...\" et \"de .....\"}\r\n{if event.updatetype = \"Collect\":\r\n    Your wing mate has collected {event.amount} tonne{if event.amount != 1:s}\r\n    {if event.commodity != \"Unknown\": of {event.commodity}} from the mission depot.\r\n|elif event.updatetype = \"Deliver\":\r\n    Your wing mate has delivered {event.amount} tonne{if event.amount != 1:s} \r\n    {if event.commodity != \"Unknown\": of {event.commodity}} to the mission depot.\r\n}\r\n\r\n{Pause(500)}\r\n{set remaining to event.totaltodeliver - event.delivered}\r\n{if remaining = 0:\r\n    Wing mission requirements are now completed.\r\n|elif event.updatetype = \"Deliver\":\r\n    Wing mission is now {round(event.delivered / event.totaltodeliver * 100, 0)} percent complete.\r\n}\r\n",
      "default": true,
      "name": "Cargo wingupdate",
      "description": "Triggered when a wing-mate collects or delivers cargo for a wing mission"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'save')}\r\n{SetState('eddi_context_last_action', 'clear')}\r\n\r\nAu revoir {F(\"Honorific\")}. Ce fut un plaisir de vous servir.",
      "default": true,
      "name": "Cleared save",
      "description": "Triggered when you clear your save"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{_SetState('eddi_context_last_subject', 'cockpit')}\r\n{_SetState('eddi_context_last_action', 'breach')}\r\n\r\n{OneOf('Cest moi, ou il fait froit ici?','Bon, jespère que vous savez où est votre casque!','Brèche détecté, cest le moment de sassurer de votre réserve doxygène','Fissures en formation sur la verrière, danger!')}.",
      "default": true,
      "name": "Cockpit breached",
      "description": "Triggered when your ship's cockpit is broken"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n{OneOf(\"Vos compétances aux combats sont reconnues dans toute la galaxie, vous êtes prommu au rang \",\"Vous êtes reconnu pour vos compétences de combat, vous prennez le grade de:\")} {event.rating}",
      "default": true,
      "name": "Combat promotion",
      "description": "Triggered when your combat rank increases"
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Bienvenue\",\"Bonjour\",\"Je suis heureux de vous revoir\")} {F(\"Honorific\")}.",
      "default": true,
      "name": "Commander continued",
      "description": "Triggered when you continue an existing game"
    },
    "Commander progress": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ non utilisé actuellement ?? je ne sais pas, créé au cas ou, mais je passe raremant de rang}\r\n{_ variables possibles : les pourcentages dans les différent rangs}\r\n\r\n{_ par exemple event.combat vous donnera le % que vous avez dans votre rang actuel}\r\n{_ 100-(event.combat) cauq qu'il vous reste à parcourir pour monter de rang}\r\n\r\n\r\n {if event.combat>0 : \r\n  {set promotion to 100-event.combat}\r\n  Plus que {promotion} pourcent pour passer au rang suivant en combat.\r\n }\r\n {if event.trade>0 : \r\n  {set promotion to 100-event.trade}\r\n  Plus que {promotion} pourcent pour passer au rang suivant dans le commerce.\r\n }\r\n {if event.exploration>0 : \r\n  {set promotion to 100-event.exploration}\r\n  Plus que {promotion} pourcent pour passer au rang suivant en exploration.\r\n }\r\n {if event.cqc>0 : \r\n  {set promotion to 100-event.cqc}\r\n  Plus que {promotion} pourcent pour passer au rang suivant pour le championnat cékucé.\r\n }\r\n {if event.empire>0 : \r\n  {set promotion to 100-event.empire}\r\n  Plus que {promotion} pourcent pour passer au rang suivant dans l'empire.\r\n }\r\n {if event.federation>0 : \r\n  {set promotion to 100-event.federation}\r\n  Plus que {promotion} pourcent pour passer au rang suivant dans la fédération.\r\n }",
      "default": true,
      "name": "Commander progress",
      "description": "Triggered when your progress is reported"
    },
    "Commander ratings": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ non utilisé actuellement}\r\n{_ mise à jours de tous les rangs}\r\n{_ les variables sont les obget des différents rang}\r\n\r\n{_ par exemple event.combat.name vous donnera le nom de votre rang actuel}\r\n{_ par exemple event.combat.rank vous donnera le numéro de votre rang actuel}\r\n\r\n",
      "default": true,
      "name": "Commander ratings",
      "description": "Triggered when your ratings are reported"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Bienvenu, Commandeur.",
      "default": true,
      "name": "Commander started",
      "description": "Triggered when you start a new game"
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_cargo_name', event.commodity)}\r\n\r\n\r\n\r\nL'unité de marchandise :\r\n{event.commodity}, {OneOf(\"viens d'être chargé.\",\"est arimée dans la soute\")}.",
      "default": true,
      "name": "Commodity collected",
      "description": "Triggered when you pick up a commodity in your ship or SRV"
    },
    "Commodity ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\nL'unité de marchandise :\r\n{event.commodity}, est bien éjectée.",
      "default": true,
      "name": "Commodity ejected",
      "description": "Triggered when you eject a commodity from your ship or SRV"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\r\n {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\r\n  {set discount to commodity.avgprice - commodity.buyprice}\r\n  {if discount > best.avgprice - best.buyprice:\r\n   {set thirdbest to secondbest}\r\n   {set secondbest to best}\r\n   {set best to commodity}\r\n  |elif discount > secondbest.avgprice - secondbest.buyprice:\r\n   {set thirdbest to secondbest}\r\n   {set secondbest to commodity}\r\n  |elif discount > thirdbest.avgprice - thirdbest.buyprice:\r\n   {set thirdbest to commodity}\r\n  }\r\n }\r\n}\r\n\r\n{if best:\r\n Le marché local vent le {best.name} à un bon prix\r\n {if secondbest\r\n  , ainsi que {secondbest.name} \r\n  {if thirdbest:\r\n   et {thirdbest.name} \r\n  }\r\n }\r\n.}",
      "default": true,
      "name": "Commodity purchase check",
      "description": "Check to see which commodities are the best to purchase"
    },
    "Commodity purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\nVous venez d'acheter une unitée de {event.commodity} pour {event.price} crédits.\r\n|elif event.amount > 1:\r\nVous venez d'acheter {event.amount} unitées de {event.commodity} pour un cout de {event.price} crédits l'unité. Le coût total est donc de {event.amount * event.price} crédits.\r\n}",
      "default": true,
      "name": "Commodity purchased",
      "description": "Triggered when you buy a commodity from the markets"
    },
    "Commodity refined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'refine')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\nUne {OneOf('unité','tonne')} de minerai {event.commodity} a été raffiné.",
      "default": true,
      "name": "Commodity refined",
      "description": "Triggered when you refine a commodity from the refinery"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Commodity sale check}\r\n{_ Check to see which commodities can be sold here}\r\n\r\n\r\n{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.name = commodity.name:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to find an illegal mission related to the commodity}\r\n{set illegalmission(haulageData) to:\r\n    {for haulage in haulageData:\r\n        {if haulage.illegal:\r\n            {return true}\r\n        }\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set missioncommodities to []}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{for cargo in inventory:\r\n    {if cargo.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {set illegal to illegalmission(cargo.haulageData)}\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.owned}\r\n\r\n        {if cargo.stolen > 0 && !illegal:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.haulage > 0:\r\n            {set missioncommodities to cat(missioncommodities, [cargo.commodity])}\r\n        |elif !marketcommodity && lcase(cargo.category) != \"powerplay\" && cargo.total > 0:\r\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any commodities they can sell here for a profit}\r\n{if len(profitablecommodities) > 0:\r\n    Vous pouvez vendre vos\r\n    {if len(profitablecommodities) = 1:\r\n        {profitablecommodities[0].name}\r\n    |elif len(profitablecommodities) = 2:\r\n        {profitablecommodities[0].name}   et {profitablecommodities[1].name}  \r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(profitablecommodities):\r\n            {if cur = 0:\r\n                {profitablecommodities[cur].name}  \r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {profitablecommodities[cur].name}  \r\n            |else:\r\n                , et {profitablecommodities[cur].name}  \r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    pour un profit de {totalprofit} crédits.\r\n}\r\n\r\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\r\n{if len(unknowncommodities) > 0:\r\n    Vous pourriez {if len(profitablecommodities) > 0: aussi } vendre vos\r\n    {if len(unknowncommodities) = 1:\r\n  {unknowncommodities[0].name}          \r\n    |elif len(unknowncommodities) = 2:\r\n        {unknowncommodities[0].name}    and {unknowncommodities[1].name}   \r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(unknowncommodities):\r\n            {if cur = 0:\r\n                {unknowncommodities[cur].name}   \r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {unknowncommodities[cur].name}  \r\n            |else:\r\n                , et {unknowncommodities[cur].name}  \r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    , testez aussi les profits pottentiels pour {if len(unknowncommodities) > 1: tout cela |else: ceci} avant de clore vos transactions.\r\n}\r\n\r\n{_ Let the user know about any stolen commodities they can sell on the black market}\r\n{if len(stolencommodities) > 0:\r\n    {if station.hasblackmarket:\r\n        Vous pouvez {OneOf('décharger', 'vider', 'vendre')} vos marchandises volées\r\n        {if len(stolencommodities) = 1:\r\n            {stolencommodities[0].name}\r\n        |elif len(stolencommodities) = 2:\r\n            {stolencommodities[0].name} et {stolencommodities[1].name}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(stolencommodities):\r\n                {if cur = 0:\r\n                    {stolencommodities[cur].name}\r\n                |elif cur < len(stolencommodities) - 1:\r\n                    , {stolencommodities[cur].name}\r\n                |else:\r\n                    , {stolencommodities[cur].name}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        ici.\r\n    |else:\r\n        Note: vous {OneOf(\"avez une cargaison volée en soute\", \"avez des biens volés à bord\", \"transportez des marchandises volées\", \"transportez une cargaison volée\")}.\r\n    }\r\n}\r\n\r\n{_ Let the user know about any mission related commodities they can sell on the black market}\r\n{if len(missioncommodities) > 0 && station.hasblackmarket:\r\n\r\n    Vous pouvez {if len(stolencommodities) > 0: also} {OneOf('refourguer', 'revendre', 'écouler')} vos\r\n    {if len(missioncommodities) = 1:\r\n        {missioncommodities[0].name}\r\n    |elif len(missioncommodities) = 2:\r\n        {missioncommodities[0].name} and {missioncommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(missioncommodities):\r\n            {if cur = 0:\r\n                {missioncommodities[cur].name}\r\n            |elif cur < len(missioncommodities) - 1:\r\n                , {missioncommodities[cur].name}\r\n            |else:\r\n                , et {missioncommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    } relier à une mission en cours\r\n    ici.\r\n}\r\n",
      "default": true,
      "name": "Commodity sale check",
      "description": "Check to see which commodities can be sold here"
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\nVous venez de vendre une unité de {event.commodity} pour {event.price} crédits\r\n|elif event.amount > 1:\r\nVous venez de vendre {event.amount} unités de{event.commodity}   à {event.price} crédits par l'unité. La valeur totale est de {event.amount * event.price} crédits\r\n}\r\n{if event.profit < 0:\r\navec une perte de {-1 * event.profit * event.amount} crédits.\r\n|elif event.profit = 0:\r\nvous n'avez pas fait de profit, vous avez revendu au prix d'achat.\r\n|else:\r\navec un profit de {event.profit * event.amount} crédits.\r\n}",
      "default": true,
      "name": "Commodity sold",
      "description": "Triggered when you sell a commodity to the markets"
    },
    "Community goal": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set Context _}\r\n{SetState('eddi_context_last_subject', 'community goal')}\r\n{_ Save goal location to context if there is only one goal present _}\r\n{if len(event.cgid) = 1:\r\n   {SetState('eddi_context_goal_system_name', event.system[0])}\r\n   {SetState('eddi_context_goal_station_name', event.station[0])}\r\n}\r\n\r\n{F('Honorific')}, \r\n\r\n{if len(event.name) > 1:\r\n    {OneOf(\"Vous avez montré de lintéret pour\", \"Vous suivez\")}\r\n    les  community goals suivant:\r\n|else: \r\n {OneOf(\"le community goal\" , \"le Cégé\")} : \r\n}\r\n\r\n{set cur to 0}\r\n{while cur < len(event.name):\r\n\r\n   {if cur = 0 && len(event.name) = 1:\r\n      {_ nothing _}\r\n   |elif cur = 0 && len(event.name) > 1:\r\n      en premier :\r\n   |elif cur < (len(event.name) - 1):\r\n      ensuite, \r\n   |else:\r\n      et finalement,\r\n   }\r\n\r\n   {event.name[cur]},\r\n\r\n   {if event.iscomplete[cur]:\r\n      {OneOf(\"est fini\", \"a été complété\")} \r\n   |else: \r\n      {if (event.expiry[cur] / 3600) < 12:\r\n         {OneOf(\"est presque fini\", \r\n                \"devrai finir dans {Humanise(round(event.expiry[cur] / 3600, 1))} heures\", \r\n                \"arrive à terme\")}\r\n      |else:\r\n         {OneOf(\"a besion de vos services\", \r\n                \"est Toujours actif\", \r\n                \"est incomplet\")} \r\n      }\r\n   }\r\n\r\n   {if event.tier[cur]:\r\n       {OneOf(\"et a atteint\", \"et est actuellement à \")} {event.tier[cur]}.\r\n       {if event.contribution[cur] > 0:\r\n           Votre récompense devrait être  \r\n           {Occasionally(2, \"actuellement\")}\r\n           {Occasionally(2, \"calculé de\")}\r\n           {Humanise(event.tierreward[cur])} crédits\r\n           {Occasionally(8, \"dans les {event.percentileband[cur]}ième pourcents\")}\r\n       }\r\n   }.\r\n\r\n   {_ Create a comparison function _}\r\n   {set compare(stat) to:     \r\n       {if stat < 0.01:\r\n           juste une {OneOf(\"fraction\", \"part\")} de            \r\n       |elif stat < 0.10:\r\n            moins d'un dixième de \r\n       |elif stat < 0.25:\r\n            moins d'un quart de \r\n       |elif stat < 0.5:\r\n            moins de la moitié de\r\n       |elif stat < 0.75:\r\n            moins que \r\n       |elif stat < 0.96: \r\n            {OneOf(\"à peine\",\"juste\")}\r\n            moins que\r\n       |elif stat < 1.05:\r\n            {OneOf(\"approximativement\", \"presque\",\"environ\")} \r\n            égal à \r\n       |elif stat < 1.25:\r\n            un peu plus que\r\n       |elif stat < 1.5:\r\n            plus que\r\n       |elif stat < 2:\r\n            bien plus que\r\n       |else:\r\n            vraiment plus que\r\n       }\r\n    }\r\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\r\n\r\n    {if compare_contribution != 0:\r\n       {if event.toprank[cur]: \r\n          Congratulations! \r\n          Vous êtes un des top {event.topranksize[cur]} de ce challenge, ayant contribué \r\n          {compare(compare_contribution)}\r\n          que la moyenne.\r\n       |else:\r\n          {Occasionally(2, \"vous avez contribué {compare(compare_contribution)} que la moyenne.\")}\r\n       }\r\n    }\r\n\r\n    {if !event.iscomplete[cur]:\r\n       Vous devriez \r\n       {if event.contribution[cur] > 0: \r\n          {OneOf(\"contribuer plus\", \"faire plus d'effort\")} \r\n       |else: \r\n          {OneOf(\"participer\", \"tenter une action\")}\r\n       }\r\n       {if event.station[cur] = station.name:\r\n          {Occasionally(2, \"ici\")}\r\n          {Occasionally(2, \"dans cette station\")}.\r\n       |elif event.system[cur] = system.name:\r\n          at {P(event.station[cur])}\r\n          {Occasionally(2, \"ici\")}\r\n          {Occasionally(2, \"dans ce système\")}.\r\n       |else:\r\n          at {P(event.station[cur])},\r\n          in {OneOf(\"{P(event.system[cur])}\", \"le système {P(event.system[cur])} \" )}.\r\n       }\r\n    }\r\n\r\n    {set cur to cur + 1}\r\n    {Pause(1000)}\r\n}",
      "default": true,
      "name": "Community goal",
      "description": "Triggered when checking the status of a community goal"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"liaison radio\", \"liaison\", \"contact\")} {Occasionally(2, \"avec le chasseur\")} {OneOf(\"initialisée\", \"établie\", \"activé\")}.",
      "default": true,
      "name": "Controlling fighter",
      "description": "Triggered when you switch control from your ship to your fighter"
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set Choix1A to OneOf(\"Contact\", \"Liaison\", \"Liaison radio\")}\r\n{set Choix1 to \"{Choix1A} {OneOf(' terminé.', ' fermé.')}\"}\r\n{set Choix2A to OneOf(\"reprise de contrôle du\", \"retour aux commandes du\", \"Retour à la barre du\")}\r\n{set Choix2 to \"{Choix2A} {OneOf(' vaisseau mêre', ship.name, ship.ident)}\"}\r\n\r\n {OneOf(Choix1, Choix2)}",
      "default": true,
      "name": "Controlling ship",
      "description": "Triggered when you switch control from your fighter to your ship"
    },
    "Convertir en Celsius": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set convertir to 0}\r\n\r\n\r\n{set Convertion to (convertir -273.15)}\r\n\r\n{if Convertion: {Convertion} |else: {convertir}}\r\n\r\n",
      "default": true,
      "name": "Convertir en Celsius",
      "description": "convertir les degrés  kelvin en celsius"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n{event.name} Est maintenant en service actif.\r\n|else:\r\n{event.name} est en repos jusqu'à nouvel ordre.\r\n}",
      "default": true,
      "name": "Crew assigned",
      "description": "Triggered when you assign crew"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'fire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} a été {OneOf(\"renvoyé\", \"viré\", \"retiré de l'équipage\")}.",
      "default": true,
      "name": "Crew fired",
      "description": "Triggered when you fire crew"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'hire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} à rejoint votre service.",
      "default": true,
      "name": "Crew hired",
      "description": "Triggered when you hire crew"
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nVous avez rejoint l'équipage du {event.captain}",
      "default": true,
      "name": "Crew joined",
      "description": "Triggered when you join a crew"
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nVous avez quitté l'équipe de {event.captain}.",
      "default": true,
      "name": "Crew left",
      "description": "Triggered when you leave a crew"
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n\r\n{event.crew} has joined your crew.",
      "default": true,
      "name": "Crew member joined",
      "description": "Triggered when a commander joins your crew"
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'launch')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n\r\n{event.crew} prend les commande d'un chasseur.",
      "default": true,
      "name": "Crew member launched",
      "description": "Triggered when a crew member launches the fighter"
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} viens de quitter l'équipe.",
      "default": true,
      "name": "Crew member left",
      "description": "Triggered when a commander leaves your crew"
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'remove')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n\r\nVous avez sorti {event.crew} de votre équipe.",
      "default": true,
      "name": "Crew member removed",
      "description": "Triggered when you remove a commander from your crew"
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'role')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n{SetState('eddi_context_crew_role', event.role)}\r\n\r\n{if event.role = 'Idle':\r\n    {event.crew} n'a plus d'affectation\r\n|elif event.role = 'Fighter':\r\n    {event.crew} est aux commandes d'un chasseur\r\n|elif event.role = 'Gunner':\r\n    {event.crew} est au poste d'artillerie\r\n}.\r\n",
      "default": true,
      "name": "Crew member role changed",
      "description": "Triggered when a crew member changes their role"
    },
    "Crew paid wage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Crew paid wage }\r\n{_ Triggered when npc crew receives a profit share }\r\n\r\n",
      "default": true,
      "name": "Crew paid wage",
      "description": "Triggered when npc crew receives a profit share"
    },
    "Crew promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Crew promotion }\r\n{_ Triggered when crewmember combat rank increases }\r\n\r\n\r\nCrew member {event.name} has been promoted to the combat rank of {event.combatrating}.",
      "default": true,
      "name": "Crew promotion",
      "description": "Triggered when crewmember combat rank increases"
    },
    "Crew role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\r\nVous êtes maintenant l'artilleur de cette équipe.\r\n|elif event.role = 'Fighter':\r\nVous êtes maintenant le pilote de chasse de cette équipe.\r\n|elif event.role = 'Idle':\r\nVous n'avez pas été affecté au service actif.\r\n}",
      "default": true,
      "name": "Crew role changed",
      "description": "Triggered when your role in the crew changes"
    },
    "Crime check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime check station }\r\n{_ Check claims, fines & bounties related to the current station }\r\n\r\n\r\n{set CheckPad(current_station) to:\r\n    {set largest_pad to lcase(current_station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\": {return true} }\r\n        |elif largest_pad = \"medium:\r\n            {if lcase(ship.size) = \"large\": {return false}\r\n            |else: {return true}\r\n        }\r\n        {if lcase(ship.size) = \"small\": {return true}\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set HasService(service) to:\r\n    {if CheckPad(current_station):\r\n        {if find(current_station.stationservices, service) > -1:\r\n            {return true}\r\n        |else:\r\n            {return false}\r\n        }\r\n    |else: {return false}\r\n    }\r\n}\r\n\r\n{set current_station to StationDetails(state.eddi_context_body_name)}\r\n\r\n{set factions_claims to []}\r\n{set system_claims to 0}\r\n{set factions_fines to []}\r\n{set system_fines to 0}\r\n{set factions_bounties to []}\r\n{set station_report to false}\r\n\r\n{for record in criminalrecord:\r\n    {if record.bounties > 0:\r\n        {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n    }\r\n    {for faction in system.factions:\r\n        {if record.faction = faction.name:\r\n            {if record.claims > 0:\r\n                {set factions_claims to cat(factions_claims, [record.faction])}\r\n                {set system_claims to system_claims + record.claims}\r\n            }\r\n            {if record.fines > 0:\r\n                {set factions_fines to cat(factions_fines, [record.faction])}\r\n                {set system_fines to system_fines + record.fines}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set claim_count to len(factions_claims)}\r\n{set fine_count to len(factions_fines)}\r\n{set bounty_count to len(factions_bounties)}\r\n\r\n{if bounties > 0 && HasService(\"Interstellar Factors Contact\"):\r\n    Information: There are legal facilities at this station to clear your pending\r\n    {if bounty_count = 1: bounty |else: bounties}.\r\n    {set station_report to true}\r\n}\r\n\r\n{if (system_fines > 0 || system_claims > 0) && !station_report:\r\n    {if HasService(\"Contacts\"):\r\n        Information: You may clear your pending\r\n         {if fine_count = 1: fine |else: fines} at this station.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{if system_claims > 0 && !station_report:\r\n    {if HasService(\"Contacts\"):\r\n        Information: You may claim your pending\r\n        {if claim_count = 1: reward |else: rewards} at this station.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Crime check station",
      "description": "Check claims, fines & bounties related to the current station"
    },
    "Crime check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime check system }\r\n{_ Check claims, fines & bounties related to the current system }\r\n\r\n\r\n{set CheckPad(station) to:\r\n    {set largest_pad to lcase(station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\": {return true} }\r\n        |elif largest_pad = \"medium:\r\n            {if lcase(ship.size) = \"large\": {return false}\r\n            |else: {return true}\r\n        }\r\n        {if lcase(ship.size) = \"small\": {return true}\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set NearestStation(service) to:\r\n    {set distance to 0}\r\n    {set station_count to 0}\r\n    {for station in system.stations:\r\n        {if CheckPad(station):\r\n            {if find(station.stationservices, service) > -1:\r\n                {if distance = 0 || station.distancefromstar < distance:\r\n                    {set station_count to station_count + 1}\r\n                    {set distance to station.distancefromstar}\r\n                    {set nearest_station to station.name}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_claims to []}\r\n{set factions_fines to []}\r\n{set factions_bounties to []}\r\n\r\n{set system_claims to 0}\r\n{set system_fines to 0}\r\n{set system_bounties to 0}\r\n{set wanted_count to 0}\r\n{set station_report to false}\r\n\r\n{for record in criminalrecord:\r\n    {if record.bounties > 0:\r\n        {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n    }\r\n    {for faction in system.factions:\r\n        {if record.faction = faction.name:\r\n\r\n            {if record.claims > 0:\r\n                {set factions_claims to cat(factions_claims, [record.faction])}\r\n                {set system_claims to system_claims + record.claims}\r\n            }\r\n            {if record.fines > 0 || record.bounties > 0:\r\n                {set wanted_count to wanted_count + 1}\r\n                {set system_fines to system_fines + record.fines}\r\n                {set system_bounties to system_bounties + record.bounties}\r\n                {if record.fines > 0:\r\n                    {set factions_fines to cat(factions_fines, [record.faction])}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n{set claim_count to len(factions_claims)}\r\n{set fine_count to len(factions_fines)}\r\n{set bounty_count to len(factions_bounties)}\r\n\r\n{if wanted_count > 0:\r\n    Warning: you are wanted in this system by {wanted_count}\r\n    {if wanted_count = 1: faction |else: factions},\r\n    for total fines and bounties of {Humanise(system_fines + system_bounties)} credits.\r\n}\r\n\r\n{_ Report nearest station to clear bounties }\r\n{if bounties > 0:\r\n    {NearestStation(\"Interstellar Factors Contact\")}\r\n    {if station_count > 0:\r\n        There are legal facilities at {station_count}\r\n        {if station_count = 1: station |else: stations} to clear your pending\r\n        {if bounty_count = 1: bounty |else: bounties}.\r\n        The nearest is {nearest_station}, {round(distance, 1)} light-seconds from the main star.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{if system_fines > 0 && !station_report:\r\n    {NearestStation(\"Contacts\")}\r\n    {if station_count > 0:\r\n        There {if station_count = 1: is |else: are} {station_count}\r\n        {if station_count = 1: station |else: stations} to clear your pending\r\n        {if fine_count = 1: fine |else: fines}.\r\n        The nearest is {nearest_station}, {round(distance, 1)} light-seconds from the main star.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{_ Report nearest station for pending claims }\r\n{if claims_count > 0:\r\n    Information: you have bond and bounty claims in this system for {claim_count}\r\n    {if claim_count = 1: faction |else: factions}, for a total of {Humanise(system_claims)} credits.\r\n\r\n    {if !station_report:\r\n        {if system_fines = 0: {NearestStation(\"Contacts\")}}\r\n        {if station_count > 0:\r\n            There {if station_count = 1: is |else: are} {station_count}\r\n            {if station_count = 1: station |else: stations} to claim your\r\n            {if claim_count = 1: reward |else: rewards}.\r\n            The nearest is {nearest_station}, {round(distance, 1)} light-seconds from the main star.\r\n        }\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Crime check system",
      "description": "Check claims, fines & bounties related to the current system"
    },
    "Crime report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Crime report}\r\n{_ Report on all pending claims, fines, and bounties }\r\n\r\n\r\n{set factions_claims to []}\r\n{set claims_count to 0}\r\n{set factions_fines to []}\r\n{set fines_count to 0}\r\n{set factions_bounties to []}\r\n{set systems_bounties to []}\r\n\r\n{for record in criminalrecord:\r\n    {set faction to FactionDetails(record.faction)}\r\n    {if faction:\r\n        {if record.bounties > 0:\r\n            {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n            {for presence in faction.presences:\r\n                {if find(presence.systemName, systems_bounties) = -1:\r\n                    {set systems_bounties to cat(systems_bounties, [presence.systemName])}\r\n                }\r\n            }\r\n        }\r\n        {if record.fines > 0:\r\n            {set factions_fines to cat(factions_fines, [record.faction])}\r\n        }\r\n        {if record.claims > 0:\r\n            {set factions_claims to cat(factions_claims, [record.faction])}\r\n        }\r\n\r\n        {for report in record.factionReports:\r\n            {if !report.bounty && report.crimeEDName != \"none\":\r\n                {set fines_count to fines_count + 1}\r\n            }\r\n            {if report.crimeEDName = \"none\":\r\n                {set claims_count to claims_count + 1}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_count to len(factions_bounties)}\r\n{set systems_count to len(factions_bounties)}\r\n\r\n{if factions_count > 0:\r\n    You are wanted by {factions_count} {if factions_count = 1: faction |else: factions}\r\n    in {systems_count} {if systems_count = 1: system |else: systems} for a total of\r\n    {Humanise(bounties)} credits.\r\n}\r\n\r\n{set factions_count to len(factions_fines)}\r\n{if factions_count > 0:\r\n    You have {fines_count} pending {if fines_count = 1: fine |else: fines} from\r\n    {factions_count} {if factions_count = 1: faction |else: factions},\r\n    for a total of {Humanise(fines)} credits.\r\n}\r\n\r\n{set factions_count to len(factions_claims)}\r\n{if factions_count > 0:\r\n    You have {claims_count} uncollected {if claims_count = 1: claim |else: claims} from\r\n    {factions_count} {if factions_count = 1: faction |else: factions},\r\n    for a total of {Humanise(claims)} credits.\r\n}",
      "default": true,
      "name": "Crime report",
      "description": "Report on all pending claims, fines, and bounties"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\r\n{set damaged to 0}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 100:\r\n Coque à {Humanise(ship.health)}pourcent.\r\n {set damaged to 1}\r\n}\r\n\r\n{_ en premier la liste des modules critiques}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{if ship.powerplant.health < 60:\r\n {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100:\r\n {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n\r\n{if ship.thrusters.health < 60:\r\n {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100:\r\n {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n\r\n{if ship.frameshiftdrive.health < 60:\r\n {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100:\r\n {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n\r\n{if ship.powerdistributor.health < 60:\r\n {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100:\r\n {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n\r\n{if ship.lifesupport.health < 60:\r\n {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100:\r\n {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n\r\n{if ship.sensors.health < 60:\r\n {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100:\r\n {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n {set damaged to 1}\r\n Dégats critiques sur\r\n {if len(majordamage) = 1:\r\n  {majordamage[0].name}\r\n |elif len(majordamage) = 2:\r\n  {set translate to majordamage[0].name} et {majordamage[1].name} \r\n |else:\r\n  {set cur to 0}\r\n  {while cur < len(majordamage):\r\n   {if cur = 0:\r\n    {majordamage[cur].name}\r\n   |elif cur < len(majordamage) - 1:\r\n    , {majordamage[cur].name} \r\n   |else:\r\n    ,et {majordamage[cur].name} \r\n   {set cur to cur + 1}\r\n   }\r\n  }.\r\n }\r\n}\r\n\r\n{if len(minordamage) > 0:\r\n {set damaged to 1}\r\n Dégât minime\r\n {if len(minordamage) = 1:\r\n  {minordamage[0].name}\r\n |elif len(minordamage) = 2:\r\n  {minordamage[0].name} et {minordamage[1].name}\r\n |else:\r\n  {set cur to 0}\r\n  {while cur < len(minordamage):\r\n   {if cur = 0:\r\n    {minordamage[cur].name}\r\n   |elif cur < len(minordamage) - 1:\r\n    , {minordamage[cur].name} \r\n   |else:\r\n    ,et  {minordamage[cur].name} \r\n   }\r\n   {set cur to cur + 1}\r\n  }\r\n }.\r\n}\r\n\r\n\r\n{_ liste des modules secaondaires}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n\r\n{for compartment in ship.compartments:\r\n {if compartment.module.health < 60:\r\n  {set majordamage to cat(majordamage, [compartment.module.name])}\r\n |elif hardpoint.module.health < 100:\r\n  {set minordamage to cat(minordamage, [compartment.module.name])}\r\n }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n {if hardpoint.module.health < 60:\r\n  {set majordamage to cat(majordamage, [hardpoint.module.name])}\r\n |elif hardpoint.module.health < 100:\r\n  {set minordamage to cat(minordamage, [hardpiont.module.name])}\r\n }\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n{set damaged to 1}\r\n {if len(majordamage) = 1:\r\n  Un autre élément du vaisseau avec des dégâts majeurs\r\n |elif len(majordamage) > 1:\r\n  {len(majordamage)} autres élément du vaisseau avec des dégâts majeurs\r\n }\r\n {if len(minordamage) = 1:\r\n  et un autre élément du vaisseau avec des dégâts mineurs\r\n |elif len(minordamage) > 1:\r\n  et {len(minordamage)} autres élément du vaisseau avec des dégâts mineurs\r\n }.\r\n|elif len(minordamage) = 1:\r\n  {set damaged to 1}\r\n Un autre élément du vaisseau avec des dégâts mineurs.\r\n|elif len(minordamage) > 1:\r\n {set damaged to 1}\r\n {len(minordamage)} autres éléments du navire avec des dommages mineurs.\r\n}\r\n\r\n{if damaged = 0:\r\n {OneOf(\"Tout les système sont pleinement opérationel.\", \"{ShipName()} est pleinement opérationel.\", \"{ShipName()} est en bon état.\")}\r\n}",
      "default": true,
      "name": "Damage check",
      "description": "Check on the levels of damage to your ship"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\r\n{_ Triggered when scanning some types of data links }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'scan')}\r\n{SetState('eddi_context_last_action', 'data')}\r\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\r\n\r\n{OneOf(\"Scann des \", \"Téléchargement des \")} {event.datalinktype} {OneOf(\"Terminé\", \"achevé\", \"complet\")}.",
      "default": true,
      "name": "Data scanned",
      "description": "Triggered when scanning some types of data links"
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\n\"{event.payeefaction}\" vous offre {event.reward} crédits pour les données de \"{event.victimfaction}\" que vous avez téléchargé.\r\n",
      "default": true,
      "name": "Data voucher awarded",
      "description": "Triggered when you are awarded a data voucher"
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_data_voucher_amount', event.amount)}\r\n\r\nRécompance de {Humanise(event.amount)} crédits pour les donnée transmises\r\n{Occasionally(2, \"\r\n     {if len(event.rewards) = 1:\r\n         au sujet de {P(event.rewards[0].faction)}\r\n      |else:\r\n          au sujet de \r\n          {set cur to 0}\r\n          {while cur < len(event.rewards):\r\n          {if cur = 0:\r\n           |elif cur < len(event.rewards) - 1:\r\n                    ,\r\n           |else:\r\n                   et\r\n           }\r\n           {P(event.rewards[cur].faction)}\r\n           {set cur to cur + 1}\r\n           }\r\n       }\r\n  \")}.\r\n",
      "default": true,
      "name": "Data voucher redeemed",
      "description": "Triggered when you redeem a data voucher"
    },
    "Datalink message": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Lecture du message: {event.message}.",
      "default": true,
      "name": "Datalink message",
      "description": "Triggered upon completion of Datalink scan"
    },
    "Died": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if len(event.ships) > 0:\r\n\r\n    {set commanders to []}\r\n    {for cmdr in event.commanders:\r\n        {if find(cmdr, \"$ShipName\") >= 0:\r\n           {_ Ignore NPC ships _}        \r\n        |else: \r\n           {set commanders to cat(commanders, [cmdr])}\r\n        }\r\n    }\r\n\r\n    {ShipName()} vient\r\n    {Occasionally(2, \" juste \")}\r\n    {OneOf(\" d'être détruit\", \" d'être broyé\", \"d'être explosé\", \"de se faire bouffer\", \"de se prendre une raclée\")}\r\n\r\n    {if len(commanders) = 1:\r\n        par un {event.ships[0]} \r\n  piloté par  {commanders[0]} de rang   {event.ratings[0]}.\r\n    |elif len(commanders) = 2:\r\n        par un {event.ships[0]} \r\n  piloté par  {commanders[0]} de rang   {event.ratings[0]},\r\n        et par un {event.ships[1]} \r\n  piloté par  {commanders[1]} de rang   {event.ratings[1]}.\r\n    |elif len(commanders) > 2:\r\n        {set cur to 0}\r\n        by\r\n        {while cur < len(commanders):\r\n            {if cur = 0:\r\n                par un {event.ships[cur]} \r\n          piloté par  {commanders[cur]} de rang   {event.ratings[cur]}\r\n            |elif cur < len(commanders) - 1:\r\n                , un {event.ships[cur]} \r\n          piloté par  {commanders[cur]} de rang   {event.ratings[cur]}\r\n            |else:\r\n                , et un {event.ships[cur]} \r\n          piloté par  {commanders[cur]} de rang   {event.ratings[cur]}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Died",
      "description": "Triggered when you have died"
    },
    "Discovery scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{Pause(1000)}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {if reportSystem:\r\n        {set scannedBodies to 0}\r\n        {for body in reportSystem.bodies:\r\n            {if body.scanned:\r\n                {set scannedBodies to scannedBodies + 1}\r\n            }\r\n        }\r\n        {set bodiesToScan to (event.bodies - scannedBodies)}\r\n\r\n        {if event.bodies > 1 && event.bodies != scannedBodies:\r\n            {OneOf(\r\n                \"{scannedBodies} out of {event.bodies} bodies have been scanned\", \r\n                \"{bodiesToScan} {if bodiesToScan > 1: bodies remain |else: body remains} to be scanned\"\r\n            )}\r\n            {Occasionally(3, OneOf(\"here\", \"in this system\"))}.\r\n        |else:\r\n            {set bodiesToMap to F(\"Bodies to map\")}\r\n            {if bodiesToMap:\r\n                {bodiesToMap}\r\n            }\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Discovery scan",
      "description": "Triggered when performing a full system scan (honk)"
    },
    "Docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{setstate ('eddi_context_station_name' to event.station)}\r\n\r\n{Pause(2000)}\r\n\r\n{_ Find out in advance what we have to say }\r\n{if ship.role = \"Généraliste\" || ship.role = \"Commerce\":\r\n{set purchasecheck to F(\"Commodity purchase check\")}\r\n}\r\n{set limpetcheck to F(\"Limpet check\")}\r\n{set swapoutcheck to F(\"Swapout check\")}\r\n{set salecheck to F(\"Commodity sale check\")}\r\n{set missioncheck to F(\"Mission check station\")}\r\n\r\n{if purchasecheck || salecheck || limpetcheck || swapoutcheck || missioncheck:\r\n {OneOf(\"Établissement d'une liaison avec \",\r\n \"Contact établi avec \",\r\n \"Connection avec \",\r\n \"Accès avec \")}\r\n {OneOf(\"le réseau informatique \", \"le réseau \", \"les réseaux \", \" les ordinateurs \", \"les services \")}.\r\n {OneOf(\" de la base\", \" de la station\", \" de {event.station}\")}\r\n\r\n {Pause(1000)}\r\n {OneOf(\"Début de liaison\", \"Liaison\", \"Accès\", \"Connection\")} {OneOf(\"établi\", \"confirmé\", \"obtenue\", \"autorisé\")}.\r\n {salecheck}\r\n {purchasecheck}\r\n {swapoutcheck}\r\n {limpetcheck}\r\n {missioncheck}\r\n|else:\r\n {OneOf(\"Communications avec\", \"Contact avec\", \"Liaison avec\", \"accès avec\")}\r\n {OneOf(\"le réseau informatique \", \"le réseau \", \"les réseaux \", \" les ordinateurs \", \"le service \")}\r\n {OneOf(\" de la base\", \" de la station\", \" de {event.station}\")}\r\n\r\n {OneOf(\"établi\", \"confirmé\", \"obtenue\", \"autorisé\")}.\r\n}\r\n\r\n{Pause(200)}\r\n\r\n\r\n\r\n{SetState(\"systemearrivee\", event.station)}\r\n{F(\"Zone Occupée\")}",
      "default": true,
      "name": "Docked",
      "description": "Triggered when your ship docks at a station or outpost"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Procédure d'appontage annulée.",
      "default": true,
      "name": "Docking cancelled",
      "description": "Triggered when your ship cancels a docking request at a station or outpost"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\nNous avons un refus d'appontage\r\n\r\n{if event.reason = \"ActiveFighter\":\r\n     Car nos armes sont déployées\r\n|elif event.reason = \"Distance\":\r\n     Parce que nous sommes trop loin de la station\r\n|elif event.reason = \"Hostile\":\r\n     Parce que la sation est sous le contôle d'une faction qui ne veut pas de nous\r\n|elif event.reason = \"NoSpace\":\r\n     Parce que tous les pads d'atterrissage sont occupés\r\n|elif event.reason = \"Offences\":\r\n     Parce que nous avons récemment commis un crime contre eux!... non? sans blague?\r\n|elif event.reason = \"TooLarge\":\r\n     Parce qu'il n'y a aucune zone d'atterrissage assez grande pour notre vaisseau\r\n}.",
      "default": true,
      "name": "Docking denied",
      "description": "Triggered when your ship is denied docking at a station or outpost"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{set station to StationDetails(event.station)}\r\n{set landingpad to state.eddi_context_landing_pad_pad}\r\n{if station.model = \"Base astéroïde\" || station.model = \"Spatioport Coriolis\" || station.model = \"Spatioport Ocellus\" || station.model = \"Station inconnue\" || station.model = \"Spatioport Orbis\":\r\n    {Pause(8)}\r\n    {F(\"Landing pad report\")}\r\n|else : Votre plate forme dattérissage a le numéro {landingpad} \r\n        \r\n}",
      "default": true,
      "name": "Docking granted",
      "description": "Triggered when your ship is granted docking permission at a station or outpost"
    },
    "Docking requested": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": "Votre demande d'appontage à  {event.station} est envoyée...\r\n{pause(200)}",
      "default": true,
      "name": "Docking requested",
      "description": "Triggered when your ship requests docking at a station or outpost"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "Pas de réponse à la demande dappontage.",
      "default": true,
      "name": "Docking timed out",
      "description": "Triggered when your docking request times out"
    },
    "Empire honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\r\n{if cmdr.empirerating.rank <= 4: {_ Commoner }\r\n   commandeur\r\n|elif cmdr.empirerating.rank = 5: {_ Knight / Dame }\r\n    {if cmdr.gender = \"Male\": \r\n        Sieur\r\n    |elif cmdr.gender = \"Female\": \r\n        madame\r\n    |else: \r\n        commandeur\r\n    }\r\n|elif cmdr.empirerating.rank <= 11: {_ Peer / Peeress }\r\n    {if cmdr.gender = \"Male\": \r\n        {OneOf(\"mon seigneur\", \"votre majesté\")}\r\n    |elif cmdr.gender = \"Female\": \r\n        {OneOf(\"gente dame\", \"votre magestée\")}\r\n    |else: \r\n        commandeur\r\n    }\r\n|elif cmdr.empirerating.rank = 12:\r\n    votre grace\r\n|elif cmdr.empirerating.rank = 13:\r\n    votre grandeur\r\n|elif cmdr.empirerating.rank = 14:\r\n    your royale magestée\r\n}\r\n",
      "default": true,
      "name": "Empire honorific",
      "description": "Function to provide a suitable honorific for your commander when in the empire"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.rank = \"Chevalier\":\r\n    sieur\r\n|elif event.rank = \"Banneret\":\r\n    monseigneur\r\n|elif event.rank = \"Baron\":\r\n    monseigneur\r\n|elif event.rank = \"Vicomte\":\r\n    monseigneur\r\n|elif event.rank = \"Comte\":\r\n    monseigneur\r\n|elif event.rank = \"Earl\":\r\n    monseigneur\r\n|elif event.rank = \"Duc\":\r\n    monseigneur\r\n|elif event.rank = \"Archiduc\":\r\n    votre grace\r\n|elif event.rank = \"Prince\":\r\n    Votre altesse royale\r\n|elif event.rank = \"Roi\":\r\n    Votre majesté\r\n|else:\r\n    commandeur\r\n},\r\nLa flotte impériale \r\n{OneOf(\"vous a accordé une promotion pour le\", \"vous a promu au\", \"vous a gratifié du\", \"vous a nommé au\")}\r\ntitre honorifique de \r\n{event.rank}\r\n{Occasionally(2, \"suite aux services rendu à l'empire\")}.",
      "default": true,
      "name": "Empire promotion",
      "description": "Triggered when your rank increases with the Empire"
    },
    "Engineer contributed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} \r\nthanks you for contributing\r\n{if event.contributiontype = \"Commodity\":\r\n   {event.amount} tonne{if event.amount != 1:s} \r\n|elif event.contributiontype = \"Material\":\r\n   {if material.category = 'Data':\r\n       {event.amount} {OneOf(\"unit\", \"sample\", \"record\")}{if event.amount != 1:s}\r\n   |else:\r\n       {event.amount} {OneOf(\"unit\", \"sample\", \"fragment\")}{if event.amount != 1:s}\r\n   }\r\n}\r\nof {event.contribution}.",
      "default": true,
      "name": "Engineer contributed",
      "description": "Triggered when contributing resources to an engineer in exchange for access"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} vous permet daccéder aux {OneOf('plans', 'technologies','modifications','améliorations')} de grade {event.rank}.",
      "default": true,
      "name": "Engineer progressed",
      "description": "Triggered when you reach a new rank with an engineer"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous entrez dans le C Q C",
      "default": true,
      "name": "Entered CQC",
      "description": "Triggered when you enter CQC"
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{Pause(500)}\r\n\r\n{OneOf(\"{ShipName()} \", \"{ship.ident} \", \"votre {ship.manufacturer} {ship.model} de {ship.role}\")}\r\n {OneOf(\"entré\", \"revenu\", \"passé\")} en espace normal\r\n\r\n{if event.bodytype = 'Planet':\r\n    {OneOf(\"proche\", \"à cotés de\", \"dans les environs de\")} la planète {P(event.body)}\r\n|elif event.bodytype = 'Star':\r\n    {OneOf(\"proche\", \"à cotés de\", \"dans les environs de\")} l'étoile {P(event.body)}\r\n  |elif event.bodytype = 'Station':\r\n    {OneOf(\"proche\", \"à cotés de\", \"dans les environs de\")} {P(event.body)}\r\n}.",
      "default": true,
      "name": "Entered normal space",
      "description": "Triggered when your ship enters normal space"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": "\r\n{set entered to OneOf(\"Vous entrez\", \"Arrivée\", \"Entrée\", \"{ShipName()} est \", \"{ship.ident} est\", \"votre {ship.manufacturer} {ship.model} de {ship.role} est\")}\r\n\r\n{set warninglevel to:\r\n   {if event.threat < 2:\r\n   |elif event.threat = 2:\r\n      Attention:  niveau de menace moyen\r\n   |elif event.threat = 3:\r\n      Alerte:  menace importtante\r\n   |elif event.threat = 4:\r\n      Danger: Menace létale\r\n   |elif event.threat = 5:\r\n      Danger Extrème:  Menace Létale de haut niveau\r\n   |elif event.threat = 6:\r\n      Danger Extrème:  Menace Létale de trés haut niveau\r\n   |elif event.threat = 7:\r\n      Danger Absolu: Menace Létale au seul maximum\r\n   |else:\r\n      Danger record:  Niveau de menace de rang {event.threat} jamais encore rencontré jusqu'alors\r\n   }\r\n}\r\n{source}\r\n{set source to token(event.source, \"$USS_Type_\", 1)}\r\n\r\n{if source = \"Aftermath;\":\r\n   {set source to OneOf(\"où un combat c'est déroulé\", \"contenant les épaves d'un combat\")}\r\n|elif ((source = \"Anomaly;\" || source = \"Salvage;\") && event.threat = 2):\r\n   {set source to OneOf(\"de présence aliène\", \"xeno-technologique\", \"non-humaine\", \"de sondage Thargoïde\")}\r\n|elif (source = \"Anomaly;\" && event.threat = 4):\r\n   {set source to OneOf(\"de présence aliène\", \"xeno-technologique\", \"non-humaine\", \"de surveillance Thargoïde\")}\r\n|elif source = \"Anomaly;\":\r\n   {set source to OneOf(\"anormale\", \"inconnue\", \"mystérieuse\")}\r\n|elif source = \"Ceremonial;\":\r\n    {set source to OneOf(\"où une cérémonie se déroule\",\"de calme et de cérénité en vue d'une cérémonie\")}\r\n|elif source = \"Convoy;\":\r\n    {set source to \"occupée par un convoi\"}\r\n|elif source = \"DisruptedWakeEchoes;\":\r\n    {set source to \"\"}\r\n|elif source = \"DistressSignal;\":\r\n   {set source to OneOf(\"source d'un signal de détresse\", \"où un vaisseau semble en mauvaise posture\")}\r\n|elif source = \"MissionTarget;\":\r\n   {set source to OneOf(\"cible d'une de vos missions\", \"encodé par votre journal de mission\")}\r\n|elif source = \"NonHuman;\":\r\n   {set source to OneOf(\"de présence aliène\", \"xeno-technologique\", \"non-humaine\")}\r\n|elif source = \"Salvage;\":\r\n    {set source to \"d'émissions dégradées\"}\r\n|elif source = \"ValuableSalvage;\":\r\n    {set source to \"d'émissions encodée\"}\r\n|elif source = \"VeryValuableSalvage;\":\r\n    {set source to \"d'émissions de haute qualité\"}\r\n|elif source = \"WeaponsFire;\":\r\n   {set source to OneOf(\"de combat\", \"avec détection de tirs\")}\r\n}\r\n\r\n{Pause(500)}\r\n {entered} dans une source de signal {source},\r\n{warninglevel}.\r\n\r\n{if (system.state.edname = \"Anarchy\" && source = \"degraded emissions\" && system.population > 0)=true: \r\n   {Occasionally(2, \" Caution: {set local to OneOf('locales', 'du voisinage')} {set chatter to OneOf('ragots', 'potins', 'rumeurs')} {set indicate to OneOf('disent', 'suggèrent', 'impliquent', 'reportent')} {OneOf('des transmissions {local} {indicate}', 'des {chatter} dans les transmissions {local} {indicate}')} {Occasionally(3, 'quil y a')} {OneOf('une augmentation', 'une élévation', 'une accentuation')} {OneOf('dactivité de', 'de présence de')} {OneOf('syndicat du crime ', 'crime ', 'pirates ', 'gang de pirate ', 'clan de pirate ')} dans {OneOf('la zone', 'le voisinage', 'ce secteur', 'ce système')}. {OneOf('gardez votre', 'concervez votre')} {OneOf('calme', 'concentration', 'attention', 'vigilance')} {Occasionally(3,' {F(Honorific)}')}.\")}\r\n}",
      "default": true,
      "name": "Entered signal source",
      "description": "Triggered when your ship enters a signal source"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\n\r\n{OneOf(\"{ShipName()} \", \"{ship.ident} \", \"votre {ship.manufacturer} {ship.model} de {ship.role}\")} {OneOf(\"est entré en\", \"a sauté en\")} Hyper vitesse.",
      "default": true,
      "name": "Entered supercruise",
      "description": "Triggered when your ship enters supercruise"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Achat des données {OneOf('du système', 'dexploration')} pour {P(event.system)}\",\r\n            \"les informations {OneOf('système', 'dexploration')} pour {P(event.system)} sont enregistré dans mes banques de données\",\r\n            \"réception des données {OneOf('système', 'dexploration')} pour {P(event.system)} en provenance de la station\",\r\n            \"téléchargement des données géo-spatiale pour {P(event.system)} confirmé\")}.",
      "default": true,
      "name": "Exploration data purchased",
      "description": "Triggered when you purchase exploration data"
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Données d'exploration de {len(event.systems)} systèmes vendus pour {Humanise(event.reward)} crédits\r\n\r\n{if len(event.firsts) > 0:\r\n    , avec un bonus de {Humanise(event.bonus)} crédits pour\r\n    {if len(event.firsts) = 1:\r\n        une primodécouverte\r\n    |else:\r\n        {len(event.firsts)} primo découvertes\r\n    }\r\n}\r\n.",
      "default": true,
      "name": "Exploration data sold",
      "description": "Triggered when you sell exploration data"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n{OneOf(\"Tribulations au travers de la galaxie\",\"Vos recherches de linconnu en divers endroits de la galaxie\",\"Le différentes routes que vous avez ouverts au travers de la galaxie\",\"L'ensemble de vos découvertes\")} vous ont ammené au titre de {event.rating} en exploration.\r\n",
      "default": true,
      "name": "Exploration promotion",
      "description": "Triggered when your exploration rank increases"
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2,\"Félicitation, officier!\")}\r\n\r\nLa marine fédérale  \r\n{OneOf(\"vous a accordé une promotion pour le\", \"vous a promu au\", \"vous a gratifié du\", \"vous a nommé au\")}\r\ngrade de\r\n{event.rank}\r\n{Occasionally(2, \"suite aux services rendu à la Fédération\")}.",
      "default": true,
      "name": "Federation promotion",
      "description": "Triggered when your rank increases with the Federation"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Le chasseur {OneOf(\"a apponté\",\"est arrimé\")} {Occasionally(2,'{OneOf(\"à votre vaisseau\",\"à son vaisseau mère\")}')}.",
      "default": true,
      "name": "Fighter docked",
      "description": "Triggered when you dock a fighter with your ship"
    },
    "Fighter launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Chasseur {OneOf(\"largué\",\"déployé\")} {Occasionally(2,'{OneOf(\"de votre vaisseau\",\"de son vaisseau mère\",\"et paré au combat\")}')}",
      "default": true,
      "name": "Fighter launched",
      "description": "Triggered when you launch a fighter from your ship"
    },
    "Fighter rebuilt": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Chasseur {OneOf(\"renouvelé\", \"reconstruit\")} et pret {OneOf(\"à être largué\", \"au départ\")}.",
      "default": true,
      "name": "Fighter rebuilt",
      "description": "Triggered when a ship's fighter is rebuilt in the hangar"
    },
    "File Header": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "File Header",
      "description": "Triggered when the file header is read"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_fine_name', event.victim)}\r\n{SetState('eddi_context_fine_faction', event.faction)}\r\n{SetState('eddi_context_fine_amount', event.fine)}\r\n\r\nVous devez à {P(event.faction)} {Humanise(event.fine)} credits pour {event.crime} {OneOf(\"envers\", \"sur\", \"à l'encontre de\")} {event.victim}.",
      "default": true,
      "name": "Fine incurred",
      "description": "Triggered when you incur a fine"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\n{OneOf (\"lamende\",\"Le P V\")} de  {Humanise(event.amount)} crédits est payée.",
      "default": true,
      "name": "Fine paid",
      "description": "Triggered when you pay a fine"
    },
    "Friends status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\r\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\r\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\r\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\r\n\r\n{set uselist to \"black\"}\r\n\r\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\r\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\r\n\r\n{if uselist = \"white\":\r\n    {if find(whitelist, event.friend) > -1:\r\n        {event.friend} est {event.status}.\r\n    }\r\n|elif uselist = \"black\":\r\n    {if find(blacklist, event.friend) = -1:\r\n        {event.friend} est {event.status}.\r\n    }\r\n}",
      "default": true,
      "name": "Friends status",
      "description": "Triggered when a friendly commander changes status"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n  \r\n{if event.target = 'Hyperspace':\r\n    {_ Rewrite context to represent a jump }\r\n    {SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n\r\n    {set systeme_cible to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump}\r\n    {Pause(6000)}\r\n\r\n {OneOf(\"Destination confirmée\",\"Saut en cours\",\"Telemetrie obtenue\")}.\r\n  {ShipName()} est en {OneOf(\"partance pour\", \"route vers\", \"voyage vers\", \"transit vers\")} le système {P(systeme_cible.name)}.\r\n   {if systeme_cible.name = homesystem.name:\r\n   Bon retour chez vous, {F(\"Honorific\")}\r\n  |else:\r\n        {if event.stellarclass = \"D\":\r\n            Attention: naine blanche détectée.\r\n        |elif event.stellarclass = \"N\":\r\n            Attention: étoile à neutron détectée.\r\n        |elif event.stellarclass = \"H\":\r\n            Attention: {OneOf(\"trou noir detecté\", \"Anomalie détectée\")}.\r\n        |elif event.stellarclass != 'F' && event.stellarclass != 'O' && event.stellarclass != 'G' && event.stellarclass != 'K' && event.stellarclass != 'B' && event.stellarclass != 'A' && event.stellarclass != 'M':\r\n            Information: Le plein nest pas réalisable sur létoile destination.\r\n        }\r\n  }\r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"Aucune\" && lastsystem.allegiance != \"Indépendant\" && (!system.allegiance || system.allegiance = \"Aucune\" || system.allegiance = \"None\" || system.allegiance = \"Indépendant\"):\r\n    Vous {OneOf(\"quittez la zone d'influence\", \"êtes partie de la zone\", \"n'êtes plus dans l'espace\")} \r\n  {if lastsystem.allegiance = \"Empire\":\r\n   {OneOf(\"de lempire\",\"impérial\",\"des services impériaux\")}\r\n  |elif lastsystem.allegiance = \"Federation\":\r\n   {OneOf(\"de la fédération\",\"fédéral\",\"des services fédéraux\")}\r\n  |elif lastsystem.allegiance = \"Independent\":\r\n   {OneOf(\"Indépendant\",\"libre\",\"non aligné\")}\r\n  }.\r\n  |elif lastsystem.allegiance && lastsystem.allegiance != systeme_cible.allegiance && systeme_cible.allegiance && systeme_cible.allegiance != \"None\":\r\n   Vous {OneOf(\"êtes désormais dans un secteur\", \"entrez en zone\", \"arrivez en domaine de contrôle\")} \r\n   \r\n  {if systeme_cible.allegiance = 'Empire':\r\n   {OneOf('de lempire','impérial','des services impériaux')},  \r\n  |elif systeme_cible.allegiance = \"Federation\":\r\n   {OneOf('de la fédération','fédéral','des services fédéraux')},  \r\n  |elif systeme_cible.allegiance = \"Independent\":\r\n   {OneOf(\"Indépendant\",\"libre\",\"non aligné\")},   \r\n  }.\r\n   {if cmdr.title != \"Commandeur\":\r\n    Bon retour {F(\"Honorific\")}.\r\n   }\r\n  }\r\n\r\n  {if systeme_cible.visits = 0:\r\n   C'est votre première visite dans ce système\r\n  |elif systeme_cible.visits = 1:\r\n   C'est votre seconde visite dans ce système\r\n  |elif systeme_cible.visits = 2:\r\n   C'est votre Troisième visite dans ce système\r\n  |elif systeme_cible.visits = 3:\r\n   C'est votre quatrième visite dans ce système\r\n  |else:\r\n   Vous avez visité ce système {systeme_cible.visits} fois\r\n  }.\r\n\r\n  {if !systeme_cible.population:\r\n   {OneOf(\"système non habité\",\"pas de présence humaine ici\", \"l'humanité n'a pas encore colonisé ce système\", \"Pas de pollution humaine détectée\")}.\r\n  |else:\r\n   {F(\"System report\")}\r\n   {if systeme_cible.state:\r\n    L'état politico-économique général du système est :  {systeme_cible.state}.\r\n   }\r\n  }\r\n  \r\n  \r\n  {if systeme_cible.distancefromhome:\r\n   {Occasionally(7, \"{OneOf(\\\"vou êtes à\\\", \\\"la position actuelle est à\\\", \\\"vous êtes maintenant à\\\")} {Humanise(systeme_cible.distancefromhome)} années lumières de {OneOf(\\\"votre base principale\\\", \\\"{P(homesystem.name)}\\\")}.\")}\r\n  }\r\n{SetState(\"systemearrivee\", systeme_cible.name)}{F(\"Zone Occupée\")}.\r\n  {if systeme_cible.comment:\r\n   vous avez {OneOf(\"une note\", \"un commentaire\", \"une remarque\")} {OneOf(\"au sujet de\", \"pour ce\", \"sur ce\")} système.  {OneOf(\"Citation :\", \"disant :\", \"Lecture\", \"c'est :\")} {systeme_cible.comment}.\r\n  }\r\n }",
      "default": true,
      "name": "FSD engaged",
      "description": "Triggered when your FSD has engaged"
    },
    "Fuel check": {
      "enabled": true,
      "priority": 2,
      "responder": false,
      "script": "{_ Fuel Check _}\r\n{_ Report fuel level _}\r\n\r\n{if ship.name = state.eddi_fuelcheck_shipname:\r\n    {if state.eddi_context_fuel_used > state.eddi_fuelcheck_maxfuel:\r\n        {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    }\r\n|else:\r\n    {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    {SetState('eddi_fuelcheck_shipname', ship.name)}\r\n}\r\n\r\n{set maxfuel to state.eddi_fuelcheck_maxfuel}\r\n{set fuelremaining to state.eddi_context_fuel_remaining}\r\n{set maxjump to fuelremaining/maxfuel}\r\n{set currentfuel to round(fuelremaining / ship.fueltanktotalcapacity * 100, 1)}\r\n{if find(currentfuel, \".0\") > -1:\r\n   {set currentfuel to round(currentfuel, 0)}\r\n}\r\n{set shipsfuel to:\r\n   {OneOf(\"niveaux\", \"réservoirs\", \"réserves\")} de carburant {Occasionally(2, \"du {P(ShipName())}\" )} {Occasionally(2, \"sont\")} {Occasionally(2, \"actuellement\")}\r\n}\r\n{set currentpercent to: \r\n   à {currentfuel} pourcent {Occasionally(2, \"de capacité\")}\r\n}\r\n\r\n{if maxjump < 0.5:\r\n   Danger!\r\n   {shipsfuel} vides!\r\n   {Pause(500)}\r\n   Fonctionnement sur les réserves, L'arret de tout système non vital est fortement conseillé.\r\n   {Pause(500)}\r\n   Transpondeur d'urgence activé\r\n   {Pause(500)}\r\n   Vérification radio OK! bande fréquence trouvé! Il est conseillé de faire appel à Symbiose!\r\n|elif maxjump < 1.25:\r\n   {OneOf(\"Attention:\", \"Alerte:\", \"Danger:\", \"Alarme:\")}\r\n   {shipsfuel} {OneOf(\"dangereusement bas\", \"presque à sec\")}.\r\n   {OneOf(\"Approvisionnez en urgence\", \"faire le plein est fortement recommandé\", \"La priorité est de trouver du carburant\", \"Je conseillerai de trouver du carburant\")}\r\n|elif currentfuel < 25:\r\n   {OneOf(\"Attention:\", \"Alerte:\", \"Danger:\", \"Alarme:\")}\r\n   {shipsfuel} {OneOf(\"en dessous 25%\", \" {currentpercent}\" )}\r\n|elif currentfuel < 50:\r\n   {shipsfuel} {OneOf(\"en dessous 50%\", \" {currentpercent}\" )}\r\n|elif currentfuel < 100:\r\n   {shipsfuel} {currentpercent}\r\n|else:\r\n   {shipsfuel} {OneOf(currentpercent, \"pleins\")}\r\n}\r\n{Occasionally(3,\", {F('Honorific')}\")}.",
      "default": true,
      "name": "Fuel check",
      "description": "Report on fuel levels"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    \"Il n'y a pas d'article non lu dans cette catégorie\"\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState(\"eddi_context_galnet_news_id\", article.id)}\r\n    {article.title}: \r\n {set morceaux to split(article.content, \"thargoid\")}\r\n {set nbre_morceaux to len(morceaux)}\r\n\r\n {if nbre_morceaux > 1 :\r\n  {set test to 1}\r\n  {set new_text to \"\"}\r\n  {for part in morceaux:\r\n   {if test = 1:\r\n     {set new_text to cat(part, \"thargoïde\")}\r\n   |elif test < nbre_morceaux:\r\n     {set new_text to cat(new_text, part, \"thargoïde\")}\r\n   |else : \r\n    {set new_text to cat(new_text, part)}\r\n   \r\n   }\r\n   {set test to (test+1)}\r\n   \r\n  }\r\n |else :\r\n  {set new_text to article.content}\r\n }\r\n {new_text}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.",
      "default": true,
      "name": "Galnet latest news",
      "description": "Read the latest unread news in a given category"
    },
    "Galnet mark read": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Il n'y a aucun article non lu\r\n    {if articlecategory: 'in that category' }\r\n|else:\r\n    {set item to 0}\r\n    {while item < len(articles):\r\n        {GalnetNewsMarkRead(articles[item].id)}\r\n        {set item to (item + 1)}\r\n    }\r\n    {len(articles)} {OneOf('articles', 'infos')} notés comme lu\r\n}.\r\n",
      "default": true,
      "name": "Galnet mark read",
      "description": "Mark news articles as read"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\r\n{set articleid to state.articleid}\r\n{if articleid:\r\n    {set article to GalnetNews(articleid)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'news')}\r\n    {SetState('eddi_context_galnet_news_id', articleid)}\r\n}\r\n\r\n{if !article:\r\n    {_ Fetch from context }\r\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\r\n}\r\n\r\n{if article:\r\n    {article.title}:  \r\n {set morceaux to split(article.content, \"thargoid\")}\r\n {set nbre_morceaux to len(morceaux)}\r\n\r\n {if nbre_morceaux > 1 :\r\n  {set test to 1}\r\n  {set new_text to \"\"}\r\n  {for part in morceaux:\r\n   {if test = 1:\r\n     {set new_text to cat(part, \"thargoïde\")}\r\n   |elif test < nbre_morceaux:\r\n     {set new_text to cat(new_text, part, \"thargoïde\")}\r\n   |else : \r\n    {set new_text to cat(new_text, part)}\r\n   \r\n   }\r\n   {set test to (test+1)}   \r\n  }\r\n |else :\r\n  {set new_text to article.content}\r\n }\r\n {new_text}\r\n|else:\r\n   Je n'ai aucune information au sujet de cet article\r\n}.\r\n",
      "default": true,
      "name": "Galnet news",
      "description": "Read a particular news article"
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set statustitle to \"^(Galactic News: ((Weekly .*)|(Starport Status Update)))|(Powerplay: Incoming Update)\"}\r\n\r\n{if len(event.items) = 1:\r\n    Un nouvel article dont le nom est {event.items[0].title} a été plublié dans le Galnet.\r\n    {if !match(event.items[0].title, statustitle):\r\n  Lecture du sujet : \r\n  {set morceaux to split(event.items[0].content, \"thargoid\")}\r\n  {set nbre_morceaux to len(morceaux)}\r\n\r\n  {if nbre_morceaux > 1 :\r\n   {set test to 1}\r\n   {set new_text to \"\"}\r\n   {for part in morceaux:\r\n    {if test = 1:\r\n      {set new_text to cat(part, \"thargoïde\")}\r\n    |elif test < nbre_morceaux:\r\n      {set new_text to cat(new_text, part, \"thargoïde\")}\r\n    |else : \r\n     {set new_text to cat(new_text, part)}\r\n    \r\n    }\r\n    {set test to (test+1)}\r\n    \r\n   }\r\n  |else :\r\n   {set new_text to event.items[0].content}\r\n  }{new_text}.\r\n    }\r\n|elif len(event.items) > 1:\r\n    {len(event.items)} nouveaux articles ont été publiés sur le Galnet.\r\n    {set item to 0}\r\n    {while item < len(event.items):\r\n        {if item = 0:\r\n            Titre du premier : {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , et contient: \r\n    {set morceaux to split(event.items[item].content, \"thargoid\")}\r\n    {set nbre_morceaux to len(morceaux)}\r\n\r\n    {if nbre_morceaux > 1 :\r\n     {set test to 1}\r\n     {set new_text to \"\"}\r\n     {for part in morceaux:\r\n      {if test = 1:\r\n        {set new_text to cat(part, \"thargoïde\")}\r\n      |elif test < nbre_morceaux:\r\n        {set new_text to cat(new_text, part, \"thargoïde\")}\r\n      |else : \r\n       {set new_text to cat(new_text, part)}\r\n      \r\n      }\r\n      {set test to (test+1)}\r\n      \r\n     }\r\n    |else :\r\n     {set new_text to event.items[item].content}\r\n    }{new_text}   \r\n            }. \r\n        |elif item = 1:\r\n            Le second se nomme {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , et en voici le contenu: \r\n    {set morceaux to split(event.items[item].content, \"thargoid\")}\r\n    {set nbre_morceaux to len(morceaux)}\r\n\r\n    {if nbre_morceaux > 1 :\r\n     {set test to 1}\r\n     {set new_text to \"\"}\r\n     {for part in morceaux:\r\n      {if test = 1:\r\n        {set new_text to cat(part, \"thargoïde\")}\r\n      |elif test < nbre_morceaux:\r\n        {set new_text to cat(new_text, part, \"thargoïde\")}\r\n      |else : \r\n       {set new_text to cat(new_text, part)}\r\n      \r\n      }\r\n      {set test to (test+1)}\r\n     }\r\n    |else :\r\n     {set new_text to event.items[item].content}\r\n    }\r\n      {new_text}\r\n            }.\r\n        |elif item = len(event.items) - 1:\r\n            Titre du dernier : {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                . Lecture : \r\n    {set morceaux to split(event.items[item].content, \"thargoid\")}\r\n    {set nbre_morceaux to len(morceaux)}\r\n\r\n    {if nbre_morceaux > 1 :\r\n     {set test to 1}\r\n     {set new_text to \"\"}\r\n     {for part in morceaux:\r\n      {if test = 1:\r\n        {set new_text to cat(part, \"thargoïde\")}\r\n      |elif test < nbre_morceaux:\r\n        {set new_text to cat(new_text, part, \"thargoïde\")}\r\n      |else : \r\n       {set new_text to cat(new_text, part)}\r\n      \r\n      }\r\n      {set test to (test+1)}\r\n     }\r\n    |else :\r\n     {set new_text to event.items[item].content}\r\n    }\r\n      {new_text}\r\n            }.\r\n        |else:\r\n            Le titre du suivant est {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , pour : \r\n    {set morceaux to split(event.items[item].content, \"thargoid\")}\r\n    {set nbre_morceaux to len(morceaux)}\r\n\r\n    {if nbre_morceaux > 1 :\r\n     {set test to 1}\r\n     {set new_text to \"\"}\r\n     {for part in morceaux:\r\n      {if test = 1:\r\n        {set new_text to cat(part, \"thargoïde\")}\r\n      |elif test < nbre_morceaux:\r\n        {set new_text to cat(new_text, part, \"thargoïde\")}\r\n      |else : \r\n       {set new_text to cat(new_text, part)}\r\n      \r\n      }\r\n      {set test to (test+1)}\r\n     }\r\n    |else :\r\n     {set new_text to event.items[item].content}\r\n    }\r\n      {new_text}\r\n            }.\r\n        }\r\n        {set item to item + 1}\r\n        {Pause(1000)}\r\n    }\r\n}",
      "default": true,
      "name": "Galnet news published",
      "description": "Triggered when news is published on Galnet"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Il n'y a aucun article non lu dans cette catégorie.\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: \r\n  \r\n {set morceaux to split(article.content, \"thargoid\")}\r\n {set nbre_morceaux to len(morceaux)}\r\n\r\n {if nbre_morceaux > 1 :\r\n  {set test to 1}\r\n  {set new_text to \"\"}\r\n  {for part in morceaux:\r\n   {if test = 1:\r\n     {set new_text to cat(part, \"thargoïde\")}\r\n   |elif test < nbre_morceaux:\r\n     {set new_text to cat(new_text, part, \"thargoïde\")}\r\n   |else : \r\n    {set new_text to cat(new_text, part)}\r\n   \r\n   }\r\n   {set test to (test+1)}\r\n  }\r\n |else :\r\n  {set new_text to article.content}\r\n }\r\n   {new_text}\r\n\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.",
      "default": true,
      "name": "Galnet oldest news",
      "description": "Read the oldest unread news in a given category"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    Vous avez déjà lu tous les articles\r\n|elif len(articles) = 1:\r\n    You have one unread news item\r\n|else:\r\n    Vous avez {len(articles)} articles non lus\r\n}.",
      "default": true,
      "name": "Galnet unread report",
      "description": "Report on unread news"
    },
    "Glide": {
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'glide')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{if event.gliding:\r\n    {Pause(5000)}\r\n    {Occasionally(2, \"mode d'\")}entrée planétaire \r\n    {OneOf(\"engagé.\", \"initialisé.\")}\r\n\r\n    {Pause(1000)}\r\n    {set body to BodyDetails(event.body, event.system)}\r\n    {if !body.name || body.name = \"\" || !body.gravity:\r\n        Données d'approche planétaire inconnues.\r\n    |else:\r\n        {if body.landable:\r\n            {set gravity to round(body.gravity,2)}\r\n            {if gravity > 4:\r\n                Danger! {P(body.name)} a une gravité extrème de {gravity} Gé.\r\n            |elif gravity > 2:\r\n                Attention! {P(body.name)} a une forte gravité de {gravity} Gé.\r\n            |elif gravity > 0.5:\r\n                Alerte! {P(body.name)} a une gravité moyenne de {gravity} Gé.\r\n            |else:\r\n                {P(body.name)} a une gravité faible de {gravity} Gé.\r\n            }\r\n        }\r\n    }\r\n|else:\r\n    {OneOf(\"Arrivée en faible altitude.\", \"Apprauche planétaire terminée.\")}.\r\n}",
      "default": true,
      "name": "Glide",
      "description": "Triggered when your ship enters or exits glide"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": "{Occasionally(2, \"Danger:\")}\r\nDégats thermiques subis!.",
      "default": true,
      "name": "Heat damage",
      "description": "Triggered when your ship is taking damage from excessive heat"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": "{Occasionally(2, \"Alerte:\")}\r\nLa température dépasse les seuils de tolérance!.",
      "default": true,
      "name": "Heat warning",
      "description": "Triggered when your ship's heat exceeds 100%"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Empire\":\r\n    {if cmdr.empirerating.rank <= 4:\r\n       commandeur\r\n    |elif cmdr.empirerating.rank = 5:\r\n        sieur\r\n    |elif cmdr.empirerating.rank <= 11:\r\n        monseigneur\r\n    |elif cmdr.empirerating.rank = 12:\r\n        votre grace\r\n    |elif cmdr.empirerating.rank = 13:\r\n        votre altesse royale\r\n    |elif cmdr.empirerating.rank = 14:\r\n        votre majesté\r\n    }\r\n|elif system.allegiance = \"Federation\":\r\n    {if cmdr.federationrating.rank = 0:\r\n        commandeur\r\n    |else:\r\n        {cmdr.federationrating.name}\r\n    }\r\n|else:\r\n    commandeur\r\n}\r\n",
      "default": true,
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your commander"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\r\n    {if event.health < 40:\r\n        Danger!:\r\n    |elif event.health < 60:\r\n        Attention!:\r\n    |elif event.health < 80:\r\n        Alerte!:\r\n    }\r\n    {OneOf(\"Coque\", \"Intégrité structurelle\", \"Intégrité\")} {Occasionally(3, \"est\")} à {event.health}%.\r\n}",
      "default": true,
      "name": "Hull damaged",
      "description": "Triggered when your hull is damaged to a certain extent"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set insurance to round(ship.value * cmdr.insurance / 100)}\r\n\r\n{set covereds to round((cmdr.credits / insurance) - 0.5)}\r\n\r\n{if covereds = 0:\r\n  Danger: vous ne pouvez pas payer d'assurance actuellement.\r\n|elif covereds = 1:\r\n  Attention: Vous avez juste assez de crédit pour payer votre assurance une seule fois.\r\n|elif covereds < 4:\r\n  Note: Vous pouvez payer votre assurance huste deux ou trois fos.\r\n|else\r\n  (aucun problème dassurance avec ce compte en banque)\r\n}",
      "default": true,
      "name": "Insurance check",
      "description": "Check for enough credits to cover your insurance"
    },
    "Jet cone boost": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\nRéacteur F S D emplifiés de {Humanise(event.boost * 100)} pourcent.\r\nParé pour le saut.",
      "default": true,
      "name": "Jet cone boost",
      "description": "Triggered when enough material has been collected from a solar jet cone (at a white dwarf or neutron star) for a jump boost"
    },
    "Jet cone damage": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Jet cone damage",
      "description": "Triggered in normal space when passing through the jet cone from a white dwarf or neutron star causes damage to a ship module"
    },
    "Jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\r\n{SetState('eddi_context_fuel_used', event.fuelused)}\r\n\r\n{F('Fuel check')}\r\n\r\n{set system_missions to F(\"Mission check system\")}\r\n{if system_missions:\r\n    {Pause(2000)}\r\n    {system_missions}\r\n}",
      "default": true,
      "name": "Jumped",
      "description": "Triggered when you complete a jump to another system"
    },
    "Killed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez vaincu le pilote {event.rating}, {event.victim}.",
      "default": true,
      "name": "Killed",
      "description": "Triggered when you kill another player"
    },
    "Landing gear": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Context }\r\n\r\n{if state.landing_gear= \"sortis\":\r\n {SetState(\"landing_gear\", \"rentré\")}\r\n|else : {SetState(\"landing_gear\", \"sortis\")}\r\n}\r\n\r\nTrain d'atérissage {state.landing_gear}.",
      "default": true,
      "name": "Landing gear",
      "description": "Triggered when you deploy or retract your landing gear"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set landingpad to state.eddi_context_landing_pad_pad}\r\nVotre plate forme dattérissage numéro {landingpad} est \r\n{if landingpad = 1:\r\n    à proximité à six heure\r\n|elif landingpad = 2:\r\n    proche de lentré à six heures\r\n|elif landingpad = 3:\r\n    à 6 heures vers le fond\r\n|elif landingpad = 4:\r\n    à 6 heures vers le fond\r\n|elif landingpad = 5:\r\n   vers les sept heures proche \r\n|elif landingpad = 6:\r\n    à sept heure juste à cotés\r\n|elif landingpad = 7:\r\n    à sept heure vers le fond\r\n|elif landingpad = 8:\r\n    vers les sept heures en séloignant\r\n|elif landingpad = 9:\r\n    à huit heure juste devant\r\n|elif landingpad = 10:\r\n    à huit heures vers le fond\r\n|elif landingpad = 11:\r\n    à neuf heure proche\r\n|elif landingpad = 12:\r\n    vers les neufs juste aprés l'entrée\r\n|elif landingpad = 13:\r\n    vers les neufs heures, au centre de la station\r\n|elif landingpad = 14:\r\n    à neuf heures, au fond de la station\r\n|elif landingpad = 15:\r\n    à meuf heures, vers l'arrière de la station\r\n|elif landingpad = 16:\r\n    juste en entrant à dix heures\r\n|elif landingpad = 17:\r\n    à dix heures, juste aprés l'entrée\r\n|elif landingpad = 18:\r\n    vers les dix heures, dans le cul de basse fosse\r\n|elif landingpad = 19:\r\n    Vers les dix heures, au fond de la station\r\n|elif landingpad = 20:\r\n    à onze heures proche de l'entrée\r\n|elif landingpad = 21:\r\n    juste aprés l'entrée à onze heures\r\n|elif landingpad = 22:\r\n    vers les onze heures dans les profondeurs de la station\r\n|elif landingpad = 23:\r\n    au fond à onze heures\r\n|elif landingpad = 24:\r\n    à douze heures vers l'entrée\r\n|elif landingpad = 25:\r\n    à douze heure au fond\r\n|elif landingpad = 26:\r\n    à une heure, juste aprés l'entrée\r\n|elif landingpad = 27:\r\n    à une heure, proche de l'entrée\r\n|elif landingpad = 28:\r\n    à une heure vers le milieu de la station\r\n|elif landingpad = 29:\r\n    à une heure vraiment loin de l'entrée\r\n|elif landigpad = 30:\r\n    vers les une heure au fond de la station\r\n|elif landingpad = 31:\r\n    à deux heures, au début de la station\r\n|elif landingpad = 32:\r\n    à deux heures en entrant\r\n|elif landingpad = 33:\r\n    à deux heures au fond\r\n|elif landingpad = 34:\r\n    à deux heures au fond\r\n|elif landingpad = 35:\r\n à trois heures, au début de la station\r\n|elif landingpad = 36:\r\n    à trois heures juste à l'entrée\r\n|elif landingpad = 37:\r\n    à trois heures, vers le centre de la station\r\n|elif landingpad = 38:\r\n    à trois heures vers le fond\r\n|elif landingpad = 39:\r\n    à quatres heures juste en entrant\r\n|elif landingpad = 40:\r\n    à quatres heures au fond\r\n|elif landingpad = 41:\r\n    à cinq heures peu aprés l'entrée\r\n|elif landingpad = 42:\r\n    à cinq heures peu aprés l'entrée\r\n|elif landingpad = 43:\r\n    à cinq heures vers le centre de la station\r\n|elif landingpad = 44:\r\n à cinq heures au fond\r\n|elif landingpad = 45:\r\n à cinq heures au fond de la station\r\n}\r\n , en passant correctement avec les lumières vertes à votre droite.",
      "default": true,
      "name": "Landing pad report",
      "description": "Report on the location of a landing pad"
    },
    "Liftoff": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled = true:\r\n  Décollage.\r\n|else:\r\n  {ShipName()} a décollé.\r\n}",
      "default": true,
      "name": "Liftoff",
      "description": "Triggered when your ship lifts off from a planet's surface"
    },
    "Lights": {
      "enabled": true,
      "priority": 2,
      "responder": false,
      "script": "{_ Context }\r\n\r\n{if state.phares= \"allumés\":\r\n {SetState(\"phares\", \"éteints\")}\r\n|else : {SetState(\"phares\", \"allumés\")}\r\n}\r\n\r\n{OneOf(\"Phares \",\"Projecteurs \")} {state.phares}.",
      "default": true,
      "name": "Lights",
      "description": "Triggered when you activate or deactivate your lights"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Contrôleur\") != -1:\r\n        {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in inventory:\r\n    {if cargo.edname = \"Drones\":\r\n        {set limpets to cargo.total}\r\n    }\r\n}\r\n\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Mémo: Vous avez un contrôleur de drône mais aucun drone à bord.\r\n|elif controllers = 0 && limpets > 0:\r\n    Vous avez des drones mais aucun controleur pour les diriger.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    Vous avez seulement {limpets} drones à bord; Vous devriez considérer un réaprovisionnement.\r\n}\r\n",
      "default": true,
      "name": "Limpet check",
      "description": "Check for the presence/absence of limpets and limpet controllers"
    },
    "Limpet launched": {
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "Drone {OneOf('lancé','activé')}.",
      "default": true,
      "name": "Limpet launched",
      "description": "Triggered when a limpet is launched"
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drone{if event.amount > 1:s}\r\n{if event.amount > 1:{Occasionally(2,\"ont été\")} |else: {Occasionally(2,\"est\")}}\r\najouté à votre\r\n{OneOf(\"soute\", \"inventaire\", \"réserve\")}",
      "default": true,
      "name": "Limpet purchased",
      "description": "Triggered when you buy limpets from a station"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drone{if event.amount > 1:s}\r\n{Occasionally(2, \"ont été\")} vendu.",
      "default": true,
      "name": "Limpet sold",
      "description": "Triggered when you sell limpets to a station"
    },
    "List launchbays": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\r\n    vous avez un hangar de taille {launchbay.size} pour {launchbay.type}.\r\n    {for vehicle in launchbay.vehicles:\r\n        Il y a un {P(vehicle.name)} option {vehicle.loadout}\r\n\r\n        {if type(vehicle.mount) != null:\r\n            {if vehicle.mount = 'F':\r\n                , avec armes fixes\r\n            |elif vehicle.mount = 'G':\r\n                , avec armement rotatif\r\n            }\r\n        }\r\n        .{_ full stop}\r\n\r\n        {if vehicle.rebuilds != null:\r\n            {if vehicle.rebuilds = 1:\r\n                Renouvelable une fois.\r\n            |elif vehicle.rebuilds = 0:\r\n                Non renouvelable.\r\n            |else:\r\n                Renouvelable {vehicle.rebuilds} fois.\r\n            }\r\n        }\r\n\r\n        {Pause(500)}\r\n    }\r\n}",
      "default": true,
      "name": "List launchbays",
      "description": "Describes the contents of each launchbay in the ship"
    },
    "Location": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{SetState(\"cargo_scoop\", \"fermée\")}\r\n{SetState(\"landing_gear\", \"rentré\")}\r\n\r\nVous êtes\r\n{if event.docked:\r\n\r\n    Parké dans\r\n    {if event.station = event.body:\r\n        la station orbitale  {P(event.station)},\r\n    |else:\r\n        la station planétaire {P(event.station)} on {P(event.body)},\r\n    }\r\n|elif event.body:\r\n    proche de {P(event.body)}\r\n}\r\ndans le système {P(event.system)} .",
      "default": true,
      "name": "Location",
      "description": "Triggered when the commander's location is reported, usually when they reload their game."
    },
    "Low fuel": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": " {SpeechRate('Attention, Attention!', 'fast')}, {SpeechPitch('niveau de ', 'x-low')}{SpeechPitch('carburant en ', 'x-high')}dessous de 25%!",
      "default": true,
      "name": "Low fuel",
      "description": "Triggered when your fuel level falls below 25%."
    },
    "Market information updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Find out in advance what we have to say }\r\n\r\n{if event.update = \"profile\"\r\n    {set type to \"Station services\"}\r\n    {if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n        {set purchasecheck to F(\"Commodity purchase check\")}\r\n    }\r\n    {set salecheck to F(\"Commodity sale check\")}\r\n    {set swapoutcheck to F(\"Swapout check\")}\r\n|elif event.update = \"market\":\r\n    {set type to OneOf(\"Market\", \"Local market\")}\r\n    {if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n        {set purchasecheck to F(\"Commodity purchase check\")}\r\n    }\r\n    {set salecheck to F(\"Commodity sale check\")}\r\n|elif event.update = \"outfitting\":\r\n    {set type to \"Station outfitting\"}\r\n    {set swapoutcheck to F(\"Swapout check\")}\r\n|elif event.update = \"shipyard\":\r\n    {set type to \"Station shipyard\"}\r\n}\r\n\r\n{Pause(500)}\r\n{if purchasecheck || salecheck || swapoutcheck:\r\n    {type}\r\n    {OneOf(\"data\", \"information\", \"price\")}\r\n    {OneOf(\"update\", \"refresh\", \"changes\")}\r\n    {OneOf(\"received\", \"obtained\")}.\r\n\r\n    {salecheck}\r\n    {purchasecheck}\r\n    {swapoutcheck}\r\n}\r\n{F(\"Limpet check\")}",
      "default": true,
      "name": "Market information updated",
      "description": "Triggered when market information for the currently docked station has been updated"
    },
    "Material collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n{SetState('eddi_context_material_name', material.name)}\r\n\r\n{if MaterialDetails(event.name).category.name = \"Donnée\" || MaterialDetails(event.name).category.name = \"Encodé\":\r\n  {event.amount} données : {event.name}, {OneOf(\" sont bien téléchargées \",\" sont enregistrées \",\" sont collectées \")} {OneOf(\" dans le serveur.\",\" en mémoire.\",\".\")}\r\n|elif MaterialDetails(event.name).category.name = \"Fabriqué\"  : \r\n {event.amount} objet manufacturé:\r\n {event.name} {OneOf(\" viens d'être chargé.\",\" est collecté.\",\" est dans la soute\")}\r\n|else :\r\n   {event.amount} unité de matière :\r\n {event.name} {OneOf(\" viens d'être chargé.\",\" est collecté.\",\" est dans la soute\")}\r\n\r\n}.\r\n\r\n\r\n   {if MaterialDetails(event.name).rarity.level = 1 :\r\n    {Occasionally(5, \"Quelque chose de vraiment trés commun\")}\r\n\r\n   |elif MaterialDetails(event.name).rarity.level = 2 :\r\n    {Occasionally(4, \"Quelque chose de commun\")}\r\n\r\n   |elif MaterialDetails(event.name).rarity.level = 3 :\r\n    {Occasionally(3, \"C'est pas tous les jours qu'on voit ça, mais c'est pas exceptionnel non plus.\")}\r\n\r\n   |elif MaterialDetails(event.name).rarity.level = 4 :\r\n    {Occasionally(2, \"Quelque chose de rare, cela pourrait être intéressant pour l'avenir.\")}\r\n \r\n   |elif MaterialDetails(event.name).rarity.level = 5 :\r\n       Voilà le rare du rare, à conserver bien au chaud!.\r\n}",
      "default": true,
      "name": "Material collected",
      "description": "Triggered when you collect a material"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ set material to \"chrome\"}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.maximum && inventory.maximum < inventory.amount:\r\n        {set over to inventory.amount - inventory.maximum}\r\n        {if over > 1:\r\n            Vous pouvez éjecter {over} unités de {inventory.name} pour avoir la quantité maximum désirée.\r\n        |elif over = 1:\r\n            Vous pouvez éjecter 1 unité de {inventory.name}pour avoir la quantité maximum désirée.\r\n        }\r\n    |elif inventory.desired && inventory.desired < inventory.amount:\r\n        {set over to inventory.amount - inventory.desired}\r\n        {if over > 1:\r\n            Vous pouvez éjecter {over} unités de {inventory.name} pour avoir la quantité optimale désirée.\r\n        |elif over = 1:\r\n            Vous pouvez éjecter 1 unités de {inventory.name} pour avoir la quantité optimale désirée.\r\n        }\r\n    |elif inventory.desired:\r\n        Vous êtes en dessous de votre quantité optimale désirée pour : {inventory.name}.\r\n    |elif inventory.maximum:\r\n        Vous êtes en dessous de votre quantité Maximale désirée pour : {inventory.name}.\r\n    |else:\r\n        Vous êtes en dessous de tous les seuils désirés pour : {inventory.name}.\r\n    }\r\n}",
      "default": true,
      "name": "Material discard report",
      "description": "Report on how many of a material can be discarded"
    },
    "Material discarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{_ script inutile, on ne peut plus éjecter des matériaux }",
      "default": true,
      "name": "Material discarded",
      "description": "Triggered when you discard a material"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n\r\nVous venez de trouver la matière:{event.name}, pour la première fois.",
      "default": true,
      "name": "Material discovered",
      "description": "Triggered when you discover a material"
    },
    "Material donated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n\r\n{if MaterialDetails(event.name).category.name = \"Donnée\" :\r\n {event.amount} données : {event.name}, transférée.\r\n|elif MaterialDetails(event.name).category = \"Fabriqué\" : \r\n {event.amount}  objet manufacturé:\r\n {event.name}{OneOf(\"offerts.\",\"donnés.\",\"laissé en cadeau\")}\r\n|else :\r\n  {event.amount} unité de matière :\r\n {event.name} {OneOf(\"offerts.\",\"donnés.\",\"laissé en cadeau\")}\r\n\r\n}.",
      "default": true,
      "name": "Material donated",
      "description": "Triggered when you donate a material"
    },
    "Material inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material inventory",
      "description": "Triggered when you obtain an inventory of your current materials"
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ set material to \"bore\"}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_last_subject', 'inventory')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory && inventory.amount > 0:\r\n    {if inventory.amount = 1:\r\n       Vous avez {inventory.amount} unités de {material.name} à bord.\r\n    |else:\r\n       Vous avez {inventory.amount} unités de {material.name} à bord.\r\n    }\r\n|else:\r\n    Vous navez aucun {material.name} à bord.\r\n}",
      "default": true,
      "name": "Material inventory report",
      "description": "Report on how many of a material are on-board"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ set material to \"Conductive Polymers\"}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        {material.name} peut être {material.location}\r\n    |else:\r\n        Aucune information pour savoir où trouver {material.name} \r\n    }\r\n|else:\r\n    Je n'est aucune information sur ça\r\n}.",
      "default": true,
      "name": "Material location report",
      "description": "Report on the where to obtain a particular material"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    Il vous manque\r\n    {if len(required) = 1:\r\n        {required[0].desired - required[0].amount} \r\n  {required[0].name}\r\n    |elif len(required) = 2:\r\n        {required[0].desired - required[0].amount} {required[0].name} and {required[1].desired - required[1].amount} {required[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(required):\r\n            {if cur = 0:\r\n                {required[cur].desired - required[cur].amount} {required[cur].name}\r\n            |elif cur < len(required) - 1:\r\n                , {required[cur].desired - required[cur].amount} {required[cur].name}\r\n            |else:\r\n                , and {required[cur].desired - required[cur].amount} {required[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Quantité de matériel présent comme indiqué dans votre liste de choix.\r\n}",
      "default": true,
      "name": "Material required report",
      "description": "Report on how many of a material are required to reach 'desired' level"
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.level = 'Minimum':\r\n    {_ Gone below the minimum level }\r\n    {OneOf(\"Stock\", \"Inventaire\", \"Approvisionnement\")} de {event.material.name} est passé en dessous de votre minimum surveillé.\r\n|elif event.level = 'Maximum':\r\n  {_ Gone above the maximum level }\r\n    {OneOf(\"Stock\", \"Inventaire\", \"Approvisionnement\")} of {event.material.name} a augmenté au delà de votre maximum toléré.\r\n|else:\r\n    {_ Moved around the desired level }\r\n    {if event.change = 'Increase':\r\n Vous avez atteint la quantité optimale désirée de : {event.material.name}.\r\n    |else:\r\n        Vous êtes en dessous de la quantité nominale désirée pour : {event.material.name}.\r\n    }\r\n} \r\n\r\n{OneOf(\"Le stock actuel est de {event.amount}\",\r\n       \"inventaire de {event.amount}\",\r\n       \"{event.amount} unités à bord\")}.",
      "default": true,
      "name": "Material threshold",
      "description": "Triggered when a material reaches a threshold"
    },
    "Material traded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Marché conclu avec le Commerçant de matériel de type : {event.tradertype}.\r\n\r\nVous avez donné {event.paid_quantity} {event.paid} en échange de {event.received_quantity} {event.received}.",
      "default": true,
      "name": "Material traded",
      "description": "Triggered when materials are traded at a material trader"
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{_ set material to \"Carbon\"}\r\n\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'sont'}\r\n    |else:\r\n        {set plural to 'est'}\r\n    }  \r\n    {if uses = 0:\r\n      {material.name}  {plural} non utilisé quelque soit le schéma technique.\r\n    |elif uses = 1:\r\n   {material.blueprints[0].name}\r\n   {material.blueprints[0].modulename}\r\n        {set name to cat(material.blueprints[0].name, ' ', material.blueprints[0].modulename, ' grade ', material.blueprints[0].grade)}\r\n        \r\n   {material.name} {plural} utilisé pour le schéma {name}\r\n  |elif uses = 2:\r\n   {material.blueprints[0].name}\r\n   {material.blueprints[0].modulename}\r\n\r\n        {set name0 to cat(material.blueprints[0].name, ' ', material.blueprints[0].modulename, ' grade ', material.blueprints[0].grade)}\r\n\r\n  {material.blueprints[1].name}\r\n  {material.blueprints[1].modulename}\r\n\r\n        {set name1 to cat(material.blueprints[1].name, ' ', material.blueprints[1].modulename, ' grade ', material.blueprints[1].grade)}\r\n        {material.name} {plural} utilisé pour {name0} et {name1}.\r\n    |else:\r\n        {material.name}  {plural} utilisés dans {len(material.blueprints)} schéma technique.  Liste :\r\n        {set cur to 0}\r\n        {while cur < len(material.blueprints):\r\n\r\n    {material.blueprints[cur].name}\r\n    {material.blueprints[cur].modulename}\r\n            {set name to cat(material.blueprints[cur].name, ' ', material.blueprints[cur].modulename, ' grade ', material.blueprints[cur].grade)}\r\n            {if cur = 0:\r\n                {name} \r\n   |elif cur < len(material.blueprints) - 1:\r\n                , {name}\r\n            |else:\r\n                , et {name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    Je n'ai aucune information sur ce matériel\r\n}.",
      "default": true,
      "name": "Material use report",
      "description": "Report on the use of a material"
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Obsolete }",
      "default": true,
      "name": "Materials discard report",
      "description": "Report on which materials can be discarded"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    Il vous manque\r\n    {if len(required) = 1:\r\n        {required[0].desired - required[0].amount} \r\n  {required[0].material}\r\n    |elif len(required) = 2:\r\n        {required[0].desired - required[0].amount} {required[0].material} and {required[1].desired - required[1].amount} {required[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(required):\r\n            {if cur = 0:\r\n                {required[cur].desired - required[cur].amount} {required[cur].material}\r\n            |elif cur < len(required) - 1:\r\n                , {required[cur].desired - required[cur].amount} {required[cur].material}\r\n            |else:\r\n                , and {required[cur].desired - required[cur].amount} {required[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Quantité de matériel présent comme indiqué dans votre liste de choix.\r\n}",
      "default": true,
      "name": "Materials required report",
      "description": "Report on how many of each material are required to reach 'desired' level"
    },
    "Message received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{if event.message = \"o7\":\r\n    {event.from} salut\r\n    {if event.channel = \"player\":\r\n        toi\r\n    }.\r\n|elif find(event.message, \"Entered Channel\")<0 :\r\n    Message reçu de {event.from}.  Lecture: {event.message}.\r\n}",
      "default": true,
      "name": "Message received",
      "description": "Triggered when you receive a message"
    },
    "Message sent": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{OneOf(\"Message envoyé\", \"Message réceptionné\", \"Message expédié\")}.",
      "default": true,
      "name": "Message sent",
      "description": "Triggered when you send a message"
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'abandon')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if event.communal:\r\n    Vous avez abandonné la mission communautaire: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(\"la mission \", type)}\r\n\r\n    {type} {if mission.faction: pour {mission.faction}} abandoné.\r\n}\r\n",
      "default": true,
      "name": "Mission abandoned",
      "description": "Triggered when you abandon a mission"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'accepted')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if mission.type = \"Don\":\r\n    {OneOf(\"Vous avez choisi de donner\",\"Mission de donation acceptée\")}:\r\n    {if mission.typeEDName = \"Altruism\": {mission.commodity} |else: une forte somme de crédits} ce qui\r\n    {OneOf('améliore','augmente','acroit')} votre {OneOf('réputation','position')} avec {P(mission.faction)}\r\n|elif event.communal:\r\n    Vous avez accepter une mission communautaire: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(\"mission \", type)}\r\n    {OneOf(\"{type} {if mission.faction: pour {mission.faction}} accepter\",\r\n        \"{type} accepter {if mission.faction: pour {mission.faction}}\",\r\n        \"Vous avez accepter une mission de type: {mission.type} {if mission.faction: pour {mission.faction}}\")\r\n    }\r\n}\r\n\r\n{F(\"Mission faction state\")}\r\n\r\n{if mission.passengerswanted:\r\n    Attention! Vous {OneOf(\"transportez\",\"avez à bord\")}\r\n    {OneOf(\"{OneOf('un passager','une personne')} {OneOf('recherché','illicite')}\",\"badit connu\")}!\r\n    Vous pouvez vous faire attaquer par {OneOf(\"les authorités\",\"la police\")} {Occasionally(2,\"du système\")}.\r\n    La prudence est de mise,évitez de vous faire scanner.\r\n\r\n|elif token(mission.name,\"_\",2) = \"Skimmer\":\r\n    Ceci est une {OneOf(\"mission\",\"opération\")} de surface.\r\n\r\n|elif token(mission.name,\"_\",2) = \"Surface\":\r\n    Ceci est une {OneOf(\"mission\",\"opération\")} de surface, un SRV est nécessaire.\r\n}.\r\n\r\n{if missionsCount = 20:\r\n    Vous avez accepter votre cotat maximum de missions.\r\n    Merci den finir quelques une avant den vouloir dautres.\r\n|else:\r\n   {OneOf(\"Vous avez {missionsCount} mission{if missionsCount > 1:s}\",\r\n        \"c'est votre\r\n    {if missionsCount = 1: première\r\n    |elif missionsCount = 2: seconde\r\n    |elif missionsCount = 3: troisième\r\n    |else: {missionsCount}ième\r\n    }\r\n    mission\")}.\r\n}\r\n\r\n",
      "default": true,
      "name": "Mission accepted",
      "description": "Triggered when you accept a mission"
    },
    "Mission check galaxy": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Check what systems you have missions in }\r\n\r\n\r\n{_ Setup allmissions function }\r\n{set allmissions(system) to:\r\n{set here to find(systems, system)}\r\n    {if here > -1:\r\n        {set number to systems_count[here] + 1}\r\n        {set systems_count to union(systems_count, [here:number])}\r\n    |else:\r\n        {set systems to cat(systems, [system])}\r\n        {set systems_count to cat(systems_count, [1])}\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n\r\n    {set multi to 0}\r\n\r\n    Il vous reste {missionsCount} mission{if missionsCount != 1:s} à finir.\r\n\r\n    {if missionsCount = 1:\r\n        c'est {Occasionally(2,\"situé\")} dans \r\n        {if missions[0].destinationsystem && missions[0].destinationsystem != \"\":\r\n            le système {P(missions[0].destinationsystem)}\r\n        |else:\r\n            un emplacement qui n'est pas dans ma base de donnée\r\n        }.  \r\n    |else:\r\n        {set systems to []}\r\n        {set systems_count to []}\r\n\r\n        {for mission in missions:\r\n            {if mission.status = \"Active\":\r\n                {if mission.destinationsystems:\r\n                    {set multi to multi + 1}\r\n                    {for destination in mission.destinationsystems:\r\n                        {allmissions(destination.name)}\r\n                    }\r\n                |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                    {allmissions(mission.destinationsystem)}\r\n                }\r\n            }\r\n        }\r\n\r\n        {if len(systems) = 0:\r\n            Vous n'avez aucun système indiqué dans vos missions.\r\n        |elif len(systems) = 1:\r\n            Vos missions sont toutes \r\n            {if systems && systems[0] != \"\":\r\n               {Occasionally(2,\"localisées\")} dans le système {P(systems[0])}\r\n            |else:\r\n                non assignées à un système donné.\r\n            }.\r\n\r\n        |else:\r\n            {if multi > 0:\r\n\r\n                {if multi = missionsCount: tous |else: {multi}}\r\n                dans ces \r\n                {if multi = 1: is a |else: are}\r\n                multi-destination mission{if multi != 1:s}.\r\n            }\r\n             {if systems_count[0] = 1: c'est |else: ce sont }\r\n\r\n            {set cur to 0}\r\n            {while cur < len(systems):\r\n                {systems_count[cur]} \r\n                {if cur = 0: destination{if systems_count[0] > 1: s}}\r\n                {if systems[cur] = \"\":\r\n                    dans un système non défini\r\n                |else:\r\n                    {OneOf(\"à \",\"dans le système\")} {P(systems[cur])}\r\n                }\r\n\r\n                {set cur to cur + 1}\r\n                {if cur = len(systems)-1: and |elif cur < len(systems):, }\r\n            }\r\n        }.\r\n    }\r\n|else:\r\n    {OneOf(\"vous n'avez pas de mission.\", \"vous n'avez aucune mission.\", \"aucune mission en cours dans ma base de donnée.\")}\r\n}",
      "default": true,
      "name": "Mission check galaxy",
      "description": "Check what systems you have missions in"
    },
    "Mission check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check station }\r\n{_ Check what missions you have for the current station }\r\n\r\n\r\n{if missionsCount > 0:\r\n    {set current_station to state.eddi_context_station_name}\r\n    {set active_missions to 0}\r\n    {set complete_missions to 0}\r\n    {set depot_missions to 0}\r\n\r\n    {if current_station && current_station != \"\":\r\n        {for mission in missions:\r\n            {if mission.destinationstation = current_station ||\r\n                (mission.originstation = current_station && find(mission.type, \"Livraison\") > -1):\r\n                {if mission.status = \"Actif\":\r\n                    {if find(mission.type, \"Collection\") > -1 || find(mission.type, \"Livraison\") > -1:\r\n                        {set depot_missions to depot_missions + 1}\r\n                    |else:\r\n                        {set active_missions to active_missions + 1}\r\n                    }\r\n                |elif mission.status = \"Terminé\":\r\n                    {set complete_missions to complete_missions + 1}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {set total to active_missions + complete_missions + depot_missions}\r\n    {if total > 0:\r\n        Vous avez \r\n        {if depot_missions > 0:\r\n            {depot_missions} mission{if total > 1:s} de livraison\r\n            {if active_missions > 0 && complete_missions > 0: ,\r\n            |elif active_missions > 0 || complete_missions > 0: and}\r\n        }\r\n        {if active_missions > 0:\r\n            {active_missions} mission{if total > 1:s} active{if total > 1:s}\r\n            {if complete_missions > 0: and}\r\n        }\r\n        {if complete_missions > 0:\r\n            {complete_missions} mission{if total > 1:s} complétéen{if total > 1:s} \r\n        }\r\n        {Occasionally(3,\"localisée\")} en cette station.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Mission check station",
      "description": "Check what missions you have for the current station"
    },
    "Mission check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check system }\r\n{_ Check what missions you have for the current system }\r\n\r\n\r\n{_ Setup addstation function }\r\n{set addstation(station) to:\r\n    {set missions_here to missions_here + 1}\r\n    {set station_based to station_based + 1}\r\n    {set here to find(stations_here, station)}\r\n    {if here > -1:\r\n        {if mission.status = \"Actif\":\r\n            {if mission.type = \"Collection\" ||  mission.type= \"Livraison\":\r\n                {set depot to stations_depot[here] + 1}\r\n                {set stations_depot to union(stations_depot, [here:depot])}\r\n\r\n            |else:\r\n                {set active to stations_active[here] + 1}\r\n                {set stations_active to union(stations_active, [here:active])}\r\n            }\r\n        |else:\r\n            {set complete to stations_complete[here] + 1}\r\n            {set stations_complete to union(stations_complete, [here:complete])}\r\n        }\r\n    |else:\r\n        {set stations_here to cat(stations_here, [station])}\r\n        {if mission.status = \"Actif\":\r\n            {if mission.type = \"Collection\" ||  mission.type= \"Livraison\":\r\n                {set stations_active to cat(stations_active, [0])}\r\n                {set stations_depot to cat(stations_depot, [1])}\r\n            |else:\r\n                {set stations_active to cat(stations_active, [1])}\r\n                {set stations_depot to cat(stations_depot, [0])}\r\n            }\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n        |else:\r\n            {set stations_active to cat(stations_active, [0])}\r\n            {set stations_complete to cat(stations_complete, [1])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set current_system to system.name}\r\n    {set missions_here to 0}\r\n    {set station_based to 0}\r\n    {set stations_active to []}\r\n    {set stations_complete to []}\r\n    {set stations_depot to []}\r\n    {set stations_here to []}\r\n    {set non_stations to []}\r\n\r\n    {_ Find all missions in the current system and identify all the stations }\r\n    {for mission in missions:\r\n        {if mission.status != \"Raté\":\r\n            {if mission.destinationsystems:\r\n                {for destination in mission.destinationsystems:\r\n                    {if destination.name = current_system && !destination.visited:\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport de \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.destinationsystem = current_system:\r\n                {if mission.destinationstation && mission.destinationstation != \"\":\r\n                    {addstation(mission.destinationstation)}\r\n                |else:\r\n                    {if mission.status = \"Actif\":\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport de \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.originsystem = current_system && find(mission.type, \"Delivery\") > -1:\r\n                {if mission.originstation && mission.originstation != \"\":\r\n                    {addstation(mission.originstation)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {if missions_here > 0:\r\n        Il y a {missions_here} {if missions_here > 1: missions |else: mission} \r\n        {OneOf('ici','dans ce système')}.\r\n\r\n        {if station_based > 0:\r\n            {Pause(500)}\r\n            {if missions_here = 1: votre\r\n            |elif len(stations_here) = 1:\r\n                {if missions_here = station_based: toutes vos |else: vous avez des }\r\n            }\r\n\r\n            {set cur to 0}\r\n            {while cur < len(stations_here):\r\n                {set station to StationDetails(stations_here[cur])}\r\n                {set total to stations_active[cur] + stations_complete[cur] + stations_depot[cur]}\r\n    mission{if total > 1:s}\r\n                {if stations_depot[cur] > 0:\r\n                    livraison {stations_depot[cur]} \r\n                    {if stations_active[cur] > 0 && stations_complete[cur] > 0: ,\r\n                    |elif stations_active[cur] > 0 || stations_complete[cur] > 0: et}\r\n                }\r\n                {if stations_active[cur] > 0:\r\n                    active {stations_active[cur]} \r\n                    {if stations_complete[cur] > 0: et}\r\n                }\r\n                {if stations_complete[cur] > 0:\r\n                    complétée {stations_complete[cur]} \r\n                }\r\n                \r\n                {if len(stations_here) = 1: {if total > 1: sont |else: est}} à\r\n                {station.model}, {stations_here[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = len(stations_here)-1: et |elif cur < len(stations_here): ,}\r\n            }.\r\n        }\r\n\r\n        {if missions_here > station_based:\r\n            {Pause(500)}\r\n            {set remaining to missions_here - station_based}\r\n            {if station_based > 0: les {remaining} restantes |else: la }\r\n\r\n            {set cur to 0}\r\n            {while cur < len(non_stations):\r\n                {non_stations[cur]}\r\n               \r\n                {set cur to cur + 1}\r\n                {if cur = len(non_stations)-1: et |elif cur < len(non_stations): ,}\r\n            }\r\n            mission{if remaining > 1:s} must be {OneOf(\"searched for\",\"determined\",\"found\")}.\r\n        }\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Mission check system",
      "description": "Check what missions you have for the current system"
    },
    "Mission completed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission completed }\r\n{_ Triggered when you complete a mission }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"mission \"), type}\r\n{set ranktype to token(mission.name,\"_\",2)}\r\n\r\n{if mission.type = \"Don\":\r\n    {if mission.typeEDName = \"Altruism\":\r\n        {set donate to cat(\"de \", event.amount, \" tonnes de \",event.commodity)}\r\n    |else:\r\n        {set donate to cat(\"de \", event.donation,\" crédits\")}\r\n    }\r\n\r\n    {OneOf(\"donation {Occasionally(2, '{donate}')} à {P(mission.faction)} {Occasionally(2, 'sui vous est reconnaissante')}\",\r\n        \"{P(mission.faction)} a reçu votre donantion {Occasionally(2, '{donate}')}\",\r\n        \"{P(mission.faction)} vous remercie pour votre donantionation {Occasionally(2, '{donate}')}\")}\r\n    {F(\"Mission faction state\")}.\r\n\r\n|elif ranktype = \"RANKEMP\" || ranktype = \"RankEmp\" || ranktype = \"RANKFED\" || ranktype = \"RankFed\":\r\n    Vous ave {OneOf(\"fini la {type} avec succés\",\"réussite de la {type} validée\")}\r\n|elif mission.communal:\r\n    YVous avez terminé la mission communautaire: {mission.name}.\r\n    {OneOf('Vous avez reçu','Vous touchez en récompense')} {Humanise(mission.reward)} crédits pour\r\n    {OneOf(\"votre contribution\",\"votre participation\",\"avoir participé\")}\r\n|else:\r\n    {if event.reward > 0:\r\n        {OneOf(\"{type} Terminée. Vous {OneOf('recevez','touchez en récompense')}\r\n                {Humanise(event.reward)} crédits\",\r\n            \"Vous {OneOf('recevez ','êtes récompensé de ')} {Humanise(event.reward)} crédits pour\r\n                {OneOf('avoir fini la {type} avec succés','avoir terminé la {type}',\r\n                    'votre réussite dans la {type}')}\")\r\n        }\r\n    |else:\r\n        {OneOf(\"{type} terminée\",\"terminé la {type} avec succés\",\r\n            \"Vous avez réussi la {type}\")}\r\n   }\r\n}\r\n{if mission.type != \"Don\": {F(\"Mission faction state\")}}.\r\n\r\n{if event.rewardCommodity && event.rewardCommodity != \"\":\r\n    {Pause(500)}\r\n    {if event.rewardCommodityAmount = 0:\r\n        {if event.reward > 0:\r\n            {OneOf(\"Toute fois, \",\"Mais, \")}\r\n        }\r\n        Vous ne pouvez pas recevoir votre récompense {OneOf(\"en nature\",\"en marchandises\")}, {Occasionally(2,\"car\")}\r\n        {if ship.cargocapacity = 0:\r\n            Vous n'avez pas de soute pour cela.\r\n        |else:\r\n            Vos soutes sont {Occasionally(2,\"déjà\")} pleines.\r\n        }\r\n    |else:         \r\n        {if event.reward > 0:\r\n            {OneOf(\"En plus, \",\"Et, \")}\r\n        }\r\n        {OneOf(\"il y a \", \"vous avez \", \"\")}{event.rewardCommodityAmount} tonne{if event.rewardCommodityAmount > 1: s} de {event.rewardCommodity}\r\n        {OneOf(\"confirmé en chargement\",\"confirmé en soute\",\"reçu\",\"embarqué en récompense\")}.\r\n    }\r\n|elif event.rewardMaterial && event.rewardMaterial != \"\":\r\n    {if event.reward > 0:\r\n        {OneOf(\"En plus, \",\"Et, \")}\r\n    }\r\n    {event.rewardMaterialAmount} unité{if event.rewardMaterialAmount > 1:s} de {event.rewardMaterial}\r\n    {OneOf(\"ont été reçu\",\"donné en récompense\")}.\r\n}\r\n\r\n{if ranktype = \"RANKFED\" || ranktype = \"RankFed\":\r\n    {Pause(500)}\r\n    {set rank to cmdr.federationrating.rank + 1}\r\n\r\n    Congratulations {OneOf(\"Commandeur {cmdr.name}\",\"Sieur\")}! Vous\r\n        {OneOf(\"{OneOf('élevez votre position','êtes promu')}\",\r\n            \"montez en grade\")}\r\n        dans la marine fédérale\r\n\r\n    {if rank = 3:\r\n        , et pouvez désormais avoir accés au Fédéral Dropship\r\n    |elif rank = 4:\r\n        , et vous pouvez accéder au système sol {P(\"Sol\")}\r\n    |elif rank = 5:\r\n        , et pouvez désormais avoir accés au Fédéral Assault Ship.\r\n        Et, vous recevez les permis d'accés pour les systèmes {P(\"Vega\")} et {P(\"Beta Hydri\")}\r\n    |elif rank = 6:\r\n        , et, vous recevez le permis d'accés pour le système PLX 695\r\n    |elif rank = 7:\r\n        , et pouvez désormais avoir accés au Fédéral Gunship.\r\n        Et vous recevez le permis d'entrer dans le système Ross 128\r\n    |elif rank = 8:\r\n        , et vous recevez le permis d'entrer dans le système  {P(\"Exbeur\")}\r\n    |elif rank = 10:\r\n        , et vous recevez le permis d'entrer dans le système  {P(\"Hors\")}\r\n    |elif rank = 12:\r\n        , et pouvez désormais avoir accés à la Corvette Fédérale\r\n    |elif rank = 14:\r\n        , et vous avez atteint le plus haut rang dans la fédération\r\n    }.\r\n\r\n|elif ranktype = \"RANKEMP\" || ranktype = \"RankEmp\":\r\n    {Pause(500)}\r\n    {set rank to cmdr.empirerating.rank + 1}\r\n\r\n    Congratulations {OneOf(\"Commandeur {cmdr.name}\",\"Sieur\")}! Vous\r\n        {OneOf(\"{OneOf('élevez votre position','êtes promu')}\",\r\n            \"montez en grade\")}\r\n    dans l'Empire.\r\n\r\n    {if rank = 1:\r\n        Vous pouvez désormais avoir accés à l'Impérial Eagle\r\n    |elif rank = 3:\r\n        Vous pouvez désormais avoir accés à l'Imperial Courier\r\n    |elif rank = 4:\r\n        Vous recevez l'honneur d'un accés libre pour le système {P(\"Archenar\")}\r\n    |elif rank = 7:\r\n        Vous pouvez désormais avoir accés à l'Imperial Clipper.\r\n        Et vous recevez le permis d'entrer dans le système {P(\"Summer-land\")}\r\n    |elif rank = 10:\r\n        Et vous recevez le permis d'entrer dans le système {P(\"Facece\")}\r\n    |elif rank = 12:\r\n        Vous pouvez désormais avoir accés à l'Imperial Cutter\r\n    |elif rank = 14:\r\n        et vous avez atteint le plus haut rang dans l'Empire\r\n   }.\r\n}\r\n\r\n",
      "default": true,
      "name": "Mission completed",
      "description": "Triggered when you complete a mission"
    },
    "Mission expired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission expired }\r\n{_ Triggered when a mission has expired }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'expired')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"mission de\"), type}\r\n\r\n {OneOf(\"{type} {if mission.faction: pour {mission.faction}} a expirée.\", \r\n   \"Le temps pour la réussite de la {type} est écoulé.\",\r\n   \"Echec de la {type}, temps imparti dépassé!\")}\r\n{if mission.commodity:\r\n    {for cargo in inventory:\r\n        {if cargo.name = mission.commodity && cargo.haulage > 0:\r\n            toute cargaison liée à la mission est maintenant déclarée volée.\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Mission expired",
      "description": "Triggered when a mission has expired"
    },
    "Mission faction state": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if (mission.factionstate) = \"Boom\":\r\n    {OneOf(\"durant\",\"en\")} {OneOf(\"ces temps prospères\",\"Essor économique\")}\r\n|elif (mission.factionstate) = \"Bust\":\r\n    {OneOf(\"durant\",\"en\")} {OneOf(\"en ces temps de Faillite\",\"recession\",\"crise économique\")}\r\n|elif (mission.factionstate) = \"CivilUnrest\":\r\n    {OneOf(\"durant\",\"en\")} {Occasionally(2,\"ces temps d\")}{OneOf(\"e troubles sociaux\",\"'émeutes\")}\r\n|elif (mission.factionstate) = \"CivilWar\":\r\n    {OneOf(\"durant\",\"en\")} {Occasionally(2,\"ces temps \")}{OneOf(\"de guerre civile\",\"d'insurection\")}\r\n|elif (mission.factionstate) = \"CivilLiberty\":\r\n    {OneOf(\"au nom de\",\"pour\")}{OneOf(\" la démocratie\", \"s libertés individuelles\", \"s libéralismes\")} \r\n|elif (mission.factionstate) = \"Election\":\r\n {OneOf(\"durant des élections\",\"en plein phase électorale\", \"durant la campagne électorale\")} \r\n|elif (mission.factionstate) = \"Famine\":\r\n    {OneOf('lors de','durant')} {OneOf('cette','la')} famine\r\n|elif (mission.factionstate) = \"Investment\":\r\n    {OneOf('lors de','durant')} cette phase d'investissements dans les infrastructures\r\n|elif (mission.factionstate) = \"Lockdown\":\r\n    {OneOf(\"Durant ces restrictions à cause de la loi martiale\", \"lors de ces blocus militaires\")}\r\n|elif (mission.factionstate) = \"Expansion\":\r\n    {OneOf('lors de','durant')} cette phase d'expansion vers un nouveau système\r\n|elif (mission.factionstate) = \"War\":\r\n    {OneOf(\"durant\",\"en\")} {OneOf(\"ces temps d\", \"plein\")}{OneOf(\"e guerre civile\",\"'insurection\")}\r\n|elif (mission.factionstate) = \"Retreat\":\r\n    {OneOf('lors de','durant')} cette phase de repli d'un autre système\r\n|elif (mission.factionstate) = \"Outbreak\"\r\n    {OneOf('lors de','durant')} {OneOf(\"cette urgence médicale\",\"cette épidémie fulgurante\")}\r\n}",
      "default": true,
      "name": "Mission faction state",
      "description": "Report the faction state"
    },
    "Mission failed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'fail')}\r\n\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"mission \", type)}\r\n\r\n{OneOf(\"{type} {if mission.faction: pour {mission.faction}} a échouée\", \r\n    \"vous avez {OneOf('échoué pour', 'raté')} la {type} {if mission.faction: pour {mission.faction}}\",\r\n \"échec de la {type} {if mission.faction: pour {mission.faction}}\")}.",
      "default": true,
      "name": "Mission failed",
      "description": "Triggered when you fail a mission"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission redirected }\r\n{_ Triggered when a mission is redirected }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'redirected')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"mission \", type)}\r\n\r\n{if mission.status = \"Complete\" && mission.destinationsystem = mission.originsystem:\r\n    prérequis et obligation de la {type} atteint. Redirigé vers l'origine de la mission.\r\n|elif mission.destinations:\r\n    {type} en {OneOf(\"épisodes\", \"chaine\")} redirigée vers le système {P(event.newdestinationsystem)}.\r\n|else:\r\n    {type} redirigé \r\n    {if event.newdestinationstation:\r\n       vers {event.newdestinationstation} dans le système {P(event.newdestinationsystem)}.\r\n    |else:\r\n       dans le système {P(event.newdestinationsystem)}.\r\n    }\r\n}",
      "default": true,
      "name": "Mission redirected",
      "description": "Triggered when a mission is redirected"
    },
    "Mission report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Report the current mission log }\r\n\r\n\r\n{F(\"Mission check galaxy\")}\r\n\r\n\r\n",
      "default": true,
      "name": "Mission report",
      "description": "Report the current mission log"
    },
    "Mission warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission warning }\r\n{_ Triggered when a mission is about to expire, based on a set threshold }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'warning')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(\"mission\", type)}\r\n\r\n{SpeechRate('Attention, Attention:', 'fast')} {type} {if mission.faction: pour {mission.faction}} expirera dans {event.remaining} minutes.",
      "default": true,
      "name": "Mission warning",
      "description": "Triggered when a mission is about to expire, based on a set threshold"
    },
    "Missions route": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Missions route }\r\n{_ Get the missions route for various mission details }\r\n\r\n{if event.routetype = \"expiring\":\r\n     {if event.distance > 0:\r\n         {set mission to MissionDetails(event.missionids[0])}\r\n\r\n         {if find(mission.typeEDName, \"Passenger\") > -1:\r\n             {set type to \"Transport \"}\r\n             {set type to cat(type, mission.passengertype)}\r\n         |else:\r\n             {set type to mission.type}\r\n         }\r\n         {set type to cat(\"mission \", type)}\r\n\r\n         {type} {if mission.faction: pour {mission.faction}}\r\n         {if mission.destinationsystem: dans \r\n             {if mission.destinationsystem = system.name:\r\n                 le système actuel\r\n             |else:\r\n               le système {mission.destinationsystem}\r\n             } \r\n         } est la prochaine à expirer\r\n     |else:\r\n         Aucune mission trouvée.\r\n     }\r\n|elif event.routetype = \"farthest\":\r\n     {if event.distance > 0:\r\n         {if missionsCount = 1: La destination de votre seule mission |else: la destination de votre mission la plus éloignée}\r\n         est\r\n         {if event.system = system.name:\r\n             {OneOf(\"ici même\", \"dans ce système\", \"là où vous êtes\")}\r\n         |else:\r\n             dans le système {event.system}, à {round(event.distance, 1)} années lumière\r\n         }.\r\n     |else:\r\n         Pas de mission trouvée avec une destination précise.\r\n     }\r\n|elif event.routetype = \"most\":\r\n     {if missionsCount = 1:\r\n         Votre seule mission \r\n         {if missions[0].destinationsystem = \"\":\r\n            n'a pas de destination précise\r\n         |elif missions[0].destinationsystem = system.name:\r\n             est dans ce système\r\n   |else:\r\n             est dans le systême {missions[0].destinationsystem}\r\n         }\r\n         .\r\n     |else:\r\n         {set systems to split(event.systems, \"_\")}\r\n         {set system_most to event.system}\r\n         {set systems_count to len(systems)}\r\n\r\n         {if systems_count = 1:\r\n             {if system_most = system.name:\r\n                 {set system_most to \"Le systême actuel\"}\r\n             |else:\r\n                 {set system_most to cat(\"Le systême \", system_most)}\r\n             }\r\n             {OneOf(\"La plupart de vos missions sont {Occasionally(2,'locatlisées')} dans {system_most}\",\r\n                 \"{system_most} concentre {OneOf('la majorité','la plupart')} de vos missions\",\r\n                 \"{system_most} est celui qui a le plus de missions en attentes\")}.\r\n         |elif systems_count > 1:\r\n             Vous avez des missions réparti en même nombre dans {event.count} cible{if event.count > 1:s} \r\n    Ce sont les systèmes\r\n             {set cur to 0}\r\n             {while cur < len(equal):\r\n                 {systems[cur]}\r\n                 {set cur to cur + 1}\r\n                 {if cur = systems_count-1: et |elif cur < systems_count: ,}\r\n             }.\r\n         }\r\n     }\r\n|elif event.routetype = \"nearest\":\r\n     {if event.distance > 0:\r\n         La cible pour votre {if missionsCount = 1: seule mission |else: mission la plus proche}\r\n         est dans le système\r\n         {if event.system = system.name:\r\n             actuel\r\n         |else:\r\n             {event.system}, à {round(event.distance, 1)} années lumières\r\n         }.\r\n     |else:\r\n         Pas de mission trouvée avec une destination précise.\r\n     }\r\n|elif event.routetype = \"route\":\r\n     {if event.routedistance > 0:\r\n         Calcul de l'itinéraire des missions pour {event.count} systèmes.\r\n         L'itinéraire complet est de {round(event.routedistance, 1)} années lumières.\r\n         La première mission est sur le système {event.system}, à {round(event.distance, 1)} années lumières.\r\n     |else:\r\n         Impossible de calculer l'itinéraire des missions.\r\n     }\r\n|elif event.routetype = \"source\":\r\n     {if event.count > 0:\r\n         {set systems to split(event.route, \"_\")}\r\n\r\n         {set pos to 0}\r\n         {while pos < event.count:\r\n\r\n             {set source_cargo to []}\r\n             {for missionid in event.missionids:\r\n                 {set haulage to HaulageDetails(missionid)}\r\n                 {if haulage.sourcesystem = systems[pos]:\r\n                     {set cargo to CargoDetails(missionid)}\r\n                     {if find(source_cargo, cargo.name) = -1:\r\n                         {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                     }\r\n                 }\r\n             }\r\n\r\n             {if pos = 0:\r\n                 votre {if event.count = 1: seule |else: plus proche} source\r\n             |elif pos = 1:\r\n                 En plus, votre source\r\n             |elif pos = event.count - 1:\r\n                 finalement, votre source\r\n             |else:\r\n                 Votre source\r\n             }\r\n\r\n             pour\r\n             {set cur to 0}\r\n             {while cur < len(source_cargo):\r\n                 {source_cargo[cur]}\r\n                 {set cur to cur + 1}\r\n                 {if cur = len(source_cargo) - 1: and |elif cur < len(source_cargo): ,}\r\n             }\r\n\r\n             est dans le système\r\n             {if systems[pos] = system.name:\r\n                 actuel\r\n             |else:\r\n                 {systems[pos]}, à\r\n                 {set distance to Distance(system.name, systems[pos])}\r\n                 {round(distance, 1)} années lumières\r\n             }.\r\n             {set pos to pos + 1}\r\n         }\r\n         {SetState('eddi_context_cargo_source', event.route)}\r\n     |else:\r\n         Source de fret non trouvée avec un système cible désigné.\r\n     }\r\n|elif event.routetype = \"update\":\r\n     {if event.routedistance > 0:\r\n         La prochaine destination est pour le système {event.system}, à {round(event.distance, 1)} années lumières.\r\n     |else:\r\n         Impossible d'effectuer la mise à jour vers la prochaine destination de la mission.\r\n     }\r\n}\r\n\r\n",
      "default": true,
      "name": "Missions route",
      "description": "Get the missions route for various mission details"
    },
    "Modification crafted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "L'ingénieur est {event.engineer}. la recette est {event.blueprint} de grade {event.level}.\r\n{set NbreMaterial to len(event.materials)} \r\n\r\nOn utilise {NbreMaterial} matériaux de construction\r\n{set materials to event.materials}\r\n{set cur to 0}\r\n{set IsPrefixe1 to 0}\r\n{set IsSufixe1 to 0}\r\n{set IsPrefixe2 to 0}\r\n{set IsSufixe2 to 0}\r\n{set IsPrefixe3 to 0}\r\n{set IsSufixe3 to 0}\r\n{while cur < len(materials):\r\n {if cur = 0:\r\n     {set material1 to MaterialDetails(materials[0].material)}\r\n  {material1.name} présent dans {len(material1.blueprints)} recettes\r\n  {set blueprints to []}\r\n        {for blueprints in material1.blueprints:\r\n            {set prefixe to NoSpace(lcase(blueprints.name))}\r\n   {if EDprefixe = prefixe && event.level=blueprints.grade: {set IsPrefixe1 to IsPrefixe1+1}}\r\n            {set sufixe to NoSpace(lcase(blueprints.modulename))}\r\n   {if EDsufixe = sufixe && event.level=blueprints.grade: {set IsSufixe1 to IsSufixe1+1}}\r\n        }\r\n    |elif cur = 1: \r\n     {set material2 to MaterialDetails(materials[1].material)}\r\n  {material2.name} présent dans {len(material2.blueprints)} recettes\r\n  {set blueprints to []}\r\n        {for blueprints in material2.blueprints:\r\n            {set prefixe to NoSpace(lcase(blueprints.name))}\r\n   {if EDprefixe = prefixe && event.level=blueprints.grade: {set IsPrefixe2 to IsPrefixe1+1}}\r\n            {set sufixe to NoSpace(lcase(blueprints.modulename))}\r\n   {if EDsufixe = sufixe && event.level=blueprints.grade: {set IsSufixe2 to IsSufixe1+1}}\r\n        }\r\n |else: \r\n     {set material3 to MaterialDetails(materials[2].material)}\r\n  {material3.name} présent dans {len(material3.blueprints)} recettes\r\n  {set blueprints to []}\r\n        {for blueprints in material3.blueprints:\r\n            {set prefixe to NoSpace(lcase(blueprints.name))}\r\n   {if EDprefixe = prefixe && event.level=blueprints.grade: {set IsPrefixe3 to IsPrefixe1+1}}\r\n            {set sufixe to NoSpace(lcase(blueprints.modulename))}\r\n   {if EDsufixe = sufixe && event.level=blueprints.grade: {set IsSufixe3 to IsSufixe1+1}}\r\n        }\r\n }\r\n {set cur to cur + 1}\r\n}",
      "default": true,
      "name": "Modification crafted",
      "description": "Triggered when you craft a modification to a module"
    },
    "Module arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\r\nVotre {event.module.name} \r\n\r\n{OneOf('est arrivé {if event.system && event.station: \\'à\\')}', \r\n       'a fini son transfert {if event.system && event.station: \\'vers\\')}')}\r\n\r\n{if event.sytem != system.name && len(event.system) > 0 && len(event.station) > 0:\r\n   {event.station} in the {event.system} system\r\n|elif event.station != station.name && len(event.station) > 0:\r\n   {event.station}\r\n}.",
      "default": true,
      "name": "Module arrived",
      "description": "Triggered when you complete a module transfer"
    },
    "Module info": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ This event updates `ship` module information: position, power, & priority _}",
      "default": true,
      "name": "Module info",
      "description": "Triggered when a ModulesInfo.json file is generated/updated"
    },
    "Module purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez acheté un module {event.buymodule.name} {event.buymodule.class}-{event.buymodule.grade},\r\n\r\n{if type(event.buymodule.mount) != \"void\":\r\n    {for index, value in event.buymodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixe\r\n    |elif mount = 1:\r\n        rotafif\r\n    |elif mount = 2:\r\n        montage tourelle\r\n    }\r\n}\r\n {event.buymodule.class}-{event.buymodule.grade}\r\n pour {event.buyprice} crédits\r\n\r\n{if type(event.sellmodule) != \"void\":\r\n    , et vendu un module {event.sellmodule.name}\r\n\r\n    {if type(event.sellmodule.mount) != \"void\":\r\n        {for index, value in event.sellmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixe\r\n        |elif mount = 1:\r\n            rotafif\r\n       |elif mount = 2:\r\n            montage tourelle\r\n        }\r\n    }\r\n {event.sellmodule.class}-{event.sellmodule.grade},\r\n    pour {event.sellprice} crédits\r\n\r\n|elif type(event.storedmodule) != \"void\":\r\n    , et {OneOf(\"stocké\", \"mis au hangar\", \"conservé\")} votre {event.storedmodule.name}\r\n    {if type(event.storedmodule.mount) != \"void\":\r\n        {for index, value in event.storedmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixe\r\n        |elif mount = 1:\r\n            rotafif\r\n       |elif mount = 2:\r\n            montage tourelle\r\n        }\r\n    }\r\n    {event.storedmodule.class}-{event.storedmodule.grade}\r\n}.\r\n\r\n\r\n",
      "default": true,
      "name": "Module purchased",
      "description": "Triggered when you purchase a module in outfitting"
    },
    "Module retrieved": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous réinstallez un {event.module.name} grade {event.module.class}-{event.module.grade}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n       à montage fixe\r\n    |elif mount = 1:\r\n        à montage rotafif\r\n    |elif mount = 2:\r\n        à montage tourelle\r\n    }\r\n}\r\n\r\n de vos hangards\r\n\r\n{if type(event.swapoutmodule) != \"void\":\r\n    et stockez votre  {event.swapoutmodule.name} {event.swapoutmodule.class}-{event.swapoutmodule.grade}\r\n\r\n    {if type(event.swapoutmodule.mount) != \"void\":\r\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n        à montage fixe\r\n    |elif mount = 1:\r\n        à montage rotafif\r\n    |elif mount = 2:\r\n        à montage tourelle\r\n        }\r\n    }\r\n}\r\n\r\n{if type(event.cost) != \"void\": pour un coût de  {event.cost} crédits}\r\n.",
      "default": true,
      "name": "Module retrieved",
      "description": "Triggered when you fetch a previously stored module"
    },
    "Module sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez vendu votre {event.module.name}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixe\r\n    |elif mount = 1:\r\n        rotatif\r\n    |elif mount = 2:\r\n        montage tourelle\r\n    }\r\n}\r\n{event.module.class}-{event.module.grade},\r\n depuis votre stock pour {event.price} crédits.",
      "default": true,
      "name": "Module sold",
      "description": "Triggered when selling a module to outfitting"
    },
    "Module sold from storage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez vendu votre {event.module.name}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixe\r\n    |elif mount = 1:\r\n        rotatif\r\n    |elif mount = 2:\r\n        montage tourelle\r\n    }\r\n}\r\n{event.module.class}-{event.module.grade},\r\n depuis votre stock pour {event.price} crédits.",
      "default": true,
      "name": "Module sold from storage",
      "description": "Triggered when selling a module from storage"
    },
    "Module stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez stocké votre {event.module.name}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixe\r\n    |elif mount = 1:\r\n        rotatif\r\n    |elif mount = 2:\r\n        montage tourelle\r\n    }\r\n}\r\n{event.module.class}-{event.module.grade}\r\n\r\n{if type(event.cost) = \"void\": . |else: pour un cout de {event.cost} crédits.}",
      "default": true,
      "name": "Module stored",
      "description": "Triggered when you store a module"
    },
    "Module swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have swapped the positions of a {event.frommodule.class}-{event.frommodule.grade}\r\n\r\n{if type(event.frommodule.mount) != \"void\":\r\n    {for index, value in event.frommodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.frommodule.name} and \r\n\r\n{if event.tomodule:\r\n    a {event.tomodule.class}-{event.tomodule.grade}\r\n    {if type(event.tomodule.mount) != \"void\":\r\n        {for index, value in event.tomodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n        |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.tomodule.name}.\r\n|else: \r\n    an empty slot.\r\n}",
      "default": true,
      "name": "Module swapped",
      "description": "Triggered when modules are swapped between slots on the ship"
    },
    "Module transfer": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have transferred a {event.module.class}-{event.module.grade}\r\n\r\n{if event.module.mount:\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} \r\n\r\n{if event.transfercost: for a cost of {event.transfercost} credits.}\r\n\r\n{set t_remaining to event.transfertime}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Expected arrival in:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} days,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} hours,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutes.\r\n   }\r\n}{P(event.system)}",
      "default": true,
      "name": "Module transfer",
      "description": "Triggered when you transfer a module from storage at another station"
    },
    "Modules stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have stored the following modules:\r\n\r\n{for module in event.modules:\r\n\r\n    {module.class}-{module.grade}\r\n\r\n    {if type(module.mount) != \"void\":\r\n        {for index, value in module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n        |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {module.name}.\r\n    {Pause(400)}\r\n}\r\n\r\n\r\n",
      "default": true,
      "name": "Modules stored",
      "description": "Triggered when you store multiple modules"
    },
    "Music": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Music",
      "description": "Triggered when the game music 'mood' changes"
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'nav beacon')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_nav_scans', event.numbodies)}\r\n\r\n{set nav to OneOf(\"Nahv\", \"de navigation\")}\r\n{set beacon to OneOf(\"Cette balise\", \"Cette bouée\", \"Ce signal\", \"Ce podh\", \"Ce Phare\")}\r\n{OneOf(\"{beacon} {nav} ma transmis des informations sur {event.numbodies} planètes dans ce système.\",\r\n\"Réception de données concernant {event.numbodies} planètes et autres éléments de ce système.\",\r\n\"Je reçoit des données concernant {event.numbodies} corps céleste de la {beacon} {nav}.\")}\r\n{SetState(\"Nbre_Objects\", 0)}\r\n{SetState(\"Beacon_System\", system.name)}\r\n\r\n{Pause(500)}\r\n",
      "default": true,
      "name": "Nav beacon scan",
      "description": "Triggered when you scan a nav beacon, before the scan data for all the bodies in the system is written into the journal"
    },
    "Near surface": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Near surface",
      "description": "Triggered when you enter or depart orbit around a surface"
    },
    "Next jump": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Next jump",
      "description": "Triggered when selecting a star system to jump to"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": "Alerte: \r\n{set Attaque1 to \"{if event.by: {event.by} |else: on vous attaque!}\"}\r\n{set Attaque2 to \"attaque {if event.by: de {event.by}} detectée.\"}\r\n\r\n{OneOf(Attaque1, Attaque2)}",
      "default": true,
      "name": "NPC attack commenced",
      "description": "Triggered when an attack on your ship by an NPC is detected"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  Attention: scan de cargaison\r\n  {if event.by:\r\n    de {event.by} \r\n  }\r\n  detectée.\r\n}",
      "default": true,
      "name": "NPC cargo scan commenced",
      "description": "Triggered when a cargo scan on your ship by an NPC is detected"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Alerte: tentative dinterdiction\r\n{if event.by:\r\n   par {event.by} \r\n}\r\ndetectée.\r\n\r\n{Occasionally(3, \"Puissance à 0 ou tentez de vous évader\")}.",
      "default": true,
      "name": "NPC interdiction commenced",
      "description": "Triggered when an interdiction attempt on your ship by an NPC is detected"
    },
    "Passengers": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ Passengers }\r\n{_ Triggered at session start from Passengers event }",
      "default": true,
      "name": "Passengers",
      "description": "Triggered at session start from Passengers event"
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} unités de {event.commodity} livrées {Occasionally(2, \"pour {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity delivered",
      "description": "Triggered when a commander delivers a commodity to a power"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Humanise(event.amount)} crédits utilisés pour achat suplémentaires {Occasionally(2, \"pour {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity fast tracked",
      "description": "Triggered when a commander fast tracks a commodity of a power"
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} unités de {event.commodity} obtenues {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity obtained",
      "description": "Triggered when a commander obtains a commodity from a power"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez quité {P(event.frompower)} pour rejoindre {P(event.topower)}.",
      "default": true,
      "name": "Power defected",
      "description": "Triggered when you defect from one power to another"
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vote\r\n{OneOf(\"envoyé\", \"enregistré\", \"validé\")}",
      "default": true,
      "name": "Power expansion vote cast",
      "description": "Triggered when a commander votes for system expansion"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez intégré les rangs de {P(event.power)}.",
      "default": true,
      "name": "Power joined",
      "description": "Triggered when you join a power"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous ne faites plus parti des affiliés à  {P(event.power)}.",
      "default": true,
      "name": "Power left",
      "description": "Triggered when you leave a power"
    },
    "Power preparation vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Votre vote d'une valeur de {if event.amount=1: une |else: {event.amount}} voix \r\n{OneOf(\"envoyé à\", \"enregistré pour\")} {event.power} est placé sur le systême {event.system}.",
      "default": true,
      "name": "Power preparation vote cast",
      "description": "Triggered when a commander votes for system preparation"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Salaire de {Humanise(event.amount)}  credits obtenus {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": true,
      "name": "Power salary claimed",
      "description": "Triggered when a commander claims salary from a power"
    },
    "Power voucher received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power voucher received",
      "description": "Triggered when a commander turns in combat vouchers against an opposing power"
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\r\n\r\n{if event.hull:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"la coque\"])} \r\n}\r\n{if event.cockpit:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"la verrière\"])} \r\n}\r\n{if event.corrosion:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"les systèmes corrodés\", \"les systèmes atteints de corrosion\")])} \r\n}\r\n\r\n{if len(systemsrepaired) > 0:\r\n\r\n    {set remote to Occasionally(2, OneOf(\"autonome\",\"semi-otomatique\"))}\r\n    {set sequence to OneOf(\"la séquence\", \"le cycle\")}\r\n    {OneOf(\r\n        \"les drones ont fini leur reparations sur\", \r\n        \"{sequence} {remote} est terminé, réparations effectuées sur\"\r\n    )}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(systemsrepaired):\r\n        {if cur = 0:\r\n        |elif cur < len(systemsrepaired) - 1:\r\n            , \r\n        |else:\r\n            et\r\n        }\r\n        {systemsrepaired[cur]}\r\n        {set cur to cur + 1}\r\n    }\r\n}.\r\n",
      "default": true,
      "name": "Repair drone",
      "description": "Triggered when your ship is repaired via a repair limpet controller"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "default": true,
      "name": "Repeat last speech",
      "description": "Repeat the last thing said"
    },
    "Report last scan value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Context }\r\n{set scanValue to state.eddi_context_last_scan_estimated_value}\r\n\r\n{if scanValue:\r\n   {OneOf(\"Ceci\", \"Ces données\", \"Ce scan\")} \r\n   {OneOf(\"pourrait\", \"a la possibilité de\", \"peut\") } \r\n   {OneOf(\"rapporter\", \"valloir\", \"vous rapporter\", \"être vendu pour\")}\r\n   {Humanise(scanValue)} crédits.\r\n}\r\n",
      "default": true,
      "name": "Report last scan value",
      "description": "Report the estimated value of the last body scanned"
    },
    "Screenshot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Screenshot",
      "description": "Triggered when you take a screenshot"
    },
    "Search and rescue": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "La récompense pour \r\n{event.amount} \r\n{if event.commodity.rare: rare}\r\n\r\n{if event.commodity.name = \"Boîte noire\":\r\n   {if event.amount > 1:\r\n      {OneOf(\"enregistreur de vol\", \"Boîte noire\")}\r\n   |else: \r\n      {OneOf(\"enregistreurs de vols\", \"boites noires\")}\r\n   }\r\n\r\n|elif event.commodity.name = \"Nacelle d'évacuation endommagée\":\r\n   {OneOf(\"nacelle cryogénique endomagée\", \"nacelle de sauvetage endommagée\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Nacelle d'évacuation occupée\":\r\n   {OneOf(\"nacelle de sauvetage occupée\", \"nacelle cryogénique occupée\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Effets personnels\":\r\n   {if event.amount > 1:des |else un} {OneOf(\"set\", \"lot\")}{if event.amount > 1:s} \r\n   {OneOf(\"d'effets personnels\", \"d'obgets personnels\")}\r\n\r\n|elif event.commodity.name = \"Débris récupérables\":\r\n   {set fragment to OneOf(\"fragment\", \"brisure\", \"morceau\", \"partie\", \"reste\", \"lambeau\", \"chicot\")}\r\n   {set wreckage to OneOf(\"d'épave\", \"de débris\")}\r\n   {fragment}{if event.amount > 1:s} {wreckage}\r\n\r\n|elif event.commodity.name = \"Otage\":\r\n   {OneOf(\"otage\", \"prisonnier\", \"captif\")}{if event.amount > 1:s}\r\n\r\n|else:\r\n   {event.commodity.name}{if event.amount > 1:s}\r\n}\r\nque vous avez \r\n{OneOf(\"récupéré\", \"rapporté\")}\r\n{Occasionally(2, \"{if event.amount = 1: est |else: sont}\")}\r\nde {Humanise(event.reward)} crédits.\r\n",
      "default": true,
      "name": "Search and rescue",
      "description": "Triggered when delivering items to a Search and Rescue contact"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\r\n    Il y a \r\n    {if system.security = \"Aucun\":\r\n        aucune présence\r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")} \r\n    |elif system.security = \"Faible\":\r\n        présence \r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")}   \r\n  {OneOf(\"est au minimum\", \"vraiment faible\", \"légère\")}\r\n    |elif system.security = \"Intermédiaire\":\r\n        présence \r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")} \r\n        {OneOf(\"standard\", \"moyenne\", \"normale\")}\r\n    |elif system.security = \"Haute\":\r\n        présence \r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")} \r\n        {OneOf(\"élevée\", \"lourde\", \"forte\")}\r\n    |else:\r\n        présence \r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")} \r\n       {system.security}\r\n    }\r\n {OneOf(\"ici\", \"dans ce système\", \"dans les environs\")}.\r\n}",
      "default": true,
      "name": "Security presence report",
      "description": "Function to report on the details of system security"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Séquence d'auto-destruction enclenchée...\r\n...\r\npensez à évacuer...",
      "default": true,
      "name": "Self destruct",
      "description": "Triggered when you start the self destruct sequence"
    },
    "Settlement approached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'settlement')}\r\n{SetState('eddi_context_last_action', 'approach')}\r\n{SetState('eddi_context_last_settlement', event.name)}\r\n{SetState('eddi_context_approach_time', SecondsSince(0))}\r\n\r\n",
      "default": true,
      "name": "Settlement approached",
      "description": "Triggered when you approach a settlement"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SpeechRate (\"Alerte, Alerte\", \"fast\")}: les boucliers sont tombés.\r\nAttention à la gestion de l'énergie.",
      "default": true,
      "name": "Shields down",
      "description": "Triggered when your ship's shields go offline"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Information: Bouclier réarmé en puissance minimale. \r\nCondensateurs en charge linéaire.",
      "default": true,
      "name": "Shields up",
      "description": "Triggered when your ship's shields come online"
    },
    "Ship arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\r\nvotre {event.ship} \r\n\r\n{OneOf('est arrivé {if event.system && event.station: \\'à\\')}', \r\n       'a fini son transfert {if event.system && event.station: \\'vers\\')}')}\r\n\r\n{if event.sytem != system.name && len(event.system) > 0 && len(event.station) > 0:\r\n   {event.station} in the {event.system} system\r\n|elif event.station != station.name && len(event.station) > 0:\r\n   {event.station}\r\n}.",
      "default": true,
      "name": "Ship arrived",
      "description": "Triggered when you complete a ship transfer"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipCallsign()} transfert terminé.",
      "default": true,
      "name": "Ship delivered",
      "description": "Triggered when your newly-purchased ship is delivered to you"
    },
    "Ship fsd": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship fsd",
      "description": "Triggered when there is a change to the status of your ship's fsd"
    },
    "Ship interdicted": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": "{if event.iscommander : \r\n {set target to cat(\"Commandeur \", event.interdictor)}\r\n|else : \r\n {set target to event.interdictor}\r\n}   \r\n{if event.submitted :\r\n Vous vous êtes soumis à l'interdiction de {target},\r\n|else :\r\n {OneOf(\"Vous avez raté votre évasion à l'interdiction {if StartsWithVowel(target)=\"true\":d'|else:de }{target}\", \"{target} a réussi son interdiction sur votre vaisseau\")}\r\n}\r\n\r\n{if event.faction !=\"\": \r\n pour le compte {if StartsWithVowel(event.power)=\"true\":d'|else:de }{event.faction}\r\n|elif event.power !=\"\" : \r\n pour le compte de {if StartsWithVowel(event.power)=\"true\":l'|else:la }{event.power}\r\n}.",
      "default": true,
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.succeeded\r\n {if event.iscommander : \r\n  {set target to cat(\"Commandeur \", event.interdictee)}\r\n |else : \r\n  {set target to event.interdictee}\r\n }  \r\n  Vous avez réussi votre interdiction sur {target}.\r\n}",
      "default": true,
      "name": "Ship interdiction",
      "description": "Triggered when you interdict another ship"
    },
    "Ship loadout": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship loadout",
      "description": "Triggered when you obtain the loadout of your ship"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez acheté un {event.ship} pour {Humanise(event.price)} crédits\r\n{if event.soldprice :\r\n et revendu votre {event.soldship} pour {Humanise(event.soldprice)} crédits\r\n|elif event.storedshipid>0:\r\n et remiser au hangar votre {event.storedship}\r\n}.",
      "default": true,
      "name": "Ship purchased",
      "description": "Triggered when you purchase a ship"
    },
    "Ship rebooted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{SpeechVolume('ré-initialisation', 'loud')} {SpeechPitch('total du ', 'x-low')} {SpeechRate('vaisseau', 'slow')} terminé.",
      "default": true,
      "name": "Ship rebooted",
      "description": "Triggered when you run reboot/repair on your ship"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.source = \"Scoop\":\r\n   {SetState('eddi_context_fuel_remaining', event.total)}\r\n|elif event.full:\r\n   {SetState('eddi_context_fuel_remaining', ship.fueltanktotalcapacity)}\r\n|else:\r\n   {SetState('eddi_context_fuel_remaining', state.eddi_context_fuel_remaining + event.amount)}\r\n}\r\n\r\n\r\n{Pause(2000)}\r\n{if event.full:\r\n   {set refueled_desc to OneOf(\"complètement remplis\", \"au max de capacité\",\"à 100% de capacité\")}\r\n   {OneOf(\"le ravitaillement est {refueled_desc}\", \"plein du {ShipName()} complet\", \"Réservoirs du {ShipName()} sont remplis\", \"les réservoirs de {P(ShipName())} sont désormais {refueled_desc}\" )}\r\n|else:\r\n   {if event.amount <= 5.0000:\r\n      {F('Fuel check')}\r\n   }\r\n}",
      "default": true,
      "name": "Ship refuelled",
      "description": "Triggered when you refuel your ship"
    },
    "Ship renamed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} maintenant enregistré auprés de {P(system.faction)}.  Identification {event.ident}.",
      "default": true,
      "name": "Ship renamed",
      "description": "Triggered when you rename a ship"
    },
    "Ship repaired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.item: {event.item}}\r\n{ShipName()} réparé pour {Humanise(event.price)} crédits.",
      "default": true,
      "name": "Ship repaired",
      "description": "Triggered when you repair your ship"
    },
    "Ship repurchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship repurchased",
      "description": "Triggered when you repurchase your ship"
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} {OneOf(\"Réaprovisionné\",\"réarmé\")} pour {Humanise(event.price)} crédits.",
      "default": true,
      "name": "Ship restocked",
      "description": "Triggered when you restock your ship's ammunition"
    },
    "Ship shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Plantage complet système, tout sur OFF.",
      "default": true,
      "name": "Ship shutdown",
      "description": "Triggered when your ship's system are shutdown"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Le {ShipName(event.shipid, event.ship)} {OneOf('sort du service actif','prend sa retraite')}\",\r\n             \"Mise hors service du {ShipName(event.shipid, event.ship)}\",\r\n             \"vente du {ShipName(event.shipid, event.ship)}\",)}\r\nPour la somme de {event.price} crédits.",
      "default": true,
      "name": "Ship sold",
      "description": "Triggered when you sell a ship"
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.ship}, vendu dans le système {event.system} pour {Humanise(event.price)} credits.",
      "default": true,
      "name": "Ship sold on rebuy",
      "description": "Triggered when you sell a ship to raise funds on the insurance / rebuy screen"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\r\n    {ShipName(event.storedshipid, event.storedship)} {OneOf(\"remisé au hangar\", \"parké dans la station\", \"mis en réserve\")},  et,\r\n|elif event.soldship:\r\n    {ShipName(event.soldshipid, event.soldship)} vendu et,\r\n}\r\n{OneOf(\"échange avec\",\"embarquement dans\",\"remise en service du\")} {ShipName(event.shipid, event.ship)}.\r\n\r\n{F(\"Limpet check\")}.\r\n{F(\"List launchbays\")}\r\n\r\n{set fighterhangar to false}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Fighter Hangar\") != -1:\r\n        {set fighterhangar to true}\r\n    }\r\n}\r\n{if fighterhangar = true:\r\n    Mémo: penser à réassigner vos équipages à leur poste.\r\n}",
      "default": true,
      "name": "Ship swapped",
      "description": "Triggered when you swap a ship"
    },
    "Ship targeted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Ship targeted }\r\n{_ Triggered when the player selects a target }\r\n\r\n{_ event Parameters:   targetlocked - bool (ie false when losing target) }\r\n{_ If target locked:   name (of ship), scanstage (ie 0, 1, 2, 3) }\r\n{_ If Scan stage >= 1: name (of pilot), rank (of pilot) }\r\n{_ If scan stage >= 2: shieldhealth, hullhealth (both 0-100) }\r\n{_ If scan stage >= 3: faction, legalstatus (ie clean, wanted, etc), bounty (if appicable), }\r\n{_                     subsystem (ie FSD, power plant, etc), subsystemhealth (0-100) }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'ship')}\r\n{SetState('eddi_context_last_action', 'targeted')}\r\n\r\n{if event.targetlocked && event.scanstage > 2 && !event.subsystem:\r\n    {set legalstatus to event.legalstatus}\r\n \r\n    {if legalstatus = \"Recherché\" || legalstatus = \"Ennemi recherché\" || legalstatus = \"Autorisé\":\r\n         {event.name}, {OneOf(\"Vaisseau recherché\", \"Prime sur l'engin\", \"c'est une cible légitime\")} de rang {event.rank}.\r\n |elif legalstatus = \"Hors-la-loi\":\r\n   {event.name}, {OneOf(\"Vaisseau Hors-la-loi\", \"Hors-la-loi\", \"Se méfier de celui là\")} de rang {event.rank}.\r\n |elif legalstatus = \"Ennemi\":\r\n   {event.name}, {OneOf(\"Vaisseau ennemi\", \"Puissance hostile\")} de rang {event.rank}.\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Ship targeted",
      "description": "Triggered when the player selects a target"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName(event.shipid, event.ship)} {OneOf(\"en chemin de\",\"transéré depuis\", \"transfert amorcé depuis\", \"est transporté depuis\", \"va arriver de\")} {P(event.system)}.\r\n{set t_remaining to event.time}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Arrivée attendu dans:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} jours,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} heures,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutes.\r\n   }\r\n}",
      "default": true,
      "name": "Ship transfer initiated",
      "description": "Triggered when you initiate a ship transfer"
    },
    "Shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Shutdown",
      "description": "Triggered on a clean shutdown of the game"
    },
    "Signal detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Edit the true/false values of `spokenSources` to identify signal types that should be announced whenever they are first detected within a system (otherwise, only signal sources detected while in fss or saa mode will be taken into account. _}\r\n\r\n{set spokenSources to [\r\n    \"Anomaly\": true,\r\n    \"AX Conflict Zone\": true,\r\n    \"Capitol Ship\": false,\r\n    \"Ceremonial Comms\": false,\r\n    \"Combat Aftermath\": false,\r\n    \"Compromised Nav Beacon\": false,\r\n    \"Convoy Dispersal Pattern Detected\": false,\r\n    \"Degraded Emissions\": false,\r\n    \"Distress Call\": true,\r\n    \"Encoded Emissions\": false,\r\n    \"Hazardous Resource Extraction Site\": false,\r\n    \"High Grade Emissions\": false,\r\n    \"High Intensity Combat Zone\": false,\r\n    \"High Intensity Resource Extraction Site\": false,\r\n    \"Listening Post\": true,\r\n    \"Low Intensity Combat Zone\": false,\r\n    \"Low Intensity Resource Extraction Site\": false,\r\n    \"Medium Intensity Combat Zone\": false,\r\n    \"Mission Target\": true,\r\n    \"Nav Beacon\": false,\r\n    \"Non-Human Signal Source\": false,\r\n    \"Notable Stellar Phenomena\": true,\r\n    \"Resource Extraction Site\": false,\r\n    \"Trading Beacon\": false,\r\n    \"Unidentified Signal Source\": false,\r\n    \"Unregistered Comms Beacon\": true,\r\n    \"Weapons Fire\": false,\r\n]}\r\n\r\n{if status.guifocus = \"fss mode\" || status.gui_focus = \"saa mode\" || \r\n(spokenSources[event.source] = true && find(system.signalsources, event.source) = -1):\r\n    {if event.source && !event.stationsignal:\r\n        {if event.threatlevel > 0:\r\n            Class {event.threatlevel} \r\n        }\r\n        {event.source} \r\n        {if event.faction != \"None\":\r\n            for {event.faction}\r\n        }\r\n        detected.\r\n    }\r\n}",
      "default": true,
      "name": "Signal detected",
      "description": "Triggered when a signal source is detected"
    },
    "Silent running": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Silent running",
      "description": "Triggered when you activate or deactivate silent running"
    },
    "Squadron rank": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron rank }\r\n{_ Triggered when your rank with a squadron has changed }\r\n\r\n\r\nYou have been\r\n{if event.newrank > event.oldrank:\r\n    promoted \r\n|else:\r\n    demoted\r\n}\r\nto {cmdr.squadronrank.name} in the {event.name} squadron.\r\n",
      "default": true,
      "name": "Squadron rank",
      "description": "Triggered when your rank with a squadron has changed"
    },
    "Squadron status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron status }\r\n{_ Triggered when your status with a squadron changes }\r\n\r\n\r\n{if event.status = \"applied\":\r\n    You have applied for admission into the {event.name} squadron.\r\n|elif event.status = \"created\":\r\n    You have created the {event.name} squadron.\r\n|elif event.status = \"disbanded\":\r\n    The {event.name} squadron has been disbanded.\r\n|elif event.status = \"invited\":\r\n    You have been invited into the {event.name} squadron.\r\n|elif event.status = \"joined\":\r\n    You have joined the {event.name} squadron.\r\n|elif event.status = \"kicked\":\r\n    You have been kicked from the {event.name} squadron.\r\n|elif event.status = \"left\":\r\n    You have left the {event.name} squadron.\r\n}\r\n",
      "default": true,
      "name": "Squadron status",
      "description": "Triggered when your status with a squadron has changed"
    },
    "SRV docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} {OneOf(\"rentré\", \"parké\", \"rangé\", \"docké\")}.",
      "default": true,
      "name": "SRV docked",
      "description": "Triggered when you dock an SRV with your ship"
    },
    "SRV launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} {OneOf(\"largué\", \"en partance\")}.",
      "default": true,
      "name": "SRV launched",
      "description": "Triggered when you launch an SRV from your ship"
    },
    "SRV turret": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "SRV turret",
      "description": "Triggered when you deploy or retract your SRV's turret"
    },
    "SRV turret deployable": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if !event.deployable:\r\n   {OneOf(\"Buggy\", \"SRV\")} standing by for recovery.\r\n}",
      "default": true,
      "name": "SRV turret deployable",
      "description": "Triggered when your SRV enters or leaves the restriction zone around a ship."
    },
    "Star habitable zone": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which star you are asking about.\r\n|else:\r\n    {if (reportbody.estimatedhabzoneinner && reportbody.estimatedhabzoneouter) && \r\n     (reportbody.estimatedhabzoneinner > 0 && reportbody.estimatedhabzoneouter> 0):\r\n       Habitable zone\r\n       {Occasionally(2, OneOf(\"calculated at\", \"calculated to fall from\"))}: \r\n       {Humanise(reportbody.estimatedhabzoneinner)} \r\n       to {Humanise(reportbody.estimatedhabzoneouter)} \r\n       lightseconds.\r\n    |elif reportbody.estimatedhabzoneouter && reportbody.estimatedhabzoneouter > 0:\r\n       Habitable zone\r\n       {Occasionally(2, OneOf(\"calculated at\", \"calculated to fall from\"))}: \r\n       {Humanise(reportbody.estimatedhabzoneouter)} \r\n       lightseconds maximum.\r\n    }\r\n}",
      "default": true,
      "name": "Star habitable zone",
      "description": "Report on the habitable zone around a star"
    },
    "Star report": {
      "enabled": true,
      "priority": 5,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{_ set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}\r\n\r\n {set Bodies to []}\r\n {for Bodies in system.bodies:\r\n  {if Bodies.name = state.eddi_context_star_star: {set reportbody to Bodies} }\r\n }\r\n\r\n {set LuminosityClass to Spacialise(reportbody.luminosityclass)}\r\n\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    Je ne voit pas de quelle étoile vous demandez des données.\r\n|else:\r\n    {set mainsequence to 0}\r\n    {set QualityRing to event.reserves}\r\n {set NbreRing to len(reportbody.rings)}\r\n {set WithCluster to false}\r\n {set WithRing to false}\r\n {for Rings in reportbody.rings:\r\n  {if find(Rings.name , \"Belt\") >= 0:\r\n   {set WithCluster to true}\r\n  |elif  find(Rings.name , \"Ring\") >= 0:\r\n   {set WithRing to true}\r\n  }\r\n  }\r\n\r\n\r\n    {if reportbody.stellarclass = \"O\":\r\n        étoile de type oh, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . \r\n  Il sagit détoiles extrêmes.  les plus chaudes, les plus bleues, les plus brillantes, les plus massives et rares! Le système de classement de type O est ouvert: il peut évoluer selon les découvertes.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"B\":\r\n        Une étoile de type Bé,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Ces étoiles sont de véritables phares dans le ciel: parmi les 100 étoiles les plus brillantes, un tier sont des étoiles de type B. Ces étoiles sont très chaudes, bleues et émettent de fortes radiations ultraviolettes.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"A\":\r\n        Une étoile de type ah,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles blanches assez répandues.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"F\":\r\n        Une étoile de type èfe,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles blanc-jaune assez répandues.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"G\":\r\n        Une étoile de type gé,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles jaunes comme il y a pour le système Sol.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"K\":\r\n        Une étoile de type Ka,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles orange très répandu.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"M\":\r\n        Une étoile de type ème,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles rouges et froides dont les plus connues sont Betelgueuse ou Antarès.  Toutes les étoiles M visibles à lil nu sont des supergéantes.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"L\":\r\n        étoile de type elle,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoile de couleur rouge très foncé et illuminent surtout dans linfrarouge. Leurs gaz sont assez froids pour que les hydrures de métaux et les métaux alcalins prédominent dans leur spectre.\r\n    |elif reportbody.stellarclass = \"T\":\r\n        une naine brune Té,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles à peine assez massives pour pouvoir effectuer des réactions nucléaires. Elles émettent peu ou pas de lumière, mais seulement des infrarouges. \r\n    |elif reportbody.stellarclass = \"Y\":\r\n        Naine brune Igrec,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... elles se trouvent à lextrémité de léchelle, elles sont plus froides que celles de la classe spectrale Té.\r\n    |elif reportbody.stellarclass = \"TTS\":\r\n        une étoile Té tauri,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  en phase de contraction gravitationnelle\r\n    |elif reportbody.stellarclass = \"AeBe\":\r\n        une proto étoile très jeune pour être en position principale {Occasionally(4, \"mais pourrai devenir une étoile de type Ah ou Bé\")}.,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"W\":\r\n        une étoile de type doublevé,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  est plutôt agée {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"WN\":\r\n        une étoile agée de type W N,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"WNC\":\r\n        une étoile agée de type W N C,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"WC\":\r\n        une étoile agée de type W C? {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}...\r\n    |elif reportbody.stellarclass = \"WO\":\r\n        une étoile agée de type w o,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"CS\":\r\n        une étoile carbonnée de type C S,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"C\":\r\n        une étoile carbonnée de type C, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(4, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"CN\":\r\n        une étoile carbonnée de type C N,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(4, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"CJ\":\r\n        une étoile carbonnée de type C J,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(2, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"CH\":\r\n        une étoile carbonnée de type C H, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(4, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"CHd\":\r\n        une étoile carbonnée de type C H D, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(4, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"MS\":\r\n        une étoile basses séquence de type M S, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui était une étoile de type M et deviendra une étoile carbonnéer\")}.\r\n    |elif reportbody.stellarclass = \"S\":\r\n        une étoile basses séquence de type esse, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui était une étaoile de type èm et deviendra une étoile carbonnéer\")}.\r\n    |elif reportbody.stellarclass = \"D\":\r\n        Une naine blanche de type dé, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.....\r\n    |elif reportbody.stellarclass = \"DA\":\r\n        une naine blanche de type dé ah, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"avec une atmosphere riche en hydrogène\")}\r\n    |elif reportbody.stellarclass = \"DAB\":\r\n        une naine blanche de type D A B, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... {Occasionally(4, \"avec une atmosphere riche en hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"DAO\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DAZ\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DAV\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DB\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DBZ\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DBV\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DO\":\r\n        Une naine blanche? {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DOV\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DQ\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DC\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DCV\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DX\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"N\":\r\n        une étoile à neutron , {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}..... {Occasionally(4, \"qui a un noyau dangeureusement dense\")}.\r\n    |elif reportbody.stellarclass = \"H\":\r\n        un trou noir.\r\n    |elif reportbody.stellarclass = \"X\":\r\n        une entité stélaire exotique.\r\n    |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n         une trou noir supermassif.\r\n    |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        une bleue-blanc supermassive, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui continura son extention jusqu'à devenir une super géante rouge\")}.\r\n    |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n        une blanc-jaune supermassive, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui continura son extention jusqu'à devenir une super géante rouge\")}\r\n    |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n        une super géante rouge, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... {Occasionally(4, \"en phase de consomation d'hélium\")}.\r\n    |elif reportbody.stellarclass = \"M_RedGiant\":\r\n        une géante rouge, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui continu son évolution vers la super géante rouge\")}.\r\n    |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n        une géante orange, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... {Occasionally(4, \"qui continue à ce développer ainsi jusqu'à sa mort\")}.\r\n    |elif reportbody.stellarclass = \"RoguePlanet\":\r\n        a rogue planet\r\n    |elif reportbody.stellarclass = \"Nebula\":\r\n        une nébuleuse.\r\n    |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n        un vestige de nébuleuse.\r\n    }\r\n    {set ageInYears to reportbody.age * 1000000}\r\n    {OneOf(\"qui a {Humanise(ageInYears)} années\",\r\n           \"née depuis {Humanise(ageInYears)} ans\",\r\n           \"d'un àge estimè à {Humanise(ageInYears)} ans\",\r\n    )},\r\n \r\n \r\n    {if ageInYears < 1000000:\r\n        ce qui en fait ne des plus jeune de la galaxie.\r\n    |elif ageInYears >14000000000:\r\n        ce qui fait d'elle une des plus vieille de la galaxie.\r\n    }.\r\n\r\n{if NbreRing > 0:\r\n  Avec\r\n {if WithCluster:\r\n  Quelques champs d'astéroïdes\r\n    {if WithRing: et {NbreRing} anneau}\r\n |elif WithRing:\r\n {NbreRing} anneau\r\n }\r\n \r\n}\r\n{if NbreRing > 0:\r\n  de type\r\n  {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n   {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n        }\r\n        {if len(ringcomposition)= 1:\r\n   {ringcomposition[0]}\r\n        |elif len(ringcomposition) = 2:            \r\n   {ringcomposition[0]} pour le premier et de \r\n   {ringcomposition[1]} pour le second.\r\n        |elif len(ringcomposition) > 2:\r\n            {set cur to 0}\r\n            {while cur < len(reportbody.rings):\r\n                {if cur = 0:                    \r\n     {ringcomposition[cur]}\r\n                |elif cur < len(ringcomposition) - 1:\r\n                    , de {ringcomposition[cur]}  \r\n                |else:\r\n                    , et de {ringcomposition[cur]} pour le dernier\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        {if find(QualityRing , \"Pristine\") >= 0:\r\n            {OneOf(\"et étant inexploités jusqu'à présent\", \"étant vierge de toutes exploitation industrielle\", \"avec une concentration majeure de matière dedans\", \"avec une concentration très richede matière dedans\", \"avec de trés grandes réserves de matière dedans\")} \r\n        |elif find(QualityRing , \"Major\") >= 0:\r\n            {OneOf(\"avec concentrations riche\", \"avec haute concentration\", \"avec un Haut niveau\", \"avec de fortes réserves\", \"avec de grandes réserves\")} de matière dedans\r\n  |elif find(QualityRing , \"Common\") >= 0:\r\n            {OneOf(\"ayant concentrations moyenne de matière dedans\", \"une quantité standard de matière dedans\", \"quelques matières exploitables dedans\")} \r\n  |elif find(QualityRing , \"Low\") >= 0:\r\n            {OneOf(\"peu de matières exploitables dedans\", \"une faible quantité de matière dedans\", \"une faible concentration de matière dedans\")} \r\n  |elif find(QualityRing , \"Depleted\") >= 0:\r\n            {OneOf(\"presque plus de matières exploitables dedans\", \"quelques échantillons de matières dedans\", \"presque plus que de la poussière de matières exploitables dedans\")} \r\n\r\n  }...\r\n    }\r\n\r\n    \r\n\r\n\r\n \r\n    {if mainsequence = 1:\r\n        {OneOf(\".\",\".\",\"Comme vous pouvez le constater, elle émet une lumière {reportbody.chromaticity}...\")} \r\n\r\n        {set notables to []}\r\n... ...\r\n        {if reportbody.massprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"une masse solaire incroyablement faible de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"une masse solaire faible de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability <1:\r\n            {set notables to cat(notables, [\"une masse solaire peu courante de \"])}\r\n        |elif reportbody.massprobability <10:\r\n            {set notables to cat(notables, [\"une masse solaire inférieure à la myenne\"])}\r\n        |elif reportbody.massprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"une masse solaire incroyablement haute de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"une masse solaire extrèmement haute de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [\"une masse solaire particulièrement haute de \"])}\r\n        |elif reportbody.massprobability > 90:\r\n            {set notables to cat(notables, [\"une masse solaire juste au dessus de la moyenne\"])}\r\n        }\r\n\r\n        {if reportbody.radiusprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"Un rayon solaire incroyablement bas de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"Un rayon solaire extrêmement faible de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability <1:\r\n            {set notables to cat(notables, [\"Un rayon solaire exceptionnellement faible\"])}\r\n        |elif reportbody.radiusprobability <10:\r\n            {set notables to cat(notables, [\"Rayon solaire inférieur à la moyenne\"])}\r\n        |elif reportbody.radiusprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"Un rayon solaire extrêmement élevé de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"Un rayon solaire incroyablement élevé de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [\"Un rayon solaire exceptionnellement élevé\"])}\r\n        |elif reportbody.radiusprobability > 90:\r\n            {set notables to cat(notables, [\"un rayon solaire plus grand que la moyenne\"])}\r\n        }\r\n        {set temp to reportbody.temperature - 273.15} \r\n        {if reportbody.tempprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"Une température de surface incroyablement basse de \", Humanise(temp), \" Degrés Celsius\")])}\r\n        |elif reportbody.tempprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"Une température superficielle extrêmement faible de \", Humanise(temp), \" Degrés Celsius\")])}\r\n        |elif reportbody.tempprobability <1:\r\n            {set notables to cat(notables, [\"Une température de surface exceptionnellement faible\"])}\r\n        |elif reportbody.tempprobability <10:\r\n            {set notables to cat(notables, [\"Température de surface inférieure à la moyenne\"])}\r\n        |elif reportbody.tempprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"Une température de surface extrêmement élevée de \", Humanise(temp), \" Degrés Celsius\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"Une température de surface incroyablement élevée de \", Humanise(temp), \" Degrés Celsius\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [\"Une température de surface exceptionnellement élevée\"])}\r\n        |elif reportbody.tempprobability > 90:\r\n            {set notables to cat(notables, [\"Température de surface supérieure à la moyenne\"])}\r\n        }\r\n\r\n        {if len(notables) = 0:\r\n            {OneOf(\"\", \"un exemple classique de ce type d'étoile.\", \"Rien de particulier relevé sur cette étoile.\", \"rapport de particularité èr ah ess.\")}\r\n        |else:\r\n            {OneOf('comparé aux autres étoiles de ce type', 'en comparaison aux autres étoiles {reportbody.stellarclass} ', 'par rapport aux autres étoiles {reportbody.stellarclass} ')}, celle ci est \r\n            {if len(notables) = 1:\r\n                remarquable pour avoir {notables[0]}.\r\n            |elif len(notables) = 2:\r\n                {OneOf('intéressante', 'inhabituelle')}, avec {notables[0]} et {notables[1]}.\r\n            |elif len(notables) = 3:\r\n                {OneOf('exceptionnelle', 'remarquable')}, avec {notables[0]}, {notables[1]} et {notables[2]}.\r\n            }\r\n        }\r\n    }    \r\n} ",
      "default": true,
      "name": "Star report",
      "description": "Function to report on the details of the contextual body"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n{Pause(1000)}\r\n\r\nScann de létoile {P(event.name)} de classe {event.stellarclass}  terminé.\r\n\r\n{F(\"Star report\")}\r\n\r\n\r\n{if event.estimatedvalue:\r\n Valeur estimée {OneOf(\"du scann\", \"de l'étude\", \"du sondage\")}: \r\n {set BodyValue to Humanise(event.estimatedvalue)}\r\n {if find(BodyValue, \"route\")>=0:\r\n  {set BodyValue to cat(\"vers les \", slice(BodyValue, 14))}\r\n }\r\n   {BodyValue} crédits.\r\n}\r\n\r\n\r\n{if (event.estimatedhabzoneinner && event.estimatedhabzoneouter) && \r\n (event.estimatedhabzoneinner > 0 && event.estimatedhabzoneouter> 0):\r\n   Zone habitable\r\n   {Occasionally(2, OneOf(\"calculée de \", \"estimée de \", \"aux environs de \"))}: \r\n   {set BodyValue to Humanise(event.estimatedhabzoneinner*1000)}\r\n {if find(BodyValue, \"route\")>=0:\r\n  {set BodyValue to cat(\"vers les \", slice(BodyValue, 14))}\r\n  }\r\n {BodyValue} \r\n   à {set BodyValue to Humanise(event.estimatedhabzoneouter*1000)}\r\n {if find(BodyValue, \"route\")>=0:\r\n  {set BodyValue to cat(\"vers les \", slice(BodyValue, 14))}\r\n  }\r\n {BodyValue} \r\n   secondes lumières.\r\n|elif event.estimatedhabzoneouter && event.estimatedhabzoneouter > 0:\r\n   Zone habitable\r\n   {Occasionally(2, OneOf(\"calculé jusqu'à\", \"estimé jusqu'à\"))}:\r\n   {set BodyValue to Humanise(event.estimatedhabzoneouter*1000)}\r\n {if find(BodyValue, \"route\")>=0:\r\n  {set BodyValue to cat(\"vers les \", slice(BodyValue, 14))}\r\n  }\r\n {BodyValue} \r\n   secondes lumières maximum.\r\n}",
      "default": true,
      "name": "Star scanned",
      "description": "Triggered when you complete a scan of a stellar body"
    },
    "Station no fire zone entered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{if event.weaponsdeployed = \"true\" :\r\n Attention: Vous entrez dans une zone neutre avec vos armes déployées. \r\n Désactivez les avant représaille de la station.\r\n|else :\r\n Vous entrez dans une zone neutre. N'activez vos armes que si vous en acceptez les risques.\r\n\r\n}",
      "default": true,
      "name": "Station no fire zone entered",
      "description": "Triggered when your ship enters a station's no fire zone"
    },
    "Station no fire zone exited": {
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "Vous sortez d'une zone neutre. {Occasionally(5, \"Assurez vous de n'être pas suivi ou attendu par vos ennemis.\")}",
      "default": true,
      "name": "Station no fire zone exited",
      "description": "Triggered when your ship exits a station's no fire zone"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "Nothing of interest here.",
      "default": true,
      "name": "Station report",
      "description": "Function to report on the details of the current station"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Vous pouvez économiser {Humanise(saving)} crédits échangeant votre module {shipmodule.name} ici.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}",
      "default": true,
      "name": "Swapout check",
      "description": "Check to see if any fitted modules are available more cheaply here"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Utilisation de\r\n{set cur to 0}\r\n{for material in event.materials:\r\n    {if cur=0:\r\n |elif cur=1 && len(event.materials)=3:,\r\n |else: et\r\n }\r\n    {material.amount} {material.material}\r\n {set cur to cur+1}\r\n}\r\npour {OneOf('effectuer la synthèse de','procéder à la production de','terminer', 'faire')} {event.synthesis}.\r\n",
      "default": true,
      "name": "Synthesised",
      "description": "Triggered when you synthesise something from materials"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    Je ne vois pas de quel système vous voulez parler.\r\n|else:\r\n    La distance vers {P(reportsystem.name)} est de {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} années lumières.\r\n}",
      "default": true,
      "name": "System distance report",
      "description": "Function to report on the distance to the contextual system"
    },
    "System faction changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_faction')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{if event.system = homesystem.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'Votre système habitat')}\r\n|elif event.system = system.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'ce système où vous êtes')}\r\n|else:\r\n  {set system to OneOf('le système {P(event.system)}'\r\n                       '{P(event.system)}')}\r\n}\r\n\r\n  {_ System has entered a new state}\r\n  {OneOf('Restez à la pointe de lactualité et de la technologie avec Rèmlok Industries! :','Les nouvelles vous sont offertes par Gal net point F R! le meilleurs site dinformation de la galaxie!','','élite-dangerouss.fr, pour tout savoir sur la galaxie et plus encore vous offre cette news!','','Le Discord Déhessène, le discord des explorateurs a une transmission pour vous :','',',','Une transmition locale rapporte que ', 'Information: ', 'Transmission interceptée.  Le contenu indique que ','Vous êtes en panne, avez besoin de réparation ou de réapprovisionnements ? Contactez SYMBIOSE, nous sommes là pour vous dépanner !')}\r\n   {OneOf(\"La faction dirigeante dans {system} n'est plus {event.oldfaction}, elle a été supplentée par {event.newfaction}.\", \"{event.newfaction} est devenu la faction dirigeante dans {system}, {event.oldfaction} est à l'index\")}",
      "default": true,
      "name": "System faction changed",
      "description": "Triggered when there is a change in the controlling faction of a watched system"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n Je n'ai pas de système en mémoire pour lequel vous donner des informations.\r\n|else:\r\n {P(reportsystem.name)} est un système\r\n\r\n {if reportsystem.population && reportsystem.population > 0:\r\n  {if reportsystem.allegiance = \"Federation\":\r\n   {OneOf(\"de la Fédération\",\"fédéral\",\"d'allégeance fédérale\")},\r\n  |elif reportsystem.allegiance = \"Empire\":\r\n   {OneOf(\"Impérial\",\"de l'empire\",\"d'allégeance impériale\")}\r\n  |else:\r\n   {OneOf(\"Indépendant\",\"non-alligné\")},\r\n  }\r\n {if reportsystem.government:\r\n  dont le gouvernement est de type :{reportsystem.government)},\r\n |else:\r\n  ,\r\n }\r\n {OneOf(\"abritant \", \"ayant une population de \", \"étant le foyer de \", \"comportant \", \"composé de \")} {Humanise(reportsystem.population)} {OneOf(\"personnes\", \"habitants\")}\r\n {if reportsystem.power:\r\n  , {OneOf(\"dirigé par \", \"allié avec \", \"contrôlé par \")} {P(reportsystem.power)}\r\n }.\r\n\r\n {if reportsystem.faction:\r\n  {P(reportsystem.faction)} est {OneOf(\"la puissance \", \"la faction \", \"le groupe \", \"la corpo \")} {OneOf(\"ayant le contrôle \", \"locale \", \"principale \", \"dirrigeante \")} ici.\r\n }\r\n {if reportsystem.state:\r\n  état politico-économique :{reportsystem.state)},\r\n }\r\n\r\n {if reportsystem.primaryeconomy:\r\n  son économie principale est :{reportsystem.primaryeconomy)},\r\n }\r\n {if len(reportsystem.stations) = 0:\r\n  Il ny a pas de station présente.\r\n |else:\r\n  {if len(reportsystem.orbitalstations) = 0:\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    Il y a {OneOf(\"une seule\", \"une unique\", \"juste une\")} station planétaire\r\n   |else:\r\n    il y a {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  |elif len(reportsystem.orbitalstations) = 1:\r\n   Il y a {OneOf(\"une seule\", \"une unique\", \"une\")} station orbitale\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    et une station planétaire\r\n   |elif len(reportsystem.planetarystations) > 1:\r\n    et {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  |else:\r\n   il y a {len(reportsystem.orbitalstations)} stations orbitale\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    et {OneOf(\"une seule\", \"une\")} station planétaire\r\n   |elif len(reportsystem.planetarystations) > 1:\r\n    et {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  }\r\n }\r\n {OneOf(\"ici\",\"dans ce système\",\"localement\")}\r\n |else:\r\n dépeuplé\r\n }.\r\n}",
      "default": true,
      "name": "System report",
      "description": "Function to report on the details of the contextual star system"
    },
    "System scan complete": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Preferences _}\r\n{set reportGreenSystems to true}  {_ if true, reports systems containing all fsd synthesis elements. _}\r\n{set reportGoldSystems to true}   {_ if true, reports systems containing all surface prospectable elements. _}\r\n{set reportBodiesToMap to true}   {_ If true, recommends bodies to map using the `Bodies to map` script. _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {for compartment in ship.compartments:\r\n        {if compartment.module.invariantName = \"Planetary Vehicle Hangar\":\r\n            {set hasSRV to true}\r\n        }\r\n    }\r\n    {if hasSRV:\r\n        {if system.isgold:\r\n            {if reportGoldSystems:\r\n                This {Occasionally(2, \"star\")} system is {OneOf(\"extraordinary\", \"incredible\")}, \r\n                containing every element \r\n                {OneOf(\"that can be found\", \"available\")}\r\n                {OneOf(\"on a planetary surface.\", \"by surface prospecting.\")}\r\n                Exploration class: Gold.\r\n            }\r\n        |elif system.isgreen:\r\n            {if reportGreenSystems:\r\n                This {Occasionally(2, \"star\")} system is {OneOf(\"remarkable\", \"notable\")}, \r\n                containing every element that may be required to \r\n                {OneOf(\"augment\", \"boost\")} \r\n                {OneOf(\"the jump range of this ship.\", \"an explorer's jump range.\")}\r\n                Exploration class: Green.\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportBodiesToMap:\r\n        {set bodiesToMap to F(\"Bodies to map\")}\r\n        {if bodiesToMap:\r\n            {Pause(2000)}\r\n            {bodiesToMap}\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "System scan complete",
      "description": "Triggered after having identified all bodies in the system"
    },
    "System state changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_state')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{if event.system = homesystem.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'Votre système habitat')}\r\n|elif event.system = system.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'ce système où vous êtes')}\r\n|else:\r\n  {set system to OneOf('le système {P(event.system)}'\r\n                       '{P(event.system)}')}\r\n}\r\n\r\n  {_ System has entered a new state}\r\n  {OneOf('Restez à la pointe de lactualité et de la technologie avec Rèmlok Industries! :','Les nouvelles vous sont offertes par Gal net point F R! le meilleurs site dinformation de la galaxie!','','élite-dangerouss.fr, pour tout savoir sur la galaxie et plus encore vous offre cette news!','','Le Discord Déhessène, le discord des explorateurs a une transmission pour vous :','',',','Une transmition locale rapporte que ', 'Information: ', 'Transmission interceptée.  Le contenu indique que ','Vous êtes en panne, avez besoin de réparation ou de réapprovisionnements ? Contactez SYMBIOSE, nous sommes là pour vous dépanner !.')}\r\n{if event.newstate != 'Aucune':\r\n  {if event.newstate = 'Essor économique':\r\n   {if event.oldstate = \"Faillite\":\r\n       {OneOf(\"L'économie dans {system} fait du yoyo. Après une période de récession, nous voilà en plein essort, autant en profiter avant que cela ne change\", \"La récession dans {system} se transforme en une phase d'essor économique\")}\r\n      |elif event.oldstate = \"CivilUnrest\":\r\n       {OneOf(\"Les émeutes dans {system} sont appaisées, la hausse du moral que cela induit a apporté un nouveau boom économique\", \"la fin des émeutes a porté {system} vers un nouvel essor économique\")}\r\n      |elif event.oldstate = \"Guerre civile\":\r\n          {OneOf(\"La guerre civile dans {system} est terminée, la reconstruction a apporté un nouvel essor économique\", \"Apés sa guerre civile, {system} est désormais en plein boom économique\")}\r\n      |elif event.oldstate = \"Élections\":\r\n       {OneOf(\"Le choix des dernières élections dans {system} a mis en confiance les industriels et investisseur. Un nouvel essor économique commance.\", \"Les élections sont enfin fini dans {system}, résultant sur un nouveau boom économique.\")}\r\n       |elif event.oldstate = \"Politique expansionniste\":\r\n       {OneOf(\"La phase d'expansion dans {system} aboutie a un nouvel essor économique\", \"L'eccélante gestion de l'expansion dans {system} donne un nouvel essor é&conomique comme résultat\")}.\r\n       |elif event.oldstate = \"Famine\":\r\n          {OneOf(\"La famine a été endigué dans {system}, les habitants repus, {system} joui d'un nouvel essor économique\", \"Fin de la famine dans {system}, début d'un nouveau boum économique\")}\r\n       |elif event.oldstate = \"Investissements\":\r\n       {OneOf(\"{system} en a fini dans son aggrandissement de ses structures, la bonne qualité des travaux a mis la population en confiance et apporte un nouveau boum économique\", \"La qualité des investissements dans {system} aboutie sur un nouvel essor économique\")}\r\n       |elif event.oldstate = \"Loi Martiale\":\r\n       {OneOf(\"La loi martiale dans {system} a porter ses fruits abouttissant sur un nouvel essor économique\", \"Le nouveau boum économique dans {system} a mis fin à la loi martiale\")}\r\n       |elif event.oldstate = \"Épidémie\":\r\n       |elif event.oldstate = \"Retraite\":\r\n       |elif event.oldstate = \"Guerre\":\r\n      |else:\r\n        {OneOf('{system} connait un boum économique','{system} connait un boum économique, cest le moment pour y commercer','{system} connait un boum économique, voir comment y investir','{system} entre dans une période de grands succés commerciaux','{system} entre dans une période de grands succés commerciaux, cest le moment di  spéculer','{system} entre dans une période de grands succés commerciaux, voir comment y investir')}\r\n   }\r\n  |elif event.newstate = 'Faillite':\r\n    {system} Éprouve des difficultés économiques.\r\n  |elif event.newstate = 'Émeutes':\r\n    {OneOf('{system} Éprouve des troubles civils',\r\n           'Il y a des troubles dans le système {system}')}\r\n  |elif event.newstate = 'Guerre civile':\r\n    {OneOf('{system} Est en guerre avec une autre faction dans le même système',\r\n           'La guerre civile a éclaté à {system}',\r\n           '{system} est maintenant en guerre civile',\r\n           'Les hostilités ont éclaté dans {system}')}\r\n  |elif event.newstate = \"Élections\":\r\n    {system} est en precessus électoral\r\n  |elif event.newstate = \"Politique expansionniste\":\r\n    {OneOf('Une faction dans {system} essaie de se développer vers un système voisin',\r\n           'Une faction dans {system} se prépare à se développer vers un système voisin')}\r\n  |elif event.newstate = 'Famine':\r\n    {system} subie une famine\r\n  |elif event.newstate = 'Investissements':\r\n    La faction de contrôlant {system} investit fortement dans son infrastructure locale\r\n  |elif event.newstate = 'Loi Martiale':\r\n    {system} a accru la sécurité en raison dun blocus par la faction y aillant le contrôle\r\n  |elif event.newstate = 'Épidémie':\r\n    {system} souffre dune épidémie virale ou bactérienne sévère. \r\n  |elif event.newstate = 'Retraite':\r\n    La faction contrôlant {system} se retire dun système voisin\r\n  |elif event.newstate = 'Guerre':\r\n    {system} est désormais en guerre avec un système voisin\r\n  |else:\r\n    {OneOf('{system} est entré en {event.newstate}',\r\n           '{system} est maintenant dans un état de {event.newstate}')}\r\n  }\r\n|else: {_ the state go from any one to Aucune}\r\n  {if event.oldstate = 'Essor économique':\r\n    {OneOf(\"Le boum économique dans {system} est terminé, fini les bonnes affaire.\", \"L'essor économique dans {system} s'est tassé, retour à un état plus standard\", \"l'essor économique dans {system} est terminé\")}\r\n  |elif event.oldstate = 'Faillite':\r\n  {OneOf(\"{system} n'éprouve plus de difficultés économiques\", \"l'état de faillite dans {system} est résolu, retour en un état économique stable\")}\r\n  |elif event.oldstate = 'Émeutes':\r\n    {OneOf(\"{system} n'éprouve plus de troubles civils\",\r\n           \"les troubles dans le système {system} se sont appaisés, il n'y a plus de problème\")}\r\n  |elif event.oldstate = 'Guerre civile':\r\n    {OneOf(\"La guerre civile dans {system} est terminé\",\r\n           \"Les différentes parties dans {system} ont trouvé un accord de paix, fin de la guerre civile\")}\r\n  |elif event.oldstate = \"Élections\":\r\n    {OneOf(\"les élections dans {system} sont finies\", \"Les bulletins dans {system} ont été dépuillés et comptés, les élections sont bel et bien finies\")}\r\n  |elif event.oldstate = \"Politique expansionniste\":\r\n    {OneOf(\"{system} en a fini avec sa politique expentioniste\", \"fin de la politique expentioniste dans {system}\")}\r\n  |elif event.oldstate = 'Famine':\r\n     {OneOf(\"{system} ne subie plus de famine\", \"la famine dans {system} a été héradiquée\")}\r\n  |elif event.oldstate = 'Investissements':\r\n     {OneOf(\"{system} en a fini avec sa politique d'investissement\")}\r\n  |elif event.oldstate = 'Loi Martiale':\r\n     {OneOf(\"plus de problème dans {system}, fin de la loi martiale\", \"{system} a mis fin à la loi lartiale, fin des blocus\")}\r\n  |elif event.oldstate = 'Épidémie':\r\n    l'épidémie dans {system} a été enrayée \r\n  |elif event.oldstate = 'Retraite':\r\n    {system} a fini de se retiré d'un système voisin, retour à un état normal\r\n  |elif event.oldstate = 'Guerre':\r\n    {OneOf(\"La guerre dans {system} est terminé\",\r\n           \"{system} ont trouvé un accord de paix avec son adversaire, fin de la guerre\")}\r\n  }\r\n\r\n}. ",
      "default": true,
      "name": "System state changed",
      "description": "Triggered when there is a change in the state of a watched system"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n Je n'ai pas de système en mémoire pour lequel vous donner des informations.\r\n|else:\r\n {P(reportsystem.name)} est un système\r\n\r\n {if reportsystem.population && reportsystem.population > 0:\r\n  {if reportsystem.allegiance = \"Federation\":\r\n   {OneOf(\"de la Fédération\",\"fédéral\",\"d'allégeance fédérale\")},\r\n  |elif reportsystem.allegiance = \"Empire\":\r\n   {OneOf(\"Impérial\",\"de l'empire\",\"d'allégeance impériale\")}\r\n  |else:\r\n   {OneOf(\"Indépendant\",\"non-alligné\")},\r\n  }\r\n {if reportsystem.government:\r\n  dont le gouvernement est de type :{reportsystem.government)},\r\n |else:\r\n  ,\r\n }\r\n {OneOf(\"abritant \", \"ayant une population de \", \"étant le foyer de \", \"comportant \", \"composé de \")} {Humanise(reportsystem.population)} {OneOf(\"personnes\", \"habitants\")}\r\n {if reportsystem.power:\r\n  , {OneOf(\"dirigé par \", \"allié avec \", \"contrôlé par \")} {P(reportsystem.power)}\r\n }.\r\n\r\n {if reportsystem.faction:\r\n  {P(reportsystem.faction)} est {OneOf(\"la puissance \", \"la faction \", \"le groupe \", \"la corpo \")}{OneOf(\"ayant le contrôle \", \"locale \", \"principale \", \"dirrigeante \")} ici.\r\n }\r\n {if reportsystem.state:\r\n  état politico-économique :{P(reportsystem.state)},\r\n }\r\n\r\n {if reportsystem.primaryeconomy:\r\n  son économie principale est :{P(reportsystem.primaryeconomy)},\r\n }\r\n {if len(reportsystem.stations) = 0:\r\n  Il ny a pas de station présente.\r\n |else:\r\n  {if len(reportsystem.orbitalstations) = 0:\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    Il y a {OneOf(\"une seule\", \"une unique\", \"juste une\")} station planétaire\r\n   |else:\r\n    il y a {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  |elif len(reportsystem.orbitalstations) = 1:\r\n   Il y a {OneOf(\"une seule\", \"une unique\", \"une\")} station orbitale\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    et une station planétaire\r\n   |elif len(reportsystem.planetarystations) > 1:\r\n    et {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  |else:\r\n   il y a {len(reportsystem.orbitalstations)} stations orbitale\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    et {OneOf(\"une seule\", \"une\")} station planétaire\r\n   |elif len(reportsystem.planetarystations) > 1:\r\n    et {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  }\r\n }\r\n {OneOf(\"ici\",\"dans ce système\",\"localement\")}\r\n |else:\r\n dépeuplé\r\n }.\r\n}",
      "default": true,
      "name": "System state report",
      "description": "Report on the current state of the contextual system"
    },
    "Technology broker": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Technology broker",
      "description": "Triggered when using the Technology Broker to unlock new purchasable technology"
    },
    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{if event.playercontrolled = true:\r\n  Attérissage sur {P(body.name)} réussi.\r\n  {Pause(2000)}\r\n|else:\r\n  {ShipName()} a attéri sur {P(body.name)}.\r\n}\r\n\r\n{if type(event.latitude) != \"void\" && type(event.longitude) != \"void\" :\r\nles coordonées sont {round(event.longitude, 2)} degrés de longitude, {round(event.latitude, 2)} degrés de latitude.\r\n}",
      "default": true,
      "name": "Touchdown",
      "description": "Triggered when your ship touches down on a planet's surface"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\n{OneOf(\"Données commerciales achetées pour le systèmes {P(event.system)}\", \"les données commerciales pour {P(event.system)} sont maintenant enregistrées\", \"Les données commerciales de {P(event.system)} ont été envoyées par les services éconamiques de la station\",  \"Réception des données commerciales de {P(event.system)} confirmée\")}.",
      "default": true,
      "name": "Trade data purchased",
      "description": "Triggered when you purchase trade data"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'trade')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n{OneOf('Vos capacités commerciales vous ont portées au titre de','Grace à vos bénéfices commerciaux, vous avez gagné le rang de')} {event.rating}.",
      "default": true,
      "name": "Trade promotion",
      "description": "Triggered when your trade rank increases"
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\n {Humanise(event.amount)} crédits versé\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    par {P(event.rewards[0].faction)}\r\n  |else:\r\n    dont\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            et\r\n        }\r\n        {P(event.rewards[cur].faction)}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n\r\n\r\n\r\n",
      "default": true,
      "name": "Trade voucher redeemed",
      "description": "Triggered when you redeem a trade voucher"
    },
    "Under attack": {
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Under attack",
      "description": "Triggered when under fire (same time as the Under Attack voice message)"
    },
    "Undocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Le contrôle complet du vaisseai vous est rendu\", \"ecoutilles d'amarrage libérées\", \"Déconnecté du réseau local\")}.\r\n\r\n{set limpetcheck to F(\"Limpet check\")}\r\n\r\n{if limpetcheck:\r\n    {Pause(5000)}\r\n    {limpetcheck}\r\n}",
      "default": true,
      "name": "Undocked",
      "description": "Triggered when your ship undocks from a station or outpost"
    },
    "VA initialized": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "VA initialized",
      "description": "Triggered when the VoiceAttack plugin is initialized"
    },
    "Vehicle destroyed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n {OneOf(\"Votre {event.vehicle} a été perdu\", \"{event.vehicle} détruit\", \"perte de votre {event.vehicle}\")}",
      "default": true,
      "name": "Vehicle destroyed",
      "description": "Triggered when your vehicle is destroyed"
    },
    "Zone Occupée": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Avec l'accord de Nicou pour Remlock Industrie}\r\n{_ Vu avec Duita Rider Pour Concordia}\r\n\r\n{if state.systemearrivee = \"Bragurom Du\" :\r\n{_ Station : Pellegrino Station.}\r\nMessage : Bienvenue sur Bragurom Du, commandant {P(cmdr.name)}. Rèmlok Industries y produit des matériaux et modules de très haute qualité, ainsi que des composants Rèmlok. Merci de suivre les règles locales. \r\nEnglish message:\r\nWelcome on Bragurom Du commandeur. Rèmlok Industries produces high tech materials, modules, and Rèmlok components. Please, follow the local rules.\r\n\r\n|elif state.systemearrivee = \"Edge Fraternity Landing\":\r\nBienvenu à EDGE FRATERNITY, système ouvert à tous les chercheurs et explorateurs. Attention, many french speaking here!\r\n\r\n|elif state.systemearrivee = \"CONCORDIA\":\r\nSoyez les bienvenus à CONCORDIA, centre de recherche inter-factions Francophones et base avancée d'exploration.\r\n\r\n}",
      "default": true,
      "name": "Zone Occupée",
      "description": "Test pour savoir si une région ou station est occupée par un groupe de joueur"
    }
  }
}