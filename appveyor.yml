version: build-{build}
branches:
  except:
  - l10n_develop
skip_tags: true
skip_commits:
  # Skip commits where all of the files modified are docs
  files:
    - docs/*
    - '**/*.html'
    - '**/*.md'
image: 
- Visual Studio 2019
configuration: Release
nuget:
  project_feed: true
before_build:
- cmd: nuget restore
- cmd: dotnet tool install --global Codecov.Tool
build:
  project: EDDI.sln      # path to Visual Studio solution or project
  parallel: true
  verbosity: minimal
test_script:
 # This powershell script may be run locally from your EDDI repo installation folder.
 # The OpenCover file path must be updated if the OpenCover package version is updated
 # The VSTest target file path must be updated if the CI is building using something other than Visual Studios 2019 Community Edition
 - ps: |
      $openCoverConsole = $env:USERPROFILE + '\.nuget\packages\OpenCover\4.6.519\tools\OpenCover.Console.exe'
      $openCoverReg = '-register:Path32'
      $openCoverArgs = '-mergebyhash -skipautoprops -excludebyattribute:*.ExcludeFromCodeCoverage*,*.GeneratedCodeAttribute* -excludebyfile:*\*.Designer.cs,*.xaml -filter:"+[Eddi*]* +[Utilities*]* +[Tests*]UnitTests*"'
      
      $target = '-target:"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"'
      $targetArgs = '-targetargs:"Tests\bin\Release\Tests.dll' + $(If ($APPVEYOR) {' /logger:Appveyor'}) + ' /tests:UnitTests /Parallel /InIsolation /Blame"'
 
      New-Item -ItemType directory -Path '.\TestResults' -Force
      $output = '-output:".\TestResults\coverage.xml"'
      
      $runCoverageCmd = "$openCoverConsole $openCoverArgs $openCoverReg $target $targetArgs $output"
      
      ECHO $runCoverageCmd
      IEX $runCoverageCmd
after_test:
 - ps: |
      $error.clear()
      try { codecov -f 'TestResults\coverage.xml' -v }
      catch {}
      if ($error) { ECHO 'Failed to upload coverage report... ' + $error }